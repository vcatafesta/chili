#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166
#
#  chili-wifi-config-wpa
#  Created: 2025/02/06 - 04:56
#  Altered: 2025/02/06 - 04:56
#
#  Copyright (c) 2025-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=chili-wifi-config-wpa

# Definir a variável de controle para restaurar a formatação original
reset=$(tput sgr0)

# Definir os estilos de texto como variáveis
bold=$(tput bold)
underline=$(tput smul)   # Início do sublinhado
nounderline=$(tput rmul) # Fim do sublinhado
reverse=$(tput rev)      # Inverte as cores de fundo e texto

# Definir as cores ANSI como variáveis
black=$(tput bold)$(tput setaf 0)
red=$(tput bold)$(tput setaf 196)
green=$(tput bold)$(tput setaf 2)
yellow=$(tput bold)$(tput setaf 3)
blue=$(tput setaf 4)
pink=$(tput setaf 5)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
gray=$(tput setaf 8)
orange=$(tput setaf 202)
purple=$(tput setaf 125)
violet=$(tput setaf 61)
light_red=$(tput setaf 9)
light_green=$(tput setaf 10)
light_yellow=$(tput setaf 11)
light_blue=$(tput setaf 12)
light_magenta=$(tput setaf 13)
light_cyan=$(tput setaf 14)
bright_white=$(tput setaf 15)

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset}'
#set -x
#set -e
shopt -s extglob

#system
declare APP="${0##*/}"
declare _VERSION_="1.0.0-20250206"
declare distro="$(uname -n)"
declare DEPENDENCIES=(tput)

MostraErro() {
	echo "erro: ${red}$1${reset} => comando: ${cyan}'$2'${reset} => result=${yellow}$3${reset}"
}
trap 'MostraErro "$APP[$FUNCNAME][$LINENO]" "$BASH_COMMAND" "$?"; exit 1' ERR

# Função para verificar se o serviço está ativo, e ativar apenas se não estiver
check_and_start_service() {
	service=$1
	service_name=$2

	# Verifica se o serviço está ativo
	if ! systemctl is-active --quiet "$service"; then
		# Se o serviço não estiver ativo, tenta ativá-lo
		echo "O serviço '$service_name' não está ativo. Tentando ativar..."
		sudo systemctl start "$service"

		# Verifica novamente se o serviço foi ativado com sucesso
		if systemctl is-active --quiet "$service"; then
			echo "O serviço '$service_name' foi ativado com sucesso."
		else
			echo "Falha ao ativar o serviço '$service_name'."
			exit 1
		fi
	else
		echo "O serviço '$service_name' já está ativo."
	fi
}

# Função para obter a interface de rede Wi-Fi
get_wifi_interface() {
	# Obtém as interfaces de rede Wi-Fi disponíveis
	interfaces=$(iw dev | grep Interface | awk '{print $2}')

	# Exibe as interfaces em um menu usando o dialog
	interface=$(dialog --backtitle "Configuração Wi-Fi" --title "Selecione a Interface de Rede" --menu "Escolha a interface de rede" 15 50 4 $(echo "$interfaces" | awk '{print $1, $1}') 3>&1 1>&2 2>&3)

	# Verifica se o usuário selecionou uma interface
	if [ -z "$interface" ]; then
		dialog --msgbox "Nenhuma interface selecionada. Saindo..." 6 40
		exit 1
	fi
}

# Função para escanear as redes Wi-Fi disponíveis
scan_networks() {
	# Escaneia as redes Wi-Fi
	sudo iw dev "$interface" scan | grep SSID | awk -F: '{print $2}' | sed 's/^[ \t]*//'
}

# Função para conectar-se à rede Wi-Fi usando wpa_supplicant
connect_wifi() {
	# Solicita ao usuário para selecionar a rede Wi-Fi
	network=$(dialog --backtitle "Configuração Wi-Fi" --title "Selecione a Rede Wi-Fi" --menu "Escolha a rede Wi-Fi" 15 50 4 $(echo "$networks" | awk '{print $1, $1}') 3>&1 1>&2 2>&3)

	# Verifica se o usuário selecionou uma rede
	if [ -z "$network" ]; then
		dialog --msgbox "Nenhuma rede selecionada. Saindo..." 6 40
		exit 1
	fi

	# Solicita ao usuário a senha da rede Wi-Fi
	password=$(dialog --backtitle "Configuração Wi-Fi" --title "Senha da Rede Wi-Fi" --insecure --passwordbox "Digite a senha para a rede Wi-Fi '$network'" 8 40 3>&1 1>&2 2>&3)

	# Cria um arquivo de configuração para o wpa_supplicant
	wpa_conf="/etc/wpa_supplicant/wpa_supplicant.conf"

	# Adiciona a rede ao arquivo de configuração do wpa_supplicant
	sudo bash -c "cat >> $wpa_conf <<EOF
network={
    ssid=\"$network\"
    psk=\"$password\"
}
EOF"

	# Reinicia o wpa_supplicant para aplicar a configuração
	sudo systemctl restart wpa_supplicant@"$interface".service

	# Verifica se a conexão foi bem-sucedida
	if iw dev "$interface" link; then
		dialog --msgbox "Conectado com sucesso à rede Wi-Fi '$network'!" 6 40
	else
		dialog --msgbox "Falha ao conectar à rede Wi-Fi '$network'. Verifique a senha e tente novamente." 6 40
	fi
}

# Função principal
main() {
	# Verifica se o NetworkManager está ativo, e ativa caso não esteja
	check_and_start_service "NetworkManager" "NetworkManager"

	# Verifica se o wpa_supplicant está ativo, e ativa caso não esteja
	check_and_start_service "wpa_supplicant" "wpa_supplicant"

	# Exibe uma mensagem inicial
	dialog --backtitle "$APP - Configuração Wi-Fi" --title "Configuração Wi-Fi" --msgbox "Bem-vindo ao assistente de configuração de Wi-Fi!" 6 40

	# Obtém a interface de rede Wi-Fi
	get_wifi_interface

	# Escaneia as redes Wi-Fi disponíveis
	networks=$(scan_networks)

	# Verifica se há redes Wi-Fi disponíveis
	if [ -z "$networks" ]; then
		dialog --msgbox "Nenhuma rede Wi-Fi encontrada. Saindo..." 6 40
		exit 1
	fi

	# Conecta-se a uma rede Wi-Fi
	connect_wifi
}

# Executa a função principal
main
