#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166
#
#  chili-fr
#  Created: 2019/12/13 - 00:00
#  Altered: 2024/10/03 - 00:00
#  Updated: ter 28 jan 2025 00:48:03 -04
#
#  Copyright (c) 2019-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=chili-fr
export TERM=${TERM:-xterm}
export TERM=${TERM:-xterm-256color}

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e

#system
readonly APP="${0##*/}"
readonly VERSION='1.28.01-20250128'
readonly APPDESC='Wrapper lite para o qemu'
readonly -a DEPENDENCIES=(
	'tput'
	'gettext'
	'qemu-system-x86_64'
	'spice-vdagent'
	'remote-viewer'
	'python3'
	'virsh'
	'find'
	'awk'
)
readonly -A PACKAGEDEP=(
	['tput']='ncurses'
	['gettext']='gettext'
	['qemu-system-x86_64']='qemu-full'
	['spice-vdagent']='spice-vdagent'
	['remote-viewer']='virt-viewer'
	['python3']='python'
	['virsh']='libvirt'
	['find']='findutils'
	['awk']='gawk'
)

declare HOME_DIR="$HOME/.chili-fr"
declare iface_bridge='br0'
declare bridge=false
declare xmem='8G'
declare videodevice='qxl'
declare videodevice='virtio-vga'
declare videodevice='VGA'
declare spice=false
declare drive=false
declare uefi=false
declare vdisk=false
declare vdisk_name=''
declare netdevice='virtio-net-pci'
declare anetdevices=()
declare netchoosedriver=false
declare LC_DEFAULT=0
declare -i lastrow=$(tput lines)
declare -i lastcol=$(tput cols)
declare -i Prow=0
declare -i Pcol=0
declare -a qemu_options=()
trap cleanup_working_dir EXIT

function cleanup_working_dir {
	if [[ -d "${working_dir}" ]]; then
		rm -rf -- "${working_dir}"
	fi
}

sh_setvarcolors() {
	if command -v "tput" &>/dev/null; then
		tput sgr0 # reset colors
		bold=$(tput bold)
		reset=$(tput sgr0)
		rst=$(tput sgr0)
		white="${bold}$(tput setaf 7)"
		black="${bold}$(tput setaf 0)"
		red=$(tput bold)$(tput setaf 196)
		green=$(tput setaf 2)
		yellow=$(tput bold)$(tput setaf 3)
		blue=$(tput setaf 4)
		pink=$(tput setaf 5)
		cyan=$(tput setaf 6)
		orange=$(tput setaf 3)
		purple=$(tput setaf 125)
		violet=$(tput setaf 61)
	else
		red="\033[01;31m"
		green="\033[01;32m"
		yellow="\033[01;33m"
		blue="\033[01;34m"
		pink="\033[01;35m"
		cyan="\033[01;36m"
		reset="\033[0m"
	fi
	COL_NC='\e[0m' # No Color
	COL_LIGHT_GREEN='\e[1;32m'
	COL_LIGHT_RED='\e[1;31m'
	TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
	CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
	INFO="[i]"
	# shellcheck disable=SC2034
	DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
	OVER="\\r\\033[K"
	DOTPREFIX="  ${black}::${reset} "
}

get() {
	local row="$1"
	local col="$2"
	local prompt="$3"
	local new_value="$4"
	local old_value="$5"
	local color="${Acores[box]}"

	# setpos "$row" "$col"
	printf "%s" "${reset}$color"
	read -p "${prompt}${reverse}" -e -i "$old_value" "$new_value"
	# tput sc # Salva a posição atual do cursor
	echo -n -e "$reset"
}

row() { echo "$Prow"; }
col() { echo "$Pcol"; }
lastrow() { echo "$(tput lines)"; }
lastcol() { echo "$(tput cols)"; }

setpos() {
	local row="$1"
	local col="$2"

	Prow="$row"
	Pcol="$col"
	# tput cup "$row" "$col"
	printf "\e[$((row + 1));$((col + 1))H"
}

sh_unsetvarcolors() {
	unset bold reset cyan red blue white black
	unset green yellow orange pink cyan purple violet
}

die() {
	local msg=$1
	shift
	printf "  %b %s\\n" "${CROSS}" "${bold}${red}${msg}"
	exit 1
}

log_err() {
	printf "  %b %s\\n" "${CROSS}" "${*}"
}

log_msg() {
	local retval="${PIPESTATUS[0]}"

	if [[ $retval -eq 0 ]]; then
		printf "  %b %s\\n" "${TICK}" "${*}"
	else
		printf "  %b %s\\n" "${CROSS}" "${*}"
	fi
}

msg_raw() {
	local msg="$1"
	# Remove tags HTML, se existirem
	#msg="$(sed 's/<[^>]*>//g' <<< "$msg")"

	# Verifica se existe ':' na mensagem
	if [[ "$msg" == *:* ]]; then
		# Divide a string antes e depois do primeiro ':'
		local before_colon="${msg%%:*}:"
		local after_colon="${msg#*: }"
		# Aplica as cores
		msg="${cyan}${before_colon} ${red}${after_colon}${reset}"
	else
		# Se não houver ':', aplica apenas a cor padrão
		msg="${yellow}${cyan}${msg}${reset}"
	fi
	echo -e "$msg"
}
export -f msg_raw

msg() {
	local msg="$1"
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")" # Remove as tags HTML
	echo -e "  =>${cyan}running: ${yellow}${msg}${reset}"
}
export -f msg

msg_ok() {
	local msg="$1"
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")" # Remove as tags HTML
	echo -e "  =>${cyan}feito: ${green}${msg}${reset}"
}
export -f msg_ok

msg_run() {
	local msg="$1"
	echo -e "BP=>${cyan}running: ${yellow}${msg}${reset}"
	eval "$msg"
}
export -f msg_run

msg_info() {
	local msg="$1"
	local caller_function="${FUNCNAME[1]}" # Nome da função que chamou a função atual
	local caller_line="${BASH_LINENO[1]}"  # Número da linha que chamou a função atual
	#echo -e "${caller_function}=>${yellow}info   : ${cyan}${msg}${reset}"
	echo -e "  =>${yellow}info   : ${cyan}${msg}${reset}"
}
export -f msg_info

msg_warning() {
	local msg="$1"
	local caller_function="${FUNCNAME[1]}" # Nome da função que chamou a função atual
	local caller_line="${BASH_LINENO[1]}"  # Número da linha que chamou a função atual
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")"  # Remove as tags HTML
	#echo -e "${caller_function}=>${red}warning: ${orange}${msg}${reset}"
	echo -e "  =>${yellow}warning: ${cyan}${msg}${reset}"
}
export -f msg_warning

msg_warn() {
	local msg="$1"
	local caller_function="${FUNCNAME[1]}" # Nome da função que chamou a função atual
	local caller_line="${BASH_LINENO[1]}"  # Número da linha que chamou a função atual
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")"  # Remove as tags HTML
	#echo -e "${caller_function}=>${red}warning: ${orange}${msg}${reset}"
	echo -e "  =>${yellow}warning: ${cyan}${msg}${reset}"
}
export -f msg_warn

msg_info() {
	echo -e "${yellow}[INFO] ${cyan}$1${reset}"
}

# Função para exibir mensagens informativas
msg_err() {
	echo -e "${red}[ERRO] ${cyan}$1${reset}"
}

replicate() {
	local char=${1:-'#'}
	local nsize=${2:-$(tput cols)}
	local line
	printf -v line "%*s" "$nsize" && echo -e "${blue}${line// /$char}${reset}"
}
export -f replicate

send_telegram_message() {
	local message="$1"
	local parse_mode="$2"

	# Define parse_mode como "MarkdownV2" se não for especificado
	[[ -z $parse_mode ]] && parse_mode="HTML"

	# Remove as tags HTML e exibe o resultado no terminal
	echo -e "${red}$(sed 's/<[^>]*>//g' <<<"$message")${reset}"
	# Envia a mensagem original com HTML para o Telegram
	curl -s -X POST "https://api.telegram.org/bot${inputs_telegram_token}/sendMessage" \
		-d chat_id="${inputs_telegram_chat_id}" \
		-d text="$message" \
		-d parse_mode="$parse_mode"
}
export -f send_telegram_message

readconf() {
	local msg="$1"
	local color="${2:-${red}}"

	echo -n -e "$color"
	if [[ $LC_DEFAULT -eq 0 ]]; then
		read -r -p "$msg [S/n]"
	else
		read -r -p "$msg [Y/n]"
	fi
	echo -n -e "$reset"
	case "${REPLY^}" in
	[SY]) return 0 ;;
	"") return 0 ;;
	*) return 1 ;;
	esac
}

sh_checkDependencies() {
	local aBlock_files=()
	local d
	local errorFound=false
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		if ! command -v "$d" &>/dev/null; then
			log_err "Check: ${red}ERROR${reset}: $(gettext "Não foi possível encontrar o comando") ${cyan}'$d'${reset} -> $(gettext "instalar pacote") ${cyan}"${PACKAGEDEP[$d]}"${reset}"
			missing+=("$d")
			errorFound=true
		else
			log_msg "Check: ${cyan}$d"
		fi
	done

	aBlock_files+=('/usr/share/edk2/x64/OVMF_VARS.4m.fd')
	aBlock_files+=('/archlive/qemu/hda.img')
	aBlock_files+=('/archlive/qemu/hdb.img')
	aBlock_files+=('/archlive/qemu/hdc.img')
	aBlock_files+=('/archlive/qemu/hdd.img')
	for d in "${aBlock_files[@]}"; do
		if [[ ! -e "$d" ]]; then
			log_err "Check: ${red}ERROR${reset}: $(gettext "Não foi possível encontrar o arquivo") ${cyan}'$d'${reset}"
			missing+=("$d")
			errorFound=true
		fi
	done

	if $errorFound; then
		replicate '='
		echo "${yellow}             $(gettext "IMPOSSÍVEL CONTINUAR")"
		echo "${black}$(gettext "Este script precisa dos comandos listados acima")"
		echo "${black}$(gettext "Instale-os e/ou verifique se eles estão em seu") ${red}\$PATH${reset}"
		replicate '='
		#die $(gettext "Abortando...")
		if readconf "Deseja instalar os pacotes e criar os arquivos necessários ?"; then
			sh_setup
		fi
	fi
}

######################################################################################################

# Função para verificar se a interface TAP já existe e retornar o próximo número disponível
get_next_free_tap() {
	local next_tap=1
	while ip link show "tap$next_tap" &>/dev/null; do
		next_tap=$((next_tap + 1))
	done
	echo "tap$next_tap"
}

# Função para verificar se a bridge existe e retornar o próximo nome disponível
get_next_free_bridge() {
	local base_bridge="virbr"
	local next_bridge=1
	while ip link show "$base_bridge$next_bridge" &>/dev/null; do
		next_bridge=$((next_bridge + 1))
	done
	echo "$base_bridge$next_bridge"
}

create_bridge_virbr() {
	local bridge_name="$1"
	if [[ -z "$bridge_name" ]]; then
		# Obter o próximo nome de bridge disponível
		bridge_name=$(get_next_free_bridge)
	fi

	# Criar a rede virsh correspondente à nova bridge
	if sudo virsh net-list --all 1>/dev/null; then
		if ! sudo virsh net-list --all | grep -q "$bridge_name" 1>/dev/null; then
			msg_info "Criando a rede $bridge_name..."

			# Calcular a faixa de IP com base no nome da bridge
			# O número da bridge será extraído (ex: virbr1 -> 1, virbr2 -> 2, etc.)
			bridge_number=$(echo "$bridge_name" | grep -o '[0-9]*')
			base_ip="172.$((30 + bridge_number)).255.1"
			GATEWAY="$base_ip"
			subnet="255.255.255.0"
			dhcp_range_start="172.$((30 + bridge_number)).255.2"
			dhcp_range_end="172.$((30 + bridge_number)).255.200"

			# Criando o arquivo de configuração temporário para a rede
			tmp_net_config=$(mktemp)

			cat <<EOF >"$tmp_net_config"
<!--
WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE
OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:
  virsh net-edit $bridge_name
or other application using the libvirt API.
-->

<network>
  <name>$bridge_name</name>
  <uuid>$(uuidgen)</uuid>
  <forward mode='nat'/>
  <bridge name='$bridge_name' stp='on' delay='0'/>
  <ip address='$base_ip' netmask='$subnet'>
    <dhcp>
      <range start='$dhcp_range_start' end='$dhcp_range_end'/>
    </dhcp>
  </ip>
</network>
EOF
			# Definir a rede usando o arquivo temporário
			sudo virsh net-define "$tmp_net_config" 1>/dev/null
			# Remover o arquivo de configuração temporário após a definição
			sudo rm -f "$tmp_net_config"
		fi
	else
		die "erro fatal!"
	fi

	# Tornar a nova bridge persistente
	msg_info "Tornando $bridge_name persistente..."
	msg_info "Iniciando a rede $bridge_name..."
	sudo virsh net-autostart "$bridge_name" 1>/dev/null

	if ! sudo virsh net-start "$bridge_name" 1>/dev/null; then
		msg_err "Falha ao iniciar a rede $bridge_name. Tentando novamente."
		sudo virsh net-destroy "$bridge_name" 1>/dev/null
		sudo virsh net-start "$bridge_name" 1>/dev/null
	fi

	# Obter o próximo nome de interface TAP disponível
	#tap_name=$(get_next_free_tap)-"$bridge_name"
	tap_name="tap-$bridge_name"

	# Criar a interface TAP (ex: tap0, tap1, tap2...)
	msg_info "Criando a interface TAP $tap_name..."
	sudo ip tuntap add dev "$tap_name" mode tap 1>/dev/null

	# Colocar a interface TAP para up
	msg_info "Ativando a interface TAP $tap_name..."
	sudo ip link set "$tap_name" up 1>/dev/null

	# Adicionar a interface TAP à bridge recém-criada
	msg_info "Adicionando $tap_name à bridge $bridge_name..."
	sudo brctl addif "$bridge_name" "$tap_name" 1>/dev/null

	# Verificar se a bridge e o TAP foram configurados corretamente
	msg_info "Verificando a associação de interfaces à bridge $bridge_name..."
	brctl show "$bridge_name" 1>/dev/null

	# Exibir as interfaces para verificar se tudo está funcionando
	msg_info "Verificando as interfaces de rede..."
	ip addr show "$bridge_name" 1>/dev/null
	ip addr show "$tap_name" 1>/dev/null

	sudo virsh net-info "$bridge_name"
	msg_info "Configuração concluída!"
	exit
}

remove_bridge_and_tap() {
	local bridge_name="$1"
	local tap_name

	#tap_name="tap$(echo "$bridge_name" | sed 's/[^0-9]*//g')" # Ajuste para pegar o número correto do tap
	tap_name="tap-$bridge_name"

	# Remover a bridge
	msg_info "Removendo a bridge $bridge_name..."
	sudo ip link set "$bridge_name" down 1>/dev/null
	sudo brctl delbr "$bridge_name" 1>/dev/null

	# Remover a interface TAP associada
	if ip link show "$tap_name" &>/dev/null; then
		msg_info "Removendo a interface TAP $tap_name..."
		sudo ip link set "$tap_name" down 1>/dev/null
		sudo ip tuntap del dev "$tap_name" mode tap 1>/dev/null
	else
		msg_err "A interface TAP $tap_name não existe."
	fi

	# Remover a rede do libvirt
	msg_info "Removendo a rede do libvirt..."
	sudo virsh net-destroy "$bridge_name" 1>/dev/null
	sudo virsh net-autostart --disable "$bridge_name" 1>/dev/null
	sudo virsh net-undefine "$bridge_name" 1>/dev/null
	sudo ip link delete "$bridge_name" 1>/dev/null
	sudo systemctl restart libvirtd 1>/dev/null

	# Remover a configuração da rede do libvirt, caso fique residuos
	local network_config="/etc/libvirt/qemu/networks/${bridge_name}.xml"
	local network_config_autostart="/etc/libvirt/qemu/networks/autostart/${bridge_name}.xml"
	msg_info "Removendo o arquivo de configuração da rede $bridge_name..."
	sudo rm -fv "$network_config" 1>/dev/null
	sudo rm -fv "$network_config_autostart" 1>/dev/null

	sudo virsh net-info "$bridge_name" 1>/dev/null
	msg_ok "Bridge $bridge_name e TAP $tap_name removidos com sucesso."
	exit 0
}

######################################################################################################

# Função para obter as interfaces do tipo bridge usando brctl
get_bridge_interfaces() {
	#brctl show | awk 'NR > 1 {printf "%s ", $1}'
	brctl show | awk 'NR > 1 {printf "%s ", $1}' | sed 's/ $//'
}

# Função para obter os arquivos RAW no diretório $HOME_DIR/vdisk/
get_raw_images() {
  local dir="${HOME_DIR:-$HOME}/vdisk"
  # Lista os arquivos com extensão .img, removendo o caminho e separando por espaço
  find "$dir" -maxdepth 1 -type f -name "*.img" -exec basename {} \; | tr '\n' ' ' | sed 's/ $//'
}

supports_uefi() {
	fdisk -l "$1" 2>/dev/null | grep -q "EFI"
}

detect_audio_server() {
	if pgrep -x pipewire >/dev/null; then
		echo "pipewire"
	elif pgrep -x pulseaudio >/dev/null; then
		echo "pa"
	elif pgrep -x jackd >/dev/null; then
		echo "jack"
	else
		echo "none"
	fi
}

sh_version() {
	cat <<-EOF
		${bold}${cyan}${0##*/} v${VERSION}${rst}
		${APPDESC}
		${bold}${black}Copyright (C) 2019-2025 ChiliLinux Team${black}

		  Este é um software livre: você é livre para alterá-lo e redistribuí-lo.
		  O $APP é disponibilizado para você sob a ${yellow}Licença MIT${black}, e
		  inclui software de código aberto sob uma variedade de outras licenças.
		  Você pode ler instruções sobre como baixar e criar para você mesmo
		  o código fonte específico usado para criar esta cópia.
		  ${red}Este programa vem com absolutamente NENHUMA garantia.
		  ${rst}
	EOF
	exit 0
}

function sh_usage {
	cat <<EOF
uso: ${orange}$APP${reset} [Opções]
${cyan}$(gettext "Opções"):${reset}
  ${rst}-b|--bridge ${orange}<bridge_name>         ${cyan}# inicia rede em modo bridge - ex: -b br0 (default: NAT)
  ${rst}-c|--create-bridge ${orange}<bridge_name>  ${cyan}# criar bridge - ex: -c br0
  ${rst}-r|--remove-bridge ${orange}<bridge_name>  ${cyan}# remover bridge - ex: -r br0
  ${rst}-d|--drive ${orange}<drive_path>           ${cyan}# anexa disco externo - ex: -d /dev/sdX (default: none)
  ${rst}-m|--memory ${orange}<mem>                 ${cyan}# memória inicial de convidado - ex: -m 16G (default: 8GB)
  ${rst}-v|--vdisk ${orange}<filename.img|qcow2>   ${cyan}# usa um disco virtual interno - ( default: none)
  ${rst}   --cvdisk ${orange}<filename>            ${cyan}# cria um disco virtual para uso interno
  ${rst}   --rvdisk ${orange}<filename>            ${cyan}# remove um disco virtual
  ${rst}-g|--video ${orange}<video_driver>         ${cyan}# virtio-vga,virtio-gpu-pci,qxl-vga,VGA,cirrus-vga,ati-vga,virtio-gpu-pci,bochs-display - default: VGA
  ${rst}-N|--network ${orange}<net_driver>         ${cyan}# virtio-net-pci,e1000,rtl8139,vmxnet3 (default: virtio-pc)
  ${rst}-n|--nocolor                      ${cyan}# remover cores da saída - (default: color)
  ${rst}-s|--spice                        ${cyan}# ativar o spice - (default: desligado)
  ${rst}-u|--uefi                         ${cyan}# inicialização em UEFI - (default: BIOS)
  ${rst}-V|--version                      ${cyan}# exibe a versão do aplicativo
  ${rst}-h|--help                         ${cyan}# imprime este ajuda
${cyan}$(gettext "Exemplo"):${rst}
  $ ${orange}$APP${reset} -u -b br0 file.iso        ${cyan}#$(gettext "Execute uma imagem, em ponte, usando") UEFI ${rst}
  $ ${orange}$APP${reset} -u -s -b br0 file.iso     ${cyan}#$(gettext "Execute uma imagem, em ponte, usando spice, usando") UEFI ${rst}
  $ ${orange}$APP${reset} -u file.img               ${cyan}#$(gettext "Execute uma imagem, em NAT, usando") UEFI ${rst}
  $ ${orange}$APP${reset} -b br0 /dev/sdX           ${cyan}#$(gettext "Execute uma device, em ponte, usando") UEFI ${rst}
  $ ${orange}$APP${reset} -u -m 16G -b br0 /dev/sdX ${cyan}#$(gettext "Execute uma device, em ponte, 16Gb memória, usando") UEFI ${rst}
  $ ${orange}$APP${reset} -a pipewire /dev/sdX      ${cyan}#$(gettext "Execute uma device, em NAT, usando audio pipewire") ${rst}
  $ ${orange}$APP${reset} file.iso                  ${cyan}#$(gettext "Execute uma imagem usando") BIOS${rst}
  $ ${orange}$APP${reset} -b file.img               ${cyan}#$(gettext "Execute uma imagem, em ponte, usando") BIOS ${rst}
  $ ${orange}$APP${reset} -m 16G /dev/sdX           ${cyan}#$(gettext "Execute uma device, 16GB memória, usando") BIOS ${rst}
${cyan}Forma de uso mais comum:${rst}
  $ ${orange}$APP${reset} filename.iso ${rst}
  $ ${orange}$APP${reset} -u filename.iso ${rst}
  $ ${orange}$APP${reset} /dev/sdX ${rst}
  $ ${orange}$APP${reset} -u /dev/sdX ${rst}
  $ ${orange}$APP${reset} -d /dev/sdX filename.iso ${rst}
  $ ${orange}$APP${reset} -u -d /dev/sdX filename.iso ${rst}
  $ ${orange}$APP${reset} -v vdisk_name.img filename.iso ${rst}
  $ ${orange}$APP${reset} -u -v vdisk_name.img filename.iso ${rst}
  $ ${orange}$APP${reset} $HOME_DIR/vdisk/vdisk_name.img ${rst}
  ${reset}
EOF
	exit 0
}

sh_setup() {
	msg_info "Instalando necessários pacotes"
	sudo pacman -S --needed --quiet --noconfirm \
		qemu-full \
		edk2-ovmf \
		ncurses \
		gettext \
		spice-vdagent \
		virt-viewer \
		libvirt

	msg_info "Criando diretórios de trabalho"
	mkdir -p "$HOME_DIR/" &>/dev/null
	msg_info "Setando permissões no diretórios de trabalho"
	sudo chmod 1777 "$HOME_DIR/" &>/dev/null
	msg_info "Criando arquivos de bloco no diretórios de trabalho"
	sudo qemu-img create $HOME_DIR/hda.img -f raw 32G &>/dev/null
	sudo qemu-img create $HOME_DIR/hdb.img -f raw 32G &>/dev/null
	sudo qemu-img create $HOME_DIR/hdc.img -f raw 32G &>/dev/null
	sudo qemu-img create $HOME_DIR/hdd.img -f raw 32G &>/dev/null

	sh_start_vdagentd
}

sh_create_vdisk_file() {
	msg_info "Criando diretórios de trabalho"
	mkdir -p "$HOME_DIR/vdisk" &>/dev/null
	msg_info "Setando permissões no diretórios de trabalho"
	sudo chmod 1777 "$HOME_DIR/" &>/dev/null
	sudo chown $USER:$USER "$HOME_DIR/" -R &>/dev/null

	while true; do
		replicate "================== DISCOS VIRTUAIS DISPONÍVEIS em $HOME_DIR ===================" 1
		echo -n $green
		ls -lh $HOME_DIR/vdisk
		echo -n $rst
		replicate '='
		get 10 10 "Entre com o nome do disco (sem extensão) - ex vda  : " cvdisk_name
		get 11 10 "Entre com o tamanho do disco virtual em GB - ex 32 : " cvdisk_size

		if test -e $HOME_DIR/vdisk/$cvdisk_name.img &>/dev/null; then
			if readconf "Disco virtual já existe, escolha outro nome. Tentar novamente?"; then
				continue
			fi
		else
			if qemu-img create $HOME_DIR/vdisk/$cvdisk_name.img -f raw "$cvdisk_size"G &>/dev/null; then
				msg_ok "Disco virtual '$HOME_DIR/vdisk/$cvdisk_name.img' criado com sucesso"
				echo -n $green
				ls -lh $HOME_DIR/vdisk
				echo -n $rst
				replicate '='
			else
				die "Falha na criação do disco virtual $HOME_DIR/vdisk/$cvdisk_name.img"
			fi
		fi
		break
	done
}

sh_remove_vdisk_file() {
	msg_info "Criando diretórios de trabalho"
	mkdir -p "$HOME_DIR/vdisk" &>/dev/null
	msg_info "Setando permissões no diretórios de trabalho"
	sudo chmod 1777 "$HOME_DIR/" &>/dev/null
	sudo chown $USER:$USER "$HOME_DIR/" -R &>/dev/null

	replicate "================== DISCOS VIRTUAIS DISPONÍVEIS em $HOME_DIR ===================" 1
	echo -n $green
	ls -lh $HOME_DIR/vdisk
	echo -n $rst
	replicate '='
	get 10 10 "Entre com o nome do disco para remover - ex vda.img : " cvdisk_name

	if test -e $HOME_DIR/vdisk/$cvdisk_name &>/dev/null; then
		if readconf "PERGUNTA: Deseja realmente excluir o disco virtual ?"; then
			if rm -f $HOME_DIR/vdisk/$cvdisk_name &>/dev/null; then
				msg_ok "Disco virtual '$HOME_DIR/vdisk/$cvdisk_name' foi removido com sucesso"
				exit 0
			fi
		fi
		exit $?
	else
		die "Disco virtual digitado não existe"!
	fi
}

sh_start_vdagentd() {
	if ! pgrep spice-vdagentd; then
		msg_info "Ativando o serviço spice-vdaagentd"
		sudo systemctl enable spice-vdagentd
		sudo systemctl start spice-vdagentd
	fi
}

chili-fr() {
	local img="$1"
	local random_port="$(shuf -i 4444-45000 -n 1)"
	local random_spice_port="$(shuf -i 5900-5910 -n 1)"

	# Verificar se a imagem foi especificada
	[[ -z "$img" ]] && { die "Erro: Imagem/Device não especificada!"; }
	[[ ! -e "$img" ]] && { die "Erro: Imagem/Device ${cyan}${img} ${red}não encontrada!${reset}"; }

	# Forçar UEFI, se solicitado
	if $uefi; then
		msg_info "Forçando inicialização UEFI..."
		qemu_options+=(-drive if=pflash,format=raw,readonly=on,file=/usr/share/edk2/x64/OVMF.4m.fd)
	else
		msg_warn "Parametro --uefi não informado, usando BIOS Legacy (padrão)..."
	fi

	# Adicionar opções padrão do QEMU
	qemu_options+=(-no-fd-bootchk)
	qemu_options+=(-machine accel=kvm)
	qemu_options+=(-cpu host)
	qemu_options+=(-smp "$(nproc)")
	qemu_options+=(-m ${xmem})
	qemu_options+=(-k pt-br)

	format=$(file -b --mime-type "${img}")
	if [[ "${format}" == "application/x-iso9660-image" ]]; then
		qemu_options+=(-boot d)
		qemu_options+=(-cdrom "${img}")
	elif [[ "${img}" == *.qcow2 ]]; then
		qemu_options+=(-drive file="${img}",if=none,id=disk1,format=qcow2)
		qemu_options+=(-device ide-hd,drive=disk1,bootindex=1)
	else
		qemu_options+=(-drive file="${img}",if=none,id=disk1,format=raw)
		qemu_options+=(-device ide-hd,drive=disk1,bootindex=1)
	fi

  if $vdisk; then
  	msg_info "Anexando disco virtual: ${yellow}$HOME_DIR/vdisk/${vdisk_name}"
	  qemu_options+=(-drive file=$HOME_DIR/vdisk/${vdisk_name}.img,format=raw)
  else
		msg_warn "Parametro --vdisk não informado, iniciando sem disco virtual..."
  fi

	qemu_options+=(-name "chili-fr $*",process=archiso_0)
	qemu_options+=(-device virtio-scsi-pci,id=scsi0)
	qemu_options+=(-audiodev "$(detect_audio_server)",id=snd0)
	qemu_options+=(-rtc base=localtime,clock=host)
	qemu_options+=(-device ich9-intel-hda)
	qemu_options+=(-device hda-output,audiodev=snd0)
	qemu_options+=(-global ICH9-LPC.disable_s3=1)
	qemu_options+=(-machine type=q35,smm=on,accel=kvm,usb=on,pcspk-audiodev=snd0)
	qemu_options+=(-device virtio-serial)
	qemu_options+=(-device virtio-serial)

	#video
	qemu_options+=(-device "$videodevice")

	if $spice; then
		sh_start_vdagentd

		# Informar as portas usadas
		msg_info "spice running on port: $random_spice_port"
		msg_info "remote-viewer spice://localhost:$random_spice_port"

		# Configurar SPICE
		qemu_options+=(-spice port=$random_spice_port,disable-ticketing=on)
		qemu_options+=(-monitor tcp:localhost:$random_port,server,nowait)
		#qemu_options+=(-chardev spicevmc,id=vdagent,debug=0,name=vdagent)
		#qemu_options+=(-device virtserialport,chardev=vdagent,name=com.redhat.spice.0)
		qemu_options+=(-chardev spicevmc,id=charchannel0,name=vdagent)
		qemu_options+=(-device virtserialport,chardev=charchannel0,name=com.redhat.spice.0)

		# Executar o QEMU
		sudo env XDG_RUNTIME_DIR=/run/user/$(id -u) qemu-system-x86_64 "${qemu_options[@]}" &
		qemu_pid=$!
		remote-viewer spice://localhost:$random_spice_port &
		viewer_pid=$!

		# Aguardar o remote-viewer e encerrar o QEMU quando ele fechar
		wait $viewer_pid
		kill $qemu_pid &>/dev/null
	else
		sudo env XDG_RUNTIME_DIR=/run/user/$(id -u) qemu-system-x86_64 "${qemu_options[@]}" 1>/dev/null
	fi
}
export -f fr

sh_setvarcolors

# Display usage information if no arguments are passed
if [[ $# -eq 0 || $1 == @(-h|--help) ]]; then
	sh_usage
fi
if [[ $1 == @(-V|--version) ]]; then
	sh_version
fi

sh_checkDependencies

OPTIONS=m:ub:Vnhd:sg:v:i:N:c:r:
LONGOPTIONS=memory:,uefi,bridge:,version,nocolor,help,drive:,spice,video:,image:,network:,create-bridge,remove-bridge,cvdisk,rvdisk,vdisk
opts=($(getopt --options="$OPTIONS" --longoptions="$LONGOPTIONS" --name "$0" -- "$@"))
eval set -- "${opts[*]}"

while test ${#opts[*]} -gt 0; do
	case $1 in
	-n | --nocolor)
		sh_unsetvarcolors
		;;
	-u | --uefi)
		uefi=true
		;;
	-i | --image)
		if [[ -z "$2" ]]; then
			die "Argumento inválido para --image, falta parâmetro de imagem/disco/device" >&2
		else
			img="$2"
			shift
		fi
		;;
	-c | --create-bridge)
		if [[ -z "$2" ]]; then
			die "Argumento inválido para --create-bridge, falta nome para bridge" >&2
		else
			if [[ " $(get_bridge_interfaces) " =~ " $2 " ]]; then
				die "Argumento inválido para ${cyan}--bridge-create${red}. BRIDGE ${cyan}$2 ${red}já existe" >&2
			else
				bridge_name="$2"
				create_bridge_virbr "$bridge_name"
				shift
			fi
		fi
		;;
	-r | --remove-bridge)
		if [[ " $(get_bridge_interfaces) " =~ " $2 " ]]; then
			bridge_name="$2"
			remove_bridge_and_tap "$bridge_name"
			shift
		else
			die "${red}Erro:${rst} \
Argumento inválido para ${cyan}--remove-bridge${reset}. \
$(
				bridges=$(get_bridge_interfaces)
				[[ -n $bridges ]] && Válidos são: \
					echo "${yellow}$bridges" ||
					echo "${yellow}nenhuma bridge disponível"
			)
${reset}" >&2
		fi
		;;
	-b | --bridge)
		if [[ " $(get_bridge_interfaces) " =~ " $2 " ]]; then
			iface_bridge="$2"
			msg_info "Parametro -b/--bridge detectado: tentando usar bridge '$iface_bridge'"
			bridge=true
			shift
		else
			die "Argumento inválido para ${cyan}--bridge${red}. Válidos são: ${yellow}$(get_bridge_interfaces)${reset}" >&2
		fi
		;;
	-s | --spice)
		spice=true
		log_msg "Parametro -s/--spice detectado: tentando usar spice..."
		;;
	-g | --video)
		if [[ $2 =~ ^(virtio-vga|virtio-gpu-pci|qxl-vga|VGA|cirrus-vga|ati-vga|virtio-gpu-pci|bochs-display|ramfb)?$ ]]; then
			videodevice="$2"
			shift
		else
			die "$(gettext "Argumento inválido para -v. Use VGA,virtio-vga,virtio-gpu-pci,qxl-vga,cirrus-vga,ati-vga,virtio-gpu-pci,bochs-display ou ramfb")" >&2
		fi
		;;
	-v | --vdisk)
		if [[ " $(get_raw_images) " =~ " $2 " ]]; then
			vdisk_name="$2"
			msg_info "Parametro -v/--vdisk detectado: tentando usar virtual disk '$vdisk_name'"
			vdisk=true
			shift
		else
			die "Argumento inválido para ${cyan}--vdisk${red}. Válidos são: ${yellow}$(get_raw_images)${reset}" >&2
		fi
		;;
	--cvdisk)
		sh_create_vdisk_file
		exit $?
		;;
	--rvdisk)
		sh_remove_vdisk_file
		exit $?
		;;
	-N | --network)
		if [[ $2 =~ ^(virtio-net-pci|e1000|rtl8139|vmxnet3|ne2k_pci|ne2k_isa|pcnet|smc91c111|i82551|i82557b|i82559er)?$ ]]; then
			netdevice="$2"
			anetdevices+=("$netdevice")
			netchoosedriver=true
			msg_info "Anexando placa de rede, driver: ${yellow}$netdevice"
			shift
		else
			die "Argumento inválido para --network. Use virtio-net-pci,e1000,rtl8139,vmxnet3,ne2k_pci,ne2k_isa,pcnet,smc91c111,i82551,i82557b,i82559er" >&2
		fi
		;;
	-d | --drive)
		if [[ -n $2 ]]; then
			drive=true
			drive_path=$2
			if lsblk $drive_path &>/dev/null; then
				log_msg "Parametro -d,--drive detectado: $drive_path"
			else
				die "${cyan}Parametro -d,--drive => ${red}$drive_path: não é um dispositivo de bloco"
			fi
			shift
		else
			die "$(gettext "Argumento inválido para --drive. Use formato device, como /dev/sdX (por exemplo).")" >&2
		fi
		;;
	-m | --memory)
		if [[ $2 =~ ^[0-9]+[MG]?$ ]]; then
			xmem=$2
			log_msg "Parametro -m/--memory detectado: $2"
			shift
		else
			die "$(gettext "Argumento inválido para -m. Use um formato como 16GB (por exemplo).")" >&2
		fi
		;;
	--)
		shift
		break
		;;
	:)
		die "-$OPTARG $(gettext "requer um argumento")" >&2
		;;
	*)
		die "$(gettext "operação não suportada"): $1 ($(gettext "usar -h para ajuda"))"
		;;
	esac
	shift
done

if [[ $# > 0 ]]; then
	# Configurar rede
	#random_mac_net0=$(python3 -c "import random; print(':'.join(['{:02x}'.format(random.randint(0, 255)) for _ in range(6)]))")
	#random_mac_net1=$(python3 -c "import random; print(':'.join(['{:02x}'.format(random.randint(0, 255)) for _ in range(6)]))")
	#qemu_options+=(-netdev bridge,id=net0,smb=$HOME)
	#qemu_options+=(-netdev bridge,id=net0)
	#qemu_options+=(-device e1000,netdev=net0)
	#qemu_options+=(-device e1000,netdev=net0,mac=$random_mac_net0)

	#qemu_options+=(-netdev bridge,id=net1,br=$iface_bridge)
	#qemu_options+=(-device e1000,netdev=net1,mac=$random_mac_net1)

	#qemu_options+=(-netdev tap,ifname=tap1,script=no,downscript=no,id=net0)
	#qemu_options+=(-device virtio-net-device,netdev=net0,mac=92:7b:15:c3:4d:ec)

	# Configurar rede
	if $netchoosedriver; then
		for netdevice in "${anetdevices[@]}"; do
			((nId++))
			netdev_id="net$nId"
			if $bridge; then
				qemu_options+=(-netdev bridge,id="$netdev_id",br=$iface_bridge)
			else
				qemu_options+=(-netdev user,id="$netdev_id")
			fi
			qemu_options+=(-device "$netdevice",netdev="$netdev_id")
		done
	else
		netdev_id="net0"
		if $bridge; then
			qemu_options+=(-netdev bridge,id="$netdev_id",br=$iface_bridge)
		else
			qemu_options+=(-netdev user,id="$netdev_id")
		fi
		qemu_options+=(-device "$netdevice",netdev="$netdev_id")
	fi

	if $drive; then
		msg_info "Anexando disco/drive externo: ${yellow}$drive_path"
		qemu_options+=(-drive file=$drive_path,format=raw,media=disk)
	fi
	chili-fr "$@"
else
#	die "${opts[*]} $(gettext "falta parâmetro de imagem/disco/device"): ($(gettext "usar -h para ajuda"))"
	die "$(gettext "falta parâmetro de imagem/disco/device"): ($(gettext "usar -h para ajuda"))"
fi
