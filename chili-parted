#!/usr/bin/env bash
#shellcheck disable=SC2034

function conf() {
	read -r -p "$1 [Y/n]"
	[[ ${REPLY^} == "" ]] && return 0
	[[ ${REPLY^} == N ]] && return 1 || return 0
}

function sh_setvarcolors() {
    # does the terminal support true-color?
    if [[ -n "$(command -v "tput")" ]]; then
        #tput setaf 127 | cat -v  #capturar saida
        reset=$(tput sgr0)
        rst=$(tput sgr0)
        bold=$(tput bold)
        underline=$(tput smul)
        nounderline=$(tput rmul)
        reverse=$(tput rev)

        black=$(tput bold)$(tput setaf 0)
        red=$(tput bold)$(tput setaf 196)
        green=$(tput bold)$(tput setaf 2)
        yellow=$(tput bold)$(tput setaf 3)
        #       blue=$(tput setaf 4)
        blue=$(tput setaf 27)
        magenta=$(tput setaf 5)
        cyan=$(tput setaf 6)
        white=$(tput setaf 7)
        gray=$(tput setaf 8)
        light_red=$(tput setaf 9)
        light_green=$(tput setaf 10)
        light_yellow=$(tput setaf 11)
        light_blue=$(tput setaf 12)
        light_magenta=$(tput setaf 13)
        light_cyan=$(tput setaf 14)
        light_white=$(tput setaf 15)
        orange=$(tput setaf 202)
        purple=$(tput setaf 125)
        violet=$(tput setaf 61)

        # Definir cores de fundo
        preto=$(tput setab 0)
        vermelho=$(tput setab 196)
        verde=$(tput setab 2)
        amarelo=$(tput setab 3)
        azul=$(tput setab 20)
        roxo=$(tput setab 5)
        ciano=$(tput setab 6)
        branca="${black}$(tput setab 7)"
        cinza=$(tput setab 8)
        laranja=$(tput setab 202)
        roxa=$(tput setab 125)
        violeta=$(tput setab 61)
    else
		bold=''
		reset="\e[0m"
		blue="\e[1;34m"
		cyan="\e[1;36m"
		green="\e[1;32m"
		orange="\e[1;33m"
		red="\e[1;31m"
		white="\e[1;37m"
		yellow="\e[1;33m"
		pink="\033[35;1m"
		black="\e[1;30m"
		purple="\e[1;35m"
		violet="\e[1;35m"
	fi
}

function chili-image() {
	# https://www.qemu.org/2021/08/22/fuse-blkexport/
	qemu-img create -f raw foo.img 20G
	parted -s foo.img \
		'mklabel msdos' \
		'mkpart primary ext4 2048s 100%'
	qemu-img convert -p -f raw -O qcow2 foo.img foo.qcow2 && rm foo.img
	file foo.qcow2
	kpartx -l foo.qcow2

	#	qemu-storage-daemon \
	#    --blockdev node-name=prot-node,driver=file,filename=foo.qcow2 \
	#    --blockdev node-name=fmt-node,driver=qcow2,file=prot-node \
	#    --export \
	#    type=fuse,id=exp0,node-name=fmt-node,mountpoint=foo.qcow2,writable=on \
	#    &

	qemu-storage-daemon \
		--blockdev node-name=prot-node,driver=file,filename=foo.qcow2 \
		--blockdev node-name=fmt-node,driver=qcow2,file=prot-node \
		--export \
		type=fuse,id=exp0,node-name=fmt-node,mountpoint=mount-point,writable=on

	file foo.qcow2
	sudo kpartx -av foo.qcow2
	fdisk -l foo.qcow2
	cfdisk foo.qcow2
}

function chili-mapdevice() {
	#sudo mknod -m 0777 /dev/sr0 b 7 10
	#sudo mknod -m 0777 /dev/sr0 b 7 20
	# losetup -P /dev/sr0 $1
	kpartx -av disk.img # mapear
	kpartx -d disk.img  #delete

	# dd if=/dev/zero of=~/file.img bs=1024k count=10
	# losetup --find --show ~/file.img # /dev/loop0
	# mkfs -t ext2 /dev/loop0
	# mount /dev/loop0 /mnt
	# umount /dev/loop0
	# losetup --detach /dev/loop0
}

function chili-setup-img() {
	qemu-img create foo.img -f raw 20G
	qemu-img info foo.img
	losetup --find --show foo.img
	#kpartx -av foo.img # mapear
	#kpartx -d foo.img  #delete
}

#sd=$1
#parted --script $sd -- 															\
#   mklabel gpt             													\
#   mkpart primary fat32      1MiB   100MiB set 1 bios on name 1 BIOS  \
#   mkpart primary fat32      100MiB 200MiB set 2 esp  on name 2 EFI   \
#   mkpart primary linux-swap 200MiB 2GB                  name 3 SWAP  \
#   mkpart primary ext4       2GB 100%                    name 4 ROOT  \
#   align-check optimal 1
#parted --script $sd -- print

#Partição 	Sistema de arquivo 	Tamanho 	Descrição
#/dev/sda1 	(bootloader) 	2M 	Partição de boot BIOS
#/dev/sda1 	ext2 (ou FAT32 se UEFI está sendo usada) 	128M 	Partição boot/Sistema EFI
#/dev/sda3 	(swap) 	512M ou maior 	Partição de swap
#/dev/sda4 	ext4 	Resto do disco 	Partição root

function sh_checkroot() {
	if [ "$(id -u)" != "0" ]; then
		printf "%s\n" "${red} error: You cannot perform this operation unless you are root!"
		exit 1
	fi
}

sh_setvarcolors
if [[ $# -eq 0 ]]; then
	printf '%s\n' "${orange}chili-parted - utilitario para particionar disco${reset}"
	printf '%s\n' "${red}Usage:${reset}"
	printf '\t%s\n' "chili-parted ${yellow}/dev/sdX${reset}"
	printf '\t%s\n' "chili-parted ${yellow}image.img${reset}"
	exit 1
fi

function sh_parted() {
    local error=0

	sd="$1"
	if ! smartctl -Hi "$sd"; then
	    error=1
    fi
    if fdisk -l "$sd"; then
        if ((error)); then
    		echo "====================================================${reset}"
	    	echo "${cyan}AVISO! disco $sd ${red}NÃO PASSOU ${cyan}no teste de SMART!${reset}"
		    echo "====================================================${reset}"
		fi
    	echo -e "${yellow}AVISO, CUIDADO, tudo será apagado!!"
    	if conf "Continuar com o particionamento?"; then
    		parted --script "$sd" -- \
    			mklabel gpt \
	    		mkpart primary fat32 1MiB 3MiB set 1 bios on name 1 BIOS \
	    		mkpart primary fat32 3MiB 128MiB set 2 esp on name 2 EFI \
	    		mkpart primary ext4 128MiB 100% name 3 ROOT \
	    		align-check optimal 1
		   	parted --script "$sd" -- print
    	fi
	fi
}

sh_setvarcolors
sh_checkroot "$@"
sh_parted "$@"
