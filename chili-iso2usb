#!/usr/bin/env bash
#
#  chili-iso2usb - Utility to write iso file to pendrive/device
#  Created: 2019/06/14
#  Altered: 2024/10/26
#  Updated: sáb 29 mar 2025 00:03:07 -04
#
#  Copyright (c) 2024-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
_VERSION_="1.6.20250329"
readonly DEPENDENCIES=(yad dialog dd sed grep cat awk fdisk blkid)

check_deps() {
	local errorFound=false
	declare -a missing

	for f in "${DEPENDENCIES[@]}"; do
		if [[ -z $(command -v "$f") ]]; then
			missing+=("$f")
			errorFound=true
			printf "%s\n" "ERRO: não encontrei o comando '$f'"
		fi
	done
	if $errorFound; then
		echo "---IMPOSSÍVEL CONTINUAR---"
		echo "Esse script necessita dos comandos listados acima" >&2
		echo "Instale-os e/ou verifique se estão no seu \$PATH" >&2
		exit 1
	fi
}

yad_message() {
	local msg="$1"

	txt="<b><big>$msg</big></b>"
	yad "${comargs[@]}" --image=gtk-dialog-info --text="$txt" --button="Done":1
}

info() {
	dialog \
		--beep \
		--title "$app" \
		--backtitle "$app" \
		--msgbox "$*" \
		10 60
}

sh_initvars() {
	declare -x COMARGS
	: "${ARRAY_DSK_DEVICES=()}"
	: "${ARRAY_DSK_DISKS=()}"
	: "${ARRAY_DSK_SIZE=()}"
	: "${ARRAY_DSK_MODEL=()}"
	: "${ARRAY_DSK_TRAN=()}"
	: "${ARRAY_DSK_LABEL=()}"
	: sep='\xe2\x94\x82'
	app="chili-iso2usb $_VERSION_"
	comargs=(
		--title="$app"
		--center
		--width=400
		--height=250
		--text-align=center
		--buttons-layout=center
		--borders=10
		--image=/usr/share/pixmaps/pendrive.png
	)

	COMARGS=$(printf "%q " "${comargs[@]}")
	LINGUA=$(echo "$LANG" | cut -c1-2)
	case $LINGUA in
	pt)
		MSG=(
			[0]="Selecione a ISO para copiar"
			[1]="Sair $app"
			[2]="N°"
			[3]="Nome"
			[4]="Tamanho em GB"
			[5]="Selecione o seu USB drive"
			[6]="Atenção tamanho muito grande"
			[7]="ATENÇÃO !!!"
			[8]="Poderia ser um disco rígido externo. \nContinuar ?"
			[9]="Problema na ferramenta. Contactar o autor."
			[10]="Progresso:"
			[11]="Copiar de"
			[12]="Você já pode remover o seu USB drive."
			[13]="Fim de copiar"
		)
		;;
	*)
		MSG=(
			[0]="Select the ISO to be copied"
			[1]="Exit $app"
			[2]="Nr"
			[3]="Name"
			[4]="Size in GB"
			[5]="Select your USB drive"
			[6]="Beware if size is too large"
			[7]="WARNING !!!"
			[8]="It could be an external hard drive.\nContinue ?"
			[9]="Problem in the tool, contact the author."
			[10]="Progress done:"
			[11]="Copy of"
			[12]="You can remove the key if you want."
			[13]="End of copy"
		)
		;;
	esac
}

sh_chooseiso() {
	local result

	isofile=$(zenity \
		--file-selection \
		--title="${MSG[0]}" \
		--filename="$HOME"/ \
		--file-filter=*.iso)
	result="$?"
	[[ "$result" -eq 0 ]] || exit 0
}

sh_disk_info() {
	unset ARRAY_DSK_{DISKS,DEVICES,SIZE,TRAN,MODEL,LABEL}
	local {NAME,PATH,SIZE,TRAN,MODEL,LABEL}_

	while read -r line; do
		eval "${line//=/_=}"
		ARRAY_DSK_DISKS+=("$NAME_")
		ARRAY_DSK_DEVICES+=("$PATH_")
		ARRAY_DSK_SIZE+=("$SIZE_")
		ARRAY_DSK_TRAN+=("${TRAN_:-blk}")
		ARRAY_DSK_MODEL+=("${MODEL_:-unknown}")
		ARRAY_DSK_LABEL+=("${LABEL_:-none}")
	done < <(lsblk -Pao TYPE,NAME,PATH,SIZE,TRAN,MODEL,LABEL | grep usb)
}

sh_choosedisk() {
	sh_disk_info
	local i
	local nc=0
	USBDSK=()
	export USBDSK

	for blkdsk in "${ARRAY_DSK_DEVICES[@]}"; do
		USBDSK+="$blkdsk ${ARRAY_DSK_TRAN[$nc]} ${ARRAY_DSK_SIZE[$nc]} ${ARRAY_DSK_MODEL[$nc]} ${ARRAY_DSK_LABEL[$nc]}!"
		((nc++))
	done
}

sh_write() {
	local i=0
	local l=0
	local xtemp
	local sectorsize

	xtemp="$(mktemp)"
	sectorsize=$(fdisk -s "$isofile")
	(while [[ $l -lt "$sectorsize" ]]; do
		echo "dd if=$isofile of=$sd bs=8192000 count=1 skip=$i seek=$i oflag=direct" >"$xtemp"
		if ! dd if="$isofile" of="${sd}" bs=8192000 count=1 skip="$i" seek="$i" oflag=direct >>"$xtemp" 2>&1; then
			break
		fi
		rm "$xtemp"
		i=$(("$i" + 1))
		l=$(("$l" + 8000))
		q=$(("$l" * 100 / "$sectorsize"))
		echo -e "$q \n#""${MSG[10]}"" : $q %"
	done) | zenity --progress --width 650 --auto-close --title "${MSG[11]}" "$isofile"

	if [[ -f "$xtemp" ]]; then
		zenity --error --text="$(cat "$xtemp")"
		rm "$xtemp"
		exit 1
	else
		sync
		zenity --info --text="${MSG[12]}" --title="${MSG[13]}"
		exit 0
	fi
}

sh_main() {
	sh_choosedisk
	while true; do
		cmdmain=(
			"${comargs[@]}"
			--text="<b><big><big>Drive Properties</big></big></b>\n"
			--button="Refresh:3"
			--button="yad-close:1"
			--button="Go!:2"
			--form
			--columns=1
			--field="Device:":CB "${USBDSK[*]}"
			--field="ISO File::FL"
		)
		result=$(yad "${cmdmain[@]}")
		nchoice=$?

		case $nchoice in
		3)
			sh_choosedisk
			continue
			;;
		1) exit 0 ;;
		2)
			sd=$(echo "${result}" | cut -d"|" -f1 | awk '{print $1}')
			isofile=$(echo "${result}" | cut -d"|" -f2)
			export sd
			export isofile

			if [[ $isofile == "" ]]; then
				yad_message "${MSG[0]}"
				continue
			fi
			if [[ $sd == "" ]]; then
				yad_message "${MSG[5]}"
				continue
			fi
			sh_write
			;;
		esac
	done
}

check_deps
sh_initvars
sh_main
