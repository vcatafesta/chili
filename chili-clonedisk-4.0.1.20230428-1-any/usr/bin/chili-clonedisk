#!/usr/bin/env bash
#shellcheck disable=SC2154,SC2016,SC2034,SC2059

#  chili-clonedisk - utility written in bash to clone disks
#  Chili GNU/Linux - https://github.com/vcatafesta/ChiliOS
#  Chili GNU/Linux - https://chililinux.com
#  Chili GNU/Linux - https://chilios.com.br
#
#  Created: 2019/04/05
#  Altered: 2022/04/28
#
#  Copyright (c) 2019-2023, Vilmar Catafesta <vcatafesta@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  chili-clonedisk uses quite a few external programs during its execution. You
#  need to have at least the following installed for makepkg to function:
#     awk, bsdtar (libarchive), bzip2, coreutils, fakeroot, file, find (findutils),
#     gettext, gpg, grep, gzip, sed, tput (ncurses), xz, ETC
#########################################################################
#set -e
#declare -r APP="${0##*/}"
declare -r _APP_="chili-clonedisk"
declare -r _VERSION_="4.0.1.20230428"
declare -gA Alanguage=([pt_BR]=0 [en_US]=1 [de_DE]=2 [fr_FR]=3 [es_ES]=4 [it_IT]=5)
declare -gA Alocale=([0]=pt_BR [1]=en_US [2]=de_DE [3]=fr_FR [4]=es_ES [5]=it_IT)
readonly DEPENDENCIES=(awk cat cut dd dialog grep lsblk pv sed tput which)

# debug
export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e
shopt -s extglob

sh_ascii-lines() {
	if [[ "$LANG" =~ 'UTF-8' ]]
	then
		export NCURSES_NO_UTF8_ACS=0
	else
		export NCURSES_NO_UTF8_ACS=1
	fi
}

sh_configure() {
	sh_ascii-lines
	true=0
#	false=1

	# flag languages
	: "${PT_BR=0}"
	: "${EN_US=1}"
	: "${DE_DE=2}"
	: "${FR_FR=3}"
   : "${LC_DEFAULT=$(sh_getLocale)}"

	# flag dialog exit status codes
	: "${D_OK=0}"
	: "${D_CANCEL=1}"
	: "${D_HELP=2}"
	: "${D_EXTRA=3}"
	: "${D_ITEM_HELP=4}"
	: "${D_ESC=255}"

	# flag disk info
   : "${DSK_NAME=1}"
   : "${DSK_SIZE=2}"
   : "${DSK_TRAN=3}"
   : "${DSK_MODEL=4}"
   : "${DSK_LABEL=5}"
   : "${DSK_SERIAL=6}"
   : "${DSK_PTTYPE=7}"
   : "${DSK_FSTYPE=8}"
   : "${DSK_PARTTYPENAME=9}"

	# common vars
	: "${DIALOG=${DIALOG:-"dialog"}}"
	: "${grafico=$true}"
	: "${xapp="$_APP_"}"
	: "${ccabec="${xapp} $_VERSION_"}"
	: "${ctitle="$cdistro Linux"}"
	: "${welcome="Welcome to the $xapp"}"

	# system colors
	tput sgr0 # reset colors
	bold=$(tput bold)
	cyan=$(tput setaf 6)
	black="${bold}$(tput setaf 0)"
	blue=$(tput setaf 4)
	green=$(tput setaf 2)
	yellow=$(tput bold)$(tput setaf 3)
	orange=$(tput setaf 3)
	pink=$(tput setaf 5)
	purple=$(tput setaf 125);
	red=$(tput bold)$(tput setaf 196)
	reset=$(tput sgr0)
	white="${bold}$(tput setaf 7)"
	violet=$(tput setaf 61);

	# dialog colors
   REVERSE="\Zr"
   UNDERLINE="\Zu"
   BOLD="\Zb"
   RESET="\Zn"
   BLACK="\Z0"
   YELLOW="\Z3"
   WHITE="\Z7"
   BLUE="\Z4"
   CYAN="\Z6"
   RED="\Z1"
   GREEN="\Z2"
   MAGENTA="\Z5"
	sep='\xe2\x94\x82'


	COL_NC='\e[0m' # No Color
	COL_LIGHT_GREEN='\e[1;32m'
	COL_LIGHT_RED='\e[1;31m'
	TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
	CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
	INFO="[i]"
	# shellcheck disable=SC2034
	DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
	OVER="\\r\\033[K"
}

sh_toBytes() {
	local ent mut num fra sai

	ent=${1^^}
	[[ -z "${ent}" ]] && ent=0B
	mut=${ent//[^BKMGT]}
	num=${ent//[^[:digit:]]}
	ent=${ent//$mut}
	fra=${ent//[^,.]}
	fra=${fra:+${ent//*[,.]}}
	ent=0BKMGT;
	ent=${ent//$mut*};
	#mut=$((${#ent}-1))
	((mut=${#ent}-1, sai=num*1024**mut))
	((ent=${#sai}-${#fra}))
	echo ${sai:0:$ent}
}

sh_version() { printf "$0 $_VERSION_\n"; }

sh_unsetvarcolors() {
	unset bold reset cyan red blue white black green yellow orange pink cyan purple violet
}

sh_getLocale() {
	local lc

	LC_DEFAULT="${Alanguage[pt_BR]}"
	LOCALE="pt_BR"
	if lc=$(grep _ <(locale -a) | head -1 | cut -c1-5); then
		LOCALE="$lc"
		LC_DEFAULT="${Alanguage[$lc]}"
	fi
}

sh_splitarray() {
	local str=("$1")
	local pos="$2"
	local sep="${3:-'|'}"
	local array

	[[ $# -eq 3 && "$pos" = "|" && "$sep" =~ ^[0-9]+$ ]] && { sep="$2"; pos="$3";}
	[[ $# -eq 2 && "$pos" = "$sep"                    ]] && { sep="$pos"; pos=1;}
	[[ $# -eq 1 || ! "$pos" =~ ^[0-9]+$               ]] && { pos=1; }

#	IFS="$sep" read -r -a array <<< "$str"
	IFS="$sep" read -r -a array <<< "${str[@]}"
	echo "${array[pos-1]}"
}

sh_seekstrarray() {
	local str=("$1")
	local search="$2"
	local result=

	for i in "${!str[@]}"; do
		if [[ "${str[$i]}" == "$search" ]]; then
			result="$i"
			break
		fi
	done
	echo "$result"
}

confirma() {
	[ "$1" -ne 0 ] && { conf "INFO" "$2"; return $?;}
}

msg() {
	if [ "$grafico" -eq $true ]; then
   	${DIALOG}           		\
      	--no-collapse       	\
        	--title     "$1"    	\
        	--infobox   "\n$2"  	\
        	6 60
    else
        log_info_msg "$2"
    fi
}

mensagem() {
	${DIALOG}                	\
		--title 		"$ctitle"  	\
		--backtitle	"$ccabec"	\
		--infobox 	"$*"        \
    	6 60
}

alerta() {
	${DIALOG}							      \
		--colors			 			     		\
		--title 		"$1" 			     		\
		--no-collapse							\
		--cr-wrap    		           		\
		--backtitle	"$ccabec"		      \
		--msgbox 	"\Z2$2\n\Z1$3\n\Z3$4\n\Z4$5\n\Z5$6"	\
		0 0
}

info() {
	${DIALOG}  	 				   \
		--colors                \
		--beep                  \
		--title 		"$ctitle"	\
		--backtitle	"$ccabec"	\
		--msgbox 	"\Z1$*"		\
		10 60
}


conf() {
   xtitle="$1"
   shift
   ${DIALOG}                                          \
         --colors                                     \
         --title     "$xtitle"                        \
         --backtitle "$ccabec"                        \
         --no-collapse                                \
         --no-cr-wrap                                 \
         --erase-on-exit                              \
         --yes-label "${cmsg_yeslabel[$LC_DEFAULT]}"  \
         --no-label  "${cmsg_nolabel[$LC_DEFAULT]}"   \
         --yesno     "$*"                             \
         0 0
   nchoice=$?
   return "$nchoice"
}

confmulti() {
	xtitle="$1"
	shift
	${DIALOG}													\
		--title 		"$xtitle"								\
		--backtitle	"$ccabec"								\
		--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}"	\
		--no-label  "${cmsg_nolabel[$LC_DEFAULT]}"	\
		--yesno 		"$*"										\
		10 100
		return $?
}

sh_checkdisk() {
	local nchoice=0
	dsk=$(df -h | grep "$sddest" | awk '{print $1, $2, $3, $4, $5, $6, $7}')
	if [ -n "$dsk" ]; then
		conf "${cwarning[$LC_DEFAULT]}" "\n${cmsg_all_mounted_part[$LC_DEFAULT]}\n\n$dsk\n\n${cmsg_dismount[$LC_DEFAULT]}"
		nchoice=$?
		if [ $nchoice = 0 ]; then
			for i in $(seq 1 10); do
				umount -f "$sddest$i" 2> /dev/null
			done
		fi
	fi
	return $nchoice
}

sh_disk_info() {
	unset ARRAY_DSK_{DISKS,DEVICES,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE,FSTYPE}
	local {NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE,FSTYPE}_
	declare -gA AARRAY_DSK_DEVICES=()

	while read -r line
	do
		eval "${line//=/_=}"
		ARRAY_DSK_DISKS+=( "$NAME_" )
		ARRAY_DSK_DEVICES+=( "$PATH_" )
		ARRAY_DSK_SIZE+=( "$SIZE_" )
		ARRAY_DSK_TRAN+=( "${TRAN_:-${TYPE_}}" )
		ARRAY_DSK_MODEL+=( "${MODEL_:-${TYPE_} device}" )
		ARRAY_DSK_LABEL+=( "${LABEL_:-""}" )
		ARRAY_DSK_SERIAL+=( "${SERIAL_:-""}" )
		ARRAY_DSK_PTTYPE+=( "${PTTYPE_:-""}" )
		ARRAY_DSK_FSTYPE+=( "${FSTYPE_:-none}" )
		AARRAY_DSK_DEVICES+=(["$PATH_"]="$NAME_|$SIZE_|${TRAN_:-${TYPE_}}|${MODEL_:-${TYPE_} device}|${LABEL_:-""}|${SERIAL_:-""}|${PTTYPE_:-""}|${FSTYPE_:-"none"}")
	done < <(lsblk -PAo TYPE,NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE | grep -P 'TYPE="(disk|loop|lvm)"' | sort -k5,5 -k2,2)
	#done < <(lsblk -PAo TYPE,NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL | grep -P 'TYPE="(disk)"' | sort -k5,5 -k2,2)
	#done < <(lsblk -Pao TYPE,NAME,PATH,SIZE,TRAN,MODEL | grep -P 'TYPE="(disk)')
	#done < <(lsblk -Pao TYPE,NAME,PATH,SIZE,TRAN,MODEL | grep disk)
	#declare -p ARRAY_DSK_{DISKS,DEVICES,SIZE,TRAN,MODEL}
}

sh_choose_source_disk() {
	while true
	do
		sh_disk_info
		local array=()
		local i
		local n=0
		local nc=0
		local result
		local nlen=0

		for i in "${ARRAY_DSK_DEVICES[@]}"
	      do
	         array[n++]="$i"
	         if (( nlen < ${#i} )); then
	            nlen=${#i}
	         fi
	         array[n++]=$(printf "$sep%-6s$sep%6s$sep%-6s$sep%-15s$sep%-30s"	\
	                             "${ARRAY_DSK_TRAN[$nc]}"                   	\
	                             "${ARRAY_DSK_SIZE[$nc]}"                   	\
	                             "${ARRAY_DSK_PTTYPE[$nc]}"                 	\
	                             "${ARRAY_DSK_LABEL[$nc]}"                  	\
	                             "${ARRAY_DSK_MODEL[$nc]}")
	         ((nc++))
	      done
	      ((nlen+=6))
	      sd=$(${DIALOG}                                                             \
	               --default-item "$sd"         			                              \
	               --backtitle    "$ccabec"                                          \
	               --title        "${cmsg_disco_origem[$LC_DEFAULT]}"                \
						--ok-label		"${cmsg_Select[$LC_DEFAULT]}"								\
	    				--cancel-label "${cmsg_button_voltar[$LC_DEFAULT]}"					\
	               --colors                                                          \
	               --extra-button                                                    \
	               --extra-label  "${cmsg_info_disco[$LC_DEFAULT]}"                  \
	               --menu         "${cmsg_LABEL[$LC_DEFAULT]}\n\n\
$(printf "%${nlen}s$sep%-6s$sep%6s$sep%-6s$sep%-15s$sep%-30s" "DEVICE" "TRAN" "SIZE" "PTTYPE" "LABEL" "MODEL")"\
	               0 0 25 "${array[@]}" 2>&1 >/dev/tty )

    	exit_status=$?
    	case $exit_status in
			"$D_ESC"|"$D_CANCEL")
    			init
    			;;
    		3)
         	result=$(fdisk -l "$sd");
    			display_result	"${BOLD}${RED}${REVERSE}Info disk : $sd\n\n${RESET}${BOLD}${WHITE}$result"\
									"$cmsg_disco_origem"
    			continue
    			;;
    	esac

		if [ -n "$sd" ]; then
         DEVICE_SOURCE="$sd"
         MODEL_SOURCE="$(sh_splitarray "${AARRAY_DSK_DEVICES[$sd]}" "$DSK_MODEL")"
         SIZE_SOURCE="$(sh_splitarray "${AARRAY_DSK_DEVICES[$sd]}" "$DSK_SIZE")"
	      sh_choose_destination_disk
		fi
    done
}

sh_choose_destination_disk() {
	while true
	do
#		sh_disk_info
		local array=()
		local i
		local n=0
		local nc=0
     	local result
     	local nlen=0

		for i in "${ARRAY_DSK_DEVICES[@]}"
	   do
			if [[ "${i}" = "${sd}" ]]; then
				(( ++nc ))
				continue
			fi
			if (( nlen < ${#i} )); then
				nlen=${#i}
			fi
			array+=("$i" "$(printf "$sep%-6s$sep%6s$sep%-6s$sep%-15s$sep%-30s"	\
									  "${ARRAY_DSK_TRAN[$nc]}"                   	\
									  "${ARRAY_DSK_SIZE[$nc]}"                   	\
	                          "${ARRAY_DSK_PTTYPE[$nc]}"                 	\
	                          "${ARRAY_DSK_LABEL[$nc]}"                  	\
	                          "${ARRAY_DSK_MODEL[$nc]}")")
				(( ++nc ))
      done
      ((nlen+=6))
      sddest=$(${DIALOG}																			\
               --default-item "$sddest"														\
               --backtitle    "$ccabec"                                          \
               --title        "${cmsg_disco_destino[$LC_DEFAULT]}"               \
					--ok-label		"${cmsg_Select[$LC_DEFAULT]}"								\
    				--cancel-label "${cmsg_button_voltar[$LC_DEFAULT]}"					\
               --colors                                                          \
               --extra-button                                                    \
               --extra-label  "${cmsg_info_disco[$LC_DEFAULT]}"                  \
               --menu         "${cmsg_LABEL[$LC_DEFAULT]}\n\n
${BOLD}${WHITE}${cmsg_disco_origem[LC_DEFAULT]} : $DEVICE_SOURCE | $SIZE_SOURCE | $MODEL_SOURCE\n
${BOLD}${WHITE}${cmsg_disco_destino[LC_DEFAULT]}: (${cmsg_choose_dest[LC_DEFAULT]})${RESET} \n\n
$(printf "%${nlen}s$sep%-6s$sep%6s$sep%-6s$sep%-15s$sep%-30s" "DEVICE" "TRAN" "SIZE" "PTTYPE" "LABEL" "MODEL")"\
               0 0 25 "${array[@]}" 2>&1 >/dev/tty )

		exit_status=$?
    	case $exit_status in
			"$D_ESC")
    			init
    			;;
    		"$D_CANCEL")
    			sh_choose_source_disk
    			;;
    		3)
         	result=$( fdisk -l "$sddest" );
    			display_result	"${BOLD}${RED}${REVERSE}Info disk : $sd\n\n${RESET}${BOLD}${WHITE}$result"\
									"$cmsg_disco_destino"
    			continue
    			;;
    	esac

		if [ "$sd" == "$sddest" ]; then
			alerta "${cwarning[$LC_DEFAULT]}" "\n   \Z1${cmsg_disco_identico[$LC_DEFAULT]} \n\n      \Z4SOURCE DISK : \Z1\Zr$MODEL_SOURCE\ZR\n \Z4DISK DESTINATION : \Z1\Zr$MODEL_DESTINATION\ZR"
			sh_choose_destination_disk
		fi

    	if [ -n "$sddest" ]; then
         DEVICE_DESTINATION="$sddest"
         MODEL_DESTINATION="$(sh_splitarray "${AARRAY_DSK_DEVICES[$sddest]}" "$DSK_MODEL")"
			NAME_DESTINATION="$(sh_splitarray "${AARRAY_DSK_DEVICES[$sddest]}" "$DSK_NAME")"
         SIZE_DESTINATION="$(sh_splitarray "${AARRAY_DSK_DEVICES[$sddest]}" "$DSK_SIZE")"

			if [[ "$(sh_toBytes "$SIZE_SOURCE")" -gt "$(sh_toBytes "$SIZE_DESTINATION")" ]]; then
				if ! conf "${YELLOW}${cwarning[$LC_DEFAULT]}"\
                       "\n${BOLD}${RED}${REVERSE}Destination disk is smaller than source disk.${RESET}\n\n"\
                       "${BOLD}${WHITE}Continue anyway?"; then
	            continue
   	      fi
			fi
			sh_backup_partitions "$sddest" "$NAME_DESTINATION"
			sh_checkdisk
			local nmontada=$?
			if [ $nmontada = 1 ]; then
				alerta "CHOOSEDISK" "${cmsg_nec_dismount[LC_DEFAULT]}"
			fi
			sh_confclone
		fi
		break
    done
}

sh_domakeclone() {
	local -i nchoice
	mensagem "${cmsg_formatando_particao[$LC_DEFAULT]}: $sd TO $sddest"
	(pv -n "$sd" | 														\
	dd of="$sddest" conv=notrunc,noerror,sync) 2>&1 |			\
	${DIALOG}																\
		--title "${cmsg_running_disk_cloning[LC_DEFAULT]^^}"	\
		--colors																\
		--gauge 																\
			"${BOLD}${WHITE}${REVERSE}${cmsg_running_disk_cloning[LC_DEFAULT]} (dd if=$sd of=$sddest conv=notrunc,noerror,sync)${RESET}\n\n
${BLUE} ${cmsg_disco_origem[LC_DEFAULT]}: $DEVICE_SOURCE | $SIZE_SOURCE | $MODEL_SOURCE\n
${RED}${cmsg_disco_destino[LC_DEFAULT]}: $DEVICE_DESTINATION | $SIZE_DESTINATION | $MODEL_DESTINATION"\
		10 100 0
	nchoice=$?
	[[ $nchoice -eq 0 ]] && display_result "${BOLD}${RED}${REVERSE}Cloning completed!\n\n${RESET}${BOLD}${WHITE}$(fdisk -l "$sddest")\n"\
														"fdisk -l $sddest"
	return $nchoice
}

sh_confclone() {
	if conf 	"${cwarning[$LC_DEFAULT]}"												\
			"\n${cmsg_todos_os_dados_serao_perdidos[$LC_DEFAULT]}\n\n"		\
			"${BLUE} ${cmsg_disco_origem[LC_DEFAULT]}: $DEVICE_SOURCE | $SIZE_SOURCE | $MODEL_SOURCE \n"	\
			"${RED}${cmsg_disco_destino[LC_DEFAULT]}: $DEVICE_DESTINATION | $SIZE_DESTINATION | $MODEL_DESTINATION\n\n"	\
     		"${BOLD}${WHITE}${cmsg_continuar_com_a_clonagem[$LC_DEFAULT]}?\n"; then
		sh_domakeclone
		return "$?"
	fi
	return 1
}

sh_Language() {
	langmsg=(
		'lang=("pt BR" "en_US" "de_DE" "fr_FR")'
		'cwarning=( "** AVISO **" "** WARNING **"	"** NOTIZ **" "** AVIS **")'
		'cmsg_Error=("ERRO" "ERROR" "ERROR" "ERREUR")'
		'cmsg_button_voltar=("Voltar" "Back" "Zurückkehren" "Retourner")'
		'cmsg_info_disco=("Info disco" "Disk info" "Festplatteninfo" "Disque va")'
		'cmsg_Ok=(	"Ok" "Ok" "Ok" "D_Accord")'
		'cmsg_Exit=("Sair" "Exit" "Ausgehen" "Sortir")'
		'cmsg_Select=( "Selecionar" "Select" "Auswählen" "Sélectionner")'
		'cmsg_disco_origem=( "DISCO DE ORIGEM" "SOURCE DISK" "QUELLDISK" "DISQUE SOURCE")'
		'cmsg_disco_destino=("DISCO DE DESTINO" "DESTINATION DISK" "ZIELDISKETTE" "DISQUE DE DESTINATION")'
  		'cmsg_choose_origem=("Escolha o disco de ORIGEM" "Choose the SOURCE disk" "Wählen Sie die SOURCE-Festplatte" "Choisissez le disque SOURCE")'
		'cmsg_choose_dest=("Escolha o disco de DESTINO:" "Choose destination DISK" "Wahl der DESTINATION-Festplatte" "Choisissez le disque DESTINATION")'
		'cmsg_yeslabel=(  "Sim" "Yes" "Ja" "Oui")'
		'cmsg_nolabel=("Não" "No" "Nein" "Nom")'
     	'cmsg_LABEL=("Use as teclas ${RED}↑ PARA CIMA ${RESET}e ${RED}↓ PARA BAIXO ${RESET}para navegar.\nUse ${RED}TAB ${RESET}para alternar entre os botões e ${RED}ENTER ${RESET}para selecionar."
         "Use the ${RED}UP ${RESET}and ${RED}DOWN ${RESET}keys to navigate.\nUse ${RED}TAB ${RESET}to toggle between buttons and ${RED}ENTER ${RESET}to select."
         "Verwenden Sie die Tasten ${RED}UP ${RESET}und ${RED}DOWN${RESET}, um zu navigieren.\nVerwenden Sie ${RED}TAB${RESET}, um zwischen den Schaltflächen zu wechseln, und ${RED}ENTER ${RESET}auswählen."
         "Utilisez les touches ${RED}HAUT ${RESET}et ${RED}BAS ${RESET}pour naviguer.\nUtilisez ${RED}TAB ${RESET}pour basculer entre les boutons et ${RED}ENTRÉE ${RESET}pour sélectionner"
         "Use las teclas ${RED}ARRIBA ${RESET}y ${RED}ABAJO ${RESET}para navegar.\nUse ${RED}TAB ${RESET}para cambiar entre botones y ${RED}ENTER ${RESET}para seleccionar."
         "Usa i tasti ${RED}SU ${RESET}e ${RED}GIÙ ${RESET}per navigare.\nUsa ${RED}TAB ${RESET}per spostarti tra i pulsanti e ${RED}ENTER ${RESET}selezionare.")'
		'cmsg_disco_identico=("Disco ORIGEM e DESTINO não podem ser o mesmo!" \
									 "SOURCE and DESTINATION disk can be the same!" 	\
									 "SOURCE- und DESTINY-Datenträger dürfen nicht identisch sein"	\
									 "Les disques SOURCE et DESTINY ne peuvent pas être identiques !")'
		'cmsg_nec_dismount=("Necessário desmontar particao para reparticionar automaticamente." \
								  "Need to dismount partition to repartition automatically." 				\
								  "Sie müssen die Partition aushängen, um sie automatisch neu zu partitionieren." \
								  "Besoin de démonter la partition pour repartitionner automatiquement.")'
   	'cmsg_formatando_particao=("Formatando partição" \
   										"Formatting partition" \
   										"Partition formatieren"	\
   										"Partition de formatage")'
   	'cmsg_running_disk_cloning=("Executando clonagem de disco" \
   										"Running disk cloning" \
   										"Ausführen des Klonens von Festplatten"	\
   										"Exécution du clonage de disque")'
		'cmsg_todos_os_dados_serao_perdidos=("  ${RED}AVISO!${RESET}  Todos os dados disco de DESTINO abaixo serão perdidos!"	\
														 "  ${RED}NOTICE!${RESET}  All DESTINATION disk data below will be lost!" 				\
														 "  ${RED}WARNUNG${RESET}  Alle Daten der ZIEL-Festplatte unten gehen verloren!**"	\
														 "  ${RED}ATTENTION${RESET}  Toutes les données du disque DESTINATION ci-dessous seront perdues !")'
  		'cmsg_continuar_com_a_clonagem=("Continuar com a clonagem" \
  												  "Continue with the cloning" \
  												  "Fahren Sie mit dem Klonen fort" \
  												  "Continuer le clonage")'
	)
	for xmsg in "${langmsg[@]}"; do eval "$xmsg"; done
	#echo "lang       ${#lang[@]} ${lang[@]} ${lang[$PT_BR]} ${lang[$EN_US]}"
	#echo "cmsg_Error ${#cmsg_Error[@]} ${cmsg_Error[@]} ${cmsg_Error[$PT_BR]} ${cmsg_Error[$EN_US]}"
}

init() {
	while true; do
		i18=$(${DIALOG}														\
			--stdout                                              \
			--clear	                                             \
			--backtitle	 	"$ccabec"				                  \
			--title 			"$welcome"		                    		\
			--ok-label		"${cmsg_Ok[$LC_DEFAULT]}"					\
			--cancel-label	"${cmsg_Exit[$LC_DEFAULT]}"				\
			--menu			"\nChoose the language:"					\
			0 80 0                                 					\
			0 'Português'						 								\
	      1 'English'							  								\
	      2 'Deustch'							  								\
	      3 'Français'							  							)

			exit_status=$?
			case $exit_status in
				"$D_ESC"|"$D_CANCEL")
					exit 0
					;;
			esac
			LC_DEFAULT=$i18
			sh_choose_source_disk
	done
}

#figlet
sh_logo() {
	printf '%s' "$green"
   cat << 'EOF'
      _                      _ _     _
  ___| | ___  _ __   ___  __| (_)___| | __   Copyright (c) 2019-2022 Vilmar Catafesta <vcatafesta@gmail.com>
 / __| |/ _ \| '_ \ / _ \/ _` | / __| |/ /   Copyright (c) 2019-2022 Chilios Linux Development Team
| (__| | (_) | | | |  __/ (_| | \__ \   <
 \___|_|\___/|_| |_|\___|\__,_|_|___/_|\_\   Este programa pode ser redistribuído livremente
                                             sob os termos da Licença Pública Geral GNU.
EOF
   sh_version
}

testelang() {
	langmsg=(
				'lang=("pt BR" "en_US")'
				'cmsg_Error=("ERRO" "ERROR")'
	)
	for elt in "${langmsg[@]}"; do eval "$elt"; done
	echo "lang       -> ${#lang[*]} ${lang[*]} ${lang[$PT_BR]} ${lang[$EN_US]}"
	echo "cmsg_Error -> ${#cmsg_Error[*]} ${cmsg_Error[*]} ${cmsg_Error[$PT_BR]} ${cmsg_Error[$EN_US]}"
}

sh_usage() {
	printf '%s\n' "${cyan}Most used commands:"
	printf '%s\n' "${red}	-h  ${reset}- display this help and exit"
	printf '%s\n' "${red}	-v  ${reset}- display version"
	printf '%s\n' "${red}	-c  ${reset}- no color"
}

if [[ $1 = "-v" || $1 = "--version" || $1 = "-V" ]]; then
	sh_logo
	exit 0
fi

sh_checkroot() {
	[[ $1 = "-Qq" ]] && return
	if [ "$(id -u)" != "0" ]; then
		printf "${red} error: You cannot perform this operation unless you are root!\n"
		exit 1
	fi
}

DOT() {
	printf "%s" "${blue}:: ${reset}"
}

die() {
	local msg=$1; shift
	printf "%-75s\n" "$(DOT)${bold}${red}$msg${reset}" >&2
	exit 1
}

log_msg() {
	local retval="${PIPESTATUS[0]}"

	if [[ $retval -eq 0 ]]; then
		printf "  %b %s\\n" "${TICK}" "${*}"
	else
		printf "  %b %s\\n" "${CROSS}" "${*}"
	fi
}

sh_checkDependencies() {
	local errorFound=0
	local cmd

	for cmd in "${DEPENDENCIES[@]}"; do
		log_msg "Checking dependencie : $cmd"
		if ! which "$cmd" &> /dev/null; then
			log_msg "ERROR: I didn't find the command '$cmd'"
			errorFound=1
		fi
	done
	if [[ "$errorFound" != "0" ]]; then
		echo "${yellow}---IMPOSSIBLE TO CONTINUE---"
		echo "${black}This script needs the commands listed above"
		echo "${black}Install them and/or make sure they are in your \$PATH"
		die "Aborted..."
	fi
}

sh_display() {
	if [[ "$(tput cols)" -lt 80 ]] || [[ "$(tput lines)" -lt 24 ]]; then
		dialog --backtitle "$ccabec"  \
			--title "TERMINAL TOO SMALL"  \
			--msgbox "\n\
Before you continue, re-size your terminal\nso it measures at least 80 x 24 characters.\n\
Otherwise you will not to able to use disk partition tools." 11 68
	fi
}

sh_configure
sh_getLocale
sh_Language
sh_display

#opts=$(getopt -o vnh: --long version,nocolor,help:,debugfile:,minheap:,maxheap: -n 'clonedisk' -- "$@")
#if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
if ! opts=$(getopt -o Vnh --long version,nocolor,help -n "${0##*/}" -- "$@"); then
	sh_usage
	exit 0
fi
eval set -- "$opts"
while true; do
	case "$1" in
		-V|--version) 	sh_logo; exit 0;;
		-n|--nocolor)	sh_unsetvarcolors; break;;
		-h|--help) 		sh_usage; exit 0;;
		 *)break;;
	esac
done
sh_checkDependencies "${DEPENDENCIES[*]}"
sh_checkroot "$@"
init "$@"
