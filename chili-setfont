#!/usr/bin/env bash
#shellcheck disable=SC2145,SC2001,SC2188,SC2015,SC2155,SC2317,SC2320,SC2291,SC2034,SC2120,SC2086,SC2319
#shellcheck disable=SC2016,SC2154,SC2207,SC2166,SC2128,SC2059,SC2140,SC2031,SC2030,SC2036,SC2119,SC2027

#  chili-setfont - utilitario para exibibir e definir fonte do console
#  Created: 2022/12/24
#  Altered: 2024/04/12
#  Updated: sáb 15 fev 2025 02:49:14 -04
#
#  Copyright (c) 2022-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=chili-setfont

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e
shopt -s extglob

#system
declare APP="${0##*/}"
declare _VERSION_='3.02.15.20250215'
declare APPDESC="utilitario para exibibir e definir fonte do console"
declare ccabec="Chili Linux - $APP - v$_VERSION_ - $APPDESC"
declare DEPENDENCIES=(dialog setfont tput)
declare dialogRcFile="$HOME/.dialogrc"

cleanup() {
	rm -f "$dialogRcFile"
}
#trap cleanup EXIT

sh_create_dialogrc() {
	cat >"$dialogRcFile" <<EOF
screen_color = (white,black,off)
dialog_color = (white,black,off)
title_color = (cyan,black,on)
border_color = dialog_color
shadow_color = (black,black,on)
button_inactive_color = dialog_color
button_key_inactive_color = dialog_color
button_label_inactive_color = dialog_color
button_active_color = (white,cyan,on)
button_key_active_color = button_active_color
button_label_active_color = (black,cyan,on)
tag_key_selected_color = (white,cyan,on)
item_selected_color = tag_key_selected_color
form_text_color = (BLUE,black,ON)
form_item_readonly_color = (green,black,on)
itemhelp_color = (white,cyan,off)
inputbox_color = dialog_color
inputbox_border_color = dialog_color
searchbox_color = dialog_color
searchbox_title_color = title_color
searchbox_border_color = border_color
position_indicator_color = title_color
menubox_color = dialog_color
menubox_border_color = border_color
item_color = dialog_color
tag_color = title_color
tag_selected_color = button_label_active_color
tag_key_color = button_key_inactive_color
check_color = dialog_color
check_selected_color = button_active_color
uarrow_color = screen_color
darrow_color = screen_color
form_active_text_color = button_active_color
gauge_color = title_color
border2_color = dialog_color
searchbox_border2_color = dialog_color
menubox_border2_color = dialog_color
separate_widget = ''
tab_len = 0
visit_items = off
use_shadow = off
use_colors = on
EOF
	export DIALOGRC="$dialogRcFile"
}

# Testa se o terminal suporta caracteres gráficos estendidos
sh_ascii_lines() {
	#Isso força o dialog a usar caracteres ASCII básicos para as bordas.
	#if [[ "$LANG" =~ 'UTF-8' ]]; then
	if [[ "$(printf '\u250C')" =~ "┌" ]]; then
		export NCURSES_NO_UTF8_ACS=1 # Terminal suporta ACS
	else
		export NCURSES_NO_UTF8_ACS=0 # Terminal NÃO suporta ACS
	fi
}

sh_setEnvironment() {
	[[ ! -e "$dialogRcFile" ]] && sh_create_dialogrc
	sh_ascii_lines
}

function sh_setvarcolors() {
	if tput setaf 1 &>/dev/null; then
		#tput setaf 127 | cat -v  #capturar saida
		tput sgr0 # reset colors
		bold=$(tput bold)
		reset=$(tput sgr0)
		white="${bold}$(tput setaf 7)"
		black="${bold}$(tput setaf 0)"
		red=$(tput bold)$(tput setaf 196)
		green=$(tput setaf 2)
		yellow=$(tput bold)$(tput setaf 3)
		blue=$(tput setaf 4)
		pink=$(tput setaf 5)
		cyan=$(tput setaf 6)
		orange=$(tput setaf 3)
		purple=$(tput setaf 125)
		violet=$(tput setaf 61)
	else
		bold=''
		reset="\e[0m"
		green="\e[1;32m"
		red="\e[1;31m"
		yellow="\e[1;33m"
		orange="\e[1;33m"
	fi
}

function die() {
	local msg=$1
	shift
	printf "${pink}=> ${red}$msg${reset} ${*}"
	exit 1
}

function msg() {
	local msg=$1
	shift
	printf '%s\n' "${black}$msg${reset}"
	return 0
}

function erro() {
	local msg=$1
	shift
	printf '%s\n' "${yellow}=> ${bold}${yellow}$msg${reset}"
	return 1
}

function check_deps() {
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}ERRO${reset}: não encontrei o comando ${orange}'$d'${reset}"
	done
	if ((errorFound)); then
		erro "============ IMPOSSÍVEL CONTINUAR ============"
		msg "Esse script precisa dos comandos listados acima"
		msg "Instale-os e/ou verifique se estão no seu \$PATH"
		erro "============ IMPOSSÍVEL CONTINUAR ============"
		die "Abortado..."
	fi
}

function sh_setfont() {
	local arrdir=('/usr/share/consolefonts' '/usr/share/kbd/consolefonts')
	local array
	local fonts
	local font
	local xglob="$*"
	local x
	local i

	[[ $# -lt 1 ]] && xglob="*.gz"
	for i in "${arrdir[@]}"; do
		if test -d "$i"; then
			pushd "$i" &>/dev/null || die "ERRO: no access $i"
			mapfile -t fonts <<<"$(printf "%s\n" $xglob)"
			popd &>/dev/null || return 1
		fi
	done

	if [[ ${#fonts[*]} -eq 0 ]]; then
		die "no fonts found in:" "\n${arrdir[0]}\n${arrdir[1]}"
	fi

	for i in "${fonts[@]}"; do
		x="$i"
		x="${i%%.gz*}"
		x="${x%%.psf*}"
		x="${x%%.psfu*}"
		array+=("$x")
		array+=("$i")
	done

	while :; do
		font=$(dialog \
			--default-item "$font" \
			--backtitle "$ccabec" \
			--title "Menu de Fontes - /usr/share/kbd/consolefonts" \
			--menu "Escolha uma fonte:" \
			0 0 14 \
			"${array[@]}" 2>&1 >/dev/tty)

		if [[ $? -eq 1 ]]; then
			exit
		fi
		echo -e "Fonte escolhida: $font"
		setfont "$font"
	done
}

sh_setvarcolors
sh_setEnvironment
check_deps
sh_setfont "$@"
