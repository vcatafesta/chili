#!/usr/bin/env bash
#!/usr/bin/env bash

# Função para definir as cores usando tput
definir_cores() {
	cor_vermelho=$(tput setaf 1)
	cor_verde=$(tput setaf 2)
	cor_magenta=$(tput setaf 5)
	cor_reset=$(tput sgr0)
}

# Função para mostrar o conteúdo do cabeçalho de arquivos binários
mostrar_conteudo_cabecalho() {
	arquivo="$1"
	tipo_cabecalho="$2"
	cabecalho=$(xxd -l 16 -p "$arquivo")
	echo "Cabeçalho do arquivo '$arquivo' (primeiros 16 bytes em hexadecimal):"
	echo "$cabecalho"
}

# Função para mostrar a lista de arquivos que contêm a string
mostrar_arquivos_com_string() {
	diretorio="$1"
	string="$2"

	# Utiliza o comando 'find' para procurar arquivos com o conteúdo fornecido
	# A opção '-type f' indica que estamos procurando apenas por arquivos, não diretórios
	# O comando 'grep' é usado para verificar o conteúdo do arquivo
	# '{}' é substituído pelo nome do arquivo encontrado pelo 'find'
	grep_output=$(find "$diretorio" -type f -exec grep -Hn "$string" {} + 2>/dev/null)

	# Exibe o resultado na tela com cores
	if [ -n "$grep_output" ]; then
		echo "${cor_verde}Arquivos que contêm a string '$string':${cor_reset}"
		echo "$grep_output" | sed -E "s/(${string}.*):/${cor_magenta}\1${cor_reset}/" | sed "s/:\([0-9]\+\):/:${cor_verde}\1${cor_reset}/"
	else
		echo "${cor_vermelho}Nenhum arquivo encontrado com a string '$string' em '$diretorio'.${cor_reset}"
	fi
}

# Definir as cores
definir_cores

# Inicializa as variáveis de opções
opcao_c=0
opcao_d=0

# Faz o parsing das opções usando getopts
while getopts ":c:d:" opcao; do
	case "$opcao" in
	c)
		opcao_c=1
		tipo_cabecalho="$OPTARG"
		;;
	d)
		opcao_d=1
		diretorio="$OPTARG"
		;;
	\?)
		echo "Opção inválida: -$OPTARG" >&2
		exit 1
		;;
	:)
		echo "A opção -$OPTARG requer um argumento." >&2
		exit 1
		;;
	esac
done

# Verifica se foi fornecida a opção -d
if [ $opcao_d -eq 1 ]; then
	# Verifica se o diretório existe
	if [ ! -d "$diretorio" ]; then
		echo "O diretório '$diretorio' não existe." >&2
		exit 1
	fi
else
	diretorio="$PWD"
fi

# Verifica se a opção -c foi usada
if [ $opcao_c -eq 1 ]; then
	# Se a opção -c foi usada sem o argumento correto, exibe uma mensagem de erro
	if [ -z "$tipo_cabecalho" ]; then
		echo "Uso: $0 -c TIPO [diretório]" >&2
		echo "Opções:" >&2
		echo "  -c TIPO    Mostrar o conteúdo do cabeçalho de um arquivo binário com o TIPO especificado" >&2
		echo "  -d DIR     Diretório a ser pesquisado (padrão é o diretório atual)" >&2
		exit 1
	fi

	# Utiliza o comando 'find' para encontrar arquivos com o cabeçalho especificado
	find_output=$(find "$diretorio" -type f -exec sh -c 'xxd -l 16 -p "$1" | grep -q "$2" && echo "$1"' sh {} "$tipo_cabecalho" \; 2>/dev/null)

	# Exibe o resultado na tela
	if [ -n "$find_output" ]; then
		echo "${cor_verde}Arquivos com o cabeçalho '$tipo_cabecalho':${cor_reset}"
		echo "$find_output" | sed "s/\.\///" # Remove o "./" do início do caminho do arquivo
	else
		echo "${cor_vermelho}Nenhum arquivo encontrado com o cabeçalho '$tipo_cabecalho' em '$diretorio'.${cor_reset}"
	fi

	exit 0
fi

# Restante dos argumentos após as opções são a string de pesquisa
shift $((OPTIND - 1))
string="$1"

# Verifica se a string de pesquisa foi fornecida
if [ -z "$string" ]; then
	# Se a opção -c não foi usada e não há string de pesquisa, exibe a mensagem de uso padrão
	echo "Uso: $0 [opções] [diretório] string" >&2
	echo "Opções:" >&2
	echo "  -c TIPO    Mostrar o conteúdo do cabeçalho de um arquivo binário com o TIPO especificado" >&2
	echo "  -d DIR     Diretório a ser pesquisado (padrão é o diretório atual)" >&2
	exit 1
fi

# Se a opção -c não foi usada, mostra a lista de arquivos com a string de pesquisa
mostrar_arquivos_com_string "$diretorio" "$string"
