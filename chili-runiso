#!/usr/bin/env bash
#
# Requirements:
# - qemu
# - edk2-ovmf (when UEFI booting)
set -eu

cleanup_working_dir() {
	if [[ -d "${working_dir}" ]]; then
		rm -rf -- "${working_dir}"
	fi
}

copy_ovmf_vars() {
	if [[ ! -f '/usr/share/edk2-ovmf/x64/OVMF_VARS.fd' ]]; then
		printf 'ERROR: %s\n' "OVMF_VARS.fd not found. Install edk2-ovmf."
		exit 1
	fi
	cp -av -- '/usr/share/edk2-ovmf/x64/OVMF_VARS.fd' "${working_dir}/"
}

check_image() {
	if [[ -z "$image" ]]; then
		printf 'ERROR: %s\n' "Image name can not be empty."
		exit 1
	fi
	if [[ ! -r "$image" ]]; then
		printf 'ERROR: %s\n' "Image file (${image}) does not exist."
		exit 1
	fi
}

run_image() {
	if [[ "$boot_type" == 'uefi' ]]; then
		copy_ovmf_vars
		if [[ "${secure_boot}" == 'on' ]]; then
			printf '%s\n' 'Using Secure Boot'
			local ovmf_code='/usr/share/edk2-ovmf/x64/OVMF_CODE.secboot.fd'
		else
			local ovmf_code='/usr/share/edk2-ovmf/x64/OVMF_CODE.fd'
		fi
		qemu_options+=(
#			'-drive' "if=pflash,format=raw,unit=0,file=${ovmf_code},read-only=on"
			'-drive' "if=pflash,format=raw,unit=0,file=${ovmf_code},read-only=off"
			'-drive' "if=pflash,format=raw,unit=1,file=${working_dir}/OVMF_VARS.fd"
			'-global' "driver=cfi.pflash01,property=secure,value=${secure_boot}"
		)
	fi

	if [[ "${accessibility}" == 'on' ]]; then
		qemu_options+=(
			'-chardev' 'braille,id=brltty'
			'-device' 'usb-braille,id=usbbrl,chardev=brltty'
		)
	fi

	if [[ -n "${oddimage}" ]]; then
		qemu_options+=(
			'-device' 'scsi-cd,bus=scsi0.0,drive=cdrom1'
			'-drive' "id=cdrom1,if=none,format=raw,media=cdrom,read-only=on,file=${oddimage}"
		)
	fi

#        -device ide-hd,drive=disk1,bootindex=1 \
#        -boot order=d,menu=on,reboot-timeout=5000 \
#        -device "scsi-${mediatype%rom},bus=scsi0.0,drive=${mediatype}0" \
#			-device ide-hd,drive=disk1,bootindex=1 \
	sudo qemu-system-x86_64 \
		  -drive file=$image,if=none,id=disk1 \
        -no-fd-bootchk     \
        -m "size=8128,slots=0,maxmem=$((8128*1024*1024))" \
        -k br-abnt2 \
        -hda /archlive/qemu/hda.img \
        -hdb /archlive/qemu/hdb.img \
        -hdc /archlive/qemu/hdc.img \
        -hdd /archlive/qemu/hdd.img \
        -name archiso,process=archiso_0 \
        -device virtio-scsi-pci,id=scsi0 \
        -device "scsi-${mediatype%rom},bus=scsi0.0,drive=${mediatype}0" \
        -drive "id=${mediatype}0,if=none,format=raw,media=${mediatype/hd/disk},read-only=on,file=${image}" \
        -display "${display}" \
        -vga std \
        -audiodev pa,id=snd0,server=localhost \
        -device ich9-intel-hda \
        -device hda-output,audiodev=snd0 \
        -device virtio-net-pci,romfile=,netdev=net0 -netdev user,id=net0,hostfwd=tcp::60022-:22 \
        -machine type=q35,smm=on,accel=kvm,usb=on,pcspk-audiodev=snd0 \
        -global ICH9-LPC.disable_s3=1 \
         -smp 36 \
         -enable-kvm \
        "${qemu_options[@]}" \
        -serial stdio

}
#		  -no-reboot
#		  -device virtio-gpu-pci \
#	     -vga virtio \
#		  -vga std \

image=''
oddimage=''
accessibility=''
#boot_type='bios'
boot_type='uefi'
#mediatype='cdrom'
mediatype='hd'
secure_boot='off'
display='sdl'
qemu_options=()
working_dir="$(mktemp -dt run_archiso.XXXXXXXXXX)"
trap cleanup_working_dir EXIT

if (( ${#@} > 0 )); then
	while getopts 'abc:dhi:suv' flag; do
		case "$flag" in
			a)	accessibility='on';;
			b)	boot_type='bios';;
			c)	oddimage="$OPTARG";;
			d)	mediatype='hd';;
			h)	print_help;exit 0;;
			i)	image="$OPTARG";;
			u)	boot_type='uefi';;
			s)	secure_boot='on';;
			v)	display='none'; qemu_options+=(-vnc 'vnc=0.0.0.0:0,vnc=[::]:0');;
			*)	printf '%s\n' "Error: Wrong option. Try 'run_archiso -h'."; exit 1;;
		esac
	done
else
	exit 1
fi

check_image
run_image
