#!/usr/bin/env bash
#shellcheck disable=SC2155,SC2034
#shellcheck source=/dev/null

#  chili-maketar - Create tar of directories
#
#  Created: 2023/07/28
#  Altered: 2023/07/28
#  Updated: sex 07 mar 2025 12:18:52 -04
#
#  Copyright (c) 2023-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset}'
#set -x
#set -e
shopt -s extglob

readonly APP="${0##*/}"
readonly APPDESC="Create tar of directories"
readonly _VERSION_="1.3.07-20250307"
readonly DEPENDENCIES=(tar tput sed pigz pzstd xz gzip vilmar)
readonly PACKAGEDEP=(tar ncurses sed pigz zstd xz gzip vilmar)

function sh_diahora {
	#	DIAHORA=$(date +"%d%m%Y-%T" | sed 's/://g')
	DIAHORA=$(date +"%d%m%Y-%H:%M" | sed 's/://g')
	printf "%s\n" "$DIAHORA"
}

function sh_config {
	declare -g TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
	declare -g CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}$white]"
	declare -g BOOTLOG="/tmp/$APP-$(sh_diahora).log"
	declare -g LOGGER='/dev/tty8'
	declare -g quiet=false
	declare -g use_color=true
	declare -gi ncontador=1
	declare -gi njobs=0
	#declare -g compressor="normal" # Default compressor
	declare -g compressor="pzstd" # Default compressor
	sh_setvarcolors
}

function log_error {
	printf "%30s:%-06d] : %s => %s\n" "$1" "$2" "$3 $4" >>"$BOOTLOG"
}

msg() {
   local msg="$1"
   echo -e "==>${cyan}[INFO] ${yellow}${msg}${reset}"
}

function cmdlogger {
	local lastcmd="$@"
	local line_number=${BASH_LINENO[0]}
	local status
	local error_output
	local script_name="${0##*/}[${FUNCNAME[1]}]"

	info_msg "Running '$*'"
	#   error_output=$( "$@" 2>&1 )
	if $quiet; then
  	eval "$@" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
  else
	  eval "$@" | tee -i -a "$BOOTLOG"
	fi
	#  status="${PIPESTATUS[0]}"
	status="$?"
	if [ $status -ne 0 ]; then
		error_output=$(echo "$error_output" | cut -d':' -f3-)
		log_error "$script_name" "$line_number" "$lastcmd" "$error_output"
	fi
	return $status
}

function sh_check_terminal {
  if [ ! -t 1 ]; then
		use_color=false
	fi
}

function print_color {
	if $use_color; then
		echo -e "${@//\033\[*/}"
	else
		echo -e "$@"
	fi
}

function sh_setvarcolors {
	sh_check_terminal
	if $use_color; then
		bold=$(tput bold)
		red=$(tput bold)$(tput setaf 196)
		reset=$(tput sgr0)
		pink=$(tput setaf 5)
		yellow=$(tput bold)$(tput setaf 3)
		green=$(tput bold)$(tput setaf 2)
		cyan=$(tput setaf 6)
	else
		unset bold red reset pink yellow green cyan
	fi
}

die() {
	((++njobs))
  printf "${red}$CROSS ${pink}%03d/%03d => ${red}FATAL: %s\n\033[m" "$ncontador" "$njobs" "$@"
	((++ncontador))
	exit 1
}

function info_msg() {
	((++njobs))
	printf "${green}$TICK ${pink}%03d/%03d => ${yellow}%s\n\033[m" "$ncontador" "$njobs" "$@"
	((++ncontador))
}

function run_cmd {
	info_msg "$APP: Running $*"
	eval "$@"
}

function sh_checkDependencies() {
	local d
	local errorFound=false
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=true &&
			info_msg "${red}ERRO: não encontrei o comando${reset}: ${cyan}'$d'${reset}"
	done

	if $errorFound; then
	   if ! sudo pacman -Sy "${PACKAGEDEP[@]}" --needed --noconfirm 1>/dev/null ; then
         echo
         msg "${yellow}----------------------IMPOSSÍVEL CONTINUAR--------------------${reset}"
         msg "Este script precisa dos comandos listados acima.${reset}"
         msg "Fiz tentativa de instalar, no entanto falhou.${reset}"
         msg "Instale-os e/ou certifique-se de que eles estejam em seu ${red}\$PATH${reset}"
         msg "${yellow}----------------------IMPOSSÍVEL CONTINUAR--------------------${reset}"
         die "Instalação abortada!"
      fi
	fi
}

function sh_main {
  if [[ "$1" == '.' ]]; then
    directory=$(basename "$(pwd)")
  else
    directory="${1%/}"
  fi
	local FILENAME=$directory-$(sh_diahora).tar
	local error
	local param='--verbose'

  if $quiet; then
    param=''
  fi

	case "$compressor" in
	pigz)
		FILENAME+=".gz"
 		cmdlogger tar -I pigz $param --posix --xattrs -chf "$FILENAME" "$1"
		;;
	pzstd)
		FILENAME+=".zst"
#   cmdlogger tar --use-compress-program="pzstd -19" --verbose --posix --xattrs -chf chililinux-26122024-1235.tar.zst chililinux
 		cmdlogger tar -I pzstd $param --posix --xattrs -chf "$FILENAME" "$1"
		;;
	gzip)
		FILENAME+=".gz"
		cmdlogger tar -z $param --posix --xattrs -chf "$FILENAME" "$1"
		;;
	xz)
		FILENAME+=".xz"
		cmdlogger tar --xz $param --posix --xattrs -chf "$FILENAME" "$1"
		;;
	normal)
		cmdlogger tar --posix $param --xattrs -chf "$FILENAME" "$1"
		;;
	esac

	error=$?

	if ((error)); then
		die "$@"
	else
		info_msg "Successfully created: ${red}$FILENAME ${reset}"
	fi
}

sh_usage() {
   cat <<-EOF
    ${cyan}$APP - $APPDESC${reset}
    Uso: $APP [options] <directory>

    Options:
      -q          Quiet mode (suppress progress messages)
      -n          Disable colors in the output
      -z          Use pigz for compression
      -s          Use pzstd for compression (default)
      -g          Use gzip for compression
      -x          Use xz for compression
      (normal)    Create tar archive without additional compression
EOF
   exit 1
}

sh_config

# Display usage information if no arguments are passed
if [[ $# -eq 0 || $1 = @(-h|--help) || $1 = "-h" || $1 = "--help" || $1 = "help" || $1 = "-help" ]]; then
   sh_usage
fi

sh_checkDependencies

#if [ "$(id -u)" -ne 0 ]; then
#	die "$APP: need root perms to continue, exiting."
#fi
if test -w "$PWD"; then
  info_msg "$USER com gravação permitida em $PWD, prosseguindo..."
else
  info_msg "$USER sem permissão de gravação em $PWD"
  if [ "$(id -u)" -ne 0 ]; then
    die "$APP: need root perms to continue, exiting."
  fi
fi

# Process command line options using getopts
while getopts "qnsxzg" opt; do
  case $opt in
    q) quiet=true;info_msg 'Param -q detected, disabling verbose'             ;; # Quiet mode
    n) use_color=false;sh_setvarcolors;info_msg 'Param -n detected, disabling colors';; # Disable color
    z) compressor="pigz";info_msg "Param -z detected, compressor is now '$compressor'";; # Use pigz for compression
    s) compressor="pzstd";info_msg "Param -z detected, compressor is now '$compressor'"     ;; # Use pzstd for compression
    g) compressor="gzip";info_msg "Param -z detected, compressor is now '$compressor'"      ;; # Use gzip for compression
    x) compressor="xz";info_msg "Param -z detected, compressor is now '$compressor'"        ;; # Use xz for compression
    \?) die "Invalid option: -$OPTARG";;
  esac
done

# Process the remaining argument (directory)
shift $((OPTIND-1))

# Check if the directory argument is missing or invalid
[[ -z "$1" || ! -d "$1" ]] && die "${cyan}argument directory ${yellow}'$1' ${reset}is either missing or does not exist!"
sh_main "$1"
