#!/usr/bin/env bash
#shellcheck disable=SC2155,SC2034
#shellcheck source=/dev/null

#  chili-maketar
#  Description: Create tar of directories
#
#  Created: 2023/07/28
#  Altered: 2023/07/2
#
#  Copyright (c) 2023-2023, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

readonly APP="${0##*/}"
readonly _VERSION_="1.0.0-20230728"
readonly DEPENDENCIES=(pigz tar tput sed)

function sh_diahora {
#	DIAHORA=$(date +"%d%m%Y-%T" | sed 's/://g')
	DIAHORA=$(date +"%d%m%Y-%H:%M" | sed 's/://g')
	printf "%s\n" "$DIAHORA"
}

function sh_config {
	declare -g TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
	declare -g CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}$white]"
	declare -g BOOTLOG="/tmp/$APP-$(sh_diahora).log"
	declare -g LOGGER='/dev/tty8'
	declare -gi quiet=0
	declare -g use_color=1
	declare -gi contador=0
	declare -gi njobs=1
	sh_setvarcolors
}

function log_error {
	printf "%30s:%-06d] : %s => %s\n" "$1" "$2" "$3 $4" >>"$BOOTLOG"
}

function cmdlogger {
	local lastcmd="$@"
	local line_number=${BASH_LINENO[0]}
	local status
	local error_output
	local script_name="${0##*/}[${FUNCNAME[1]}]"

	info_msg "Running '$*'"
	#   error_output=$( "$@" 2>&1 )
	eval "$@" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
	#  status="${PIPESTATUS[0]}"
	status="$?"
	if [ $status -ne 0 ]; then
		error_output=$(echo "$error_output" | cut -d':' -f3-)
		log_error "$script_name" "$line_number" "$lastcmd" "$error_output"
	fi
	return $status
}

function sh_check_terminal {
	if [ ! -t 1 ]; then
		use_color=0
	fi
}

function print_color {
	if ((use_color)); then
		echo -e "${@//\033\[*/}"
	else
		echo -e "$@"
	fi
}

function sh_setvarcolors {
	sh_check_terminal
	if ((use_color)); then
		bold=$(tput bold)
		red=$(tput bold)$(tput setaf 196)
		reset=$(tput sgr0)
		pink=$(tput setaf 5)
		yellow=$(tput bold)$(tput setaf 3)
		green=$(tput bold)$(tput setaf 2)
		cyan=$(tput setaf 6)
	else
		unset bold red reset pink yellow green cyan
	fi
}

die() {
	printf "${red}$CROSS ${pink}%03d/%03d => ${red}FATAL: %s\n\033[m" "$ncontador" "$njobs" "$@"
	exit 1
}

function info_msg() {
	((++ncontador))
	((++njobs))
	printf "${green}$TICK ${pink}%03d/%03d => ${yellow}%s\n\033[m" "$ncontador" "$njobs" "$@"
}

function run_cmd {
	info_msg "$APP: Running $*"
	eval "$@"
}

function sh_checkDependencies() {
	local d
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && info_msg "${red}ERRO: não encontrei o comando${reset}: ${cyan}'$d'${reset}"
	done

	if ((errorFound)); then
		echo "${yellow}---------------IMPOSSIBLE TO CONTINUE-------------${reset}"
		echo "This script needs the commands listed above"
		echo "Install them and/or make sure they are in your ${red}\$PATH${reset}"
		echo "${yellow}---------------IMPOSSIBLE TO CONTINUE-------------${reset}"
		die "Installation aborted!"
	fi
}

function sh_main {
	local FILENAME=$1-$(sh_diahora).tar.gz
	local error

	if ((quiet)); then
		cmdlogger tar -I pigz --posix --xattrs -cf "$FILENAME" "$1"
		error=$?
	else
		cmdlogger tar -I pigz --posix --xattrs -cvf "$FILENAME" "$1"
		error=$?
	fi
	if ((error)); then
		die "$@"
	else
		info_msg "Successfully created $FILENAME"
	fi
}

sh_config
sh_checkDependencies

if [ "$(id -u)" -ne 0 ]; then
	die "$APP: need root perms to continue, exiting."
fi

# Process command line options using getopts
while getopts "qn" opt; do
	case $opt in
	q) quiet=1 ;;
	n)
		use_color=0
		sh_setvarcolors
		;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 1 ]; then
	cat <<-EOF
		Usage: $APP [options] <directory>
		Options:
		  -q          Quiet mode (suppress progress messages)
		  -n          Disable colors in the output
	EOF
	exit 1
fi

[[ ! -d "$1" ]] && die "${cyan}$1${reset} does not exist!"
sh_main "$@"
