#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166
#
#  create_bridge_virbr
#  Created: 2025/01/20 - 22:10
#  Altered: 2025/01/20 - 22:10
#
#  Copyright (c) 2025-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=create_bridge_virbr

# Definir a variável de controle para restaurar a formatação original
reset=$(tput sgr0)

# Definir os estilos de texto como variáveis
bold=$(tput bold)
underline=$(tput smul)   # Início do sublinhado
nounderline=$(tput rmul) # Fim do sublinhado
reverse=$(tput rev)      # Inverte as cores de fundo e texto

# Definir as cores ANSI como variáveis
black=$(tput bold)$(tput setaf 0)
red=$(tput bold)$(tput setaf 196)
green=$(tput bold)$(tput setaf 2)
yellow=$(tput bold)$(tput setaf 3)
blue=$(tput setaf 4)
pink=$(tput setaf 5)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
gray=$(tput setaf 8)
orange=$(tput setaf 202)
purple=$(tput setaf 125)
violet=$(tput setaf 61)
light_red=$(tput setaf 9)
light_green=$(tput setaf 10)
light_yellow=$(tput setaf 11)
light_blue=$(tput setaf 12)
light_magenta=$(tput setaf 13)
light_cyan=$(tput setaf 14)
bright_white=$(tput setaf 15)

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset}'
#set -x
#set -e
shopt -s extglob

#system
declare APP="${0##*/}"
declare _VERSION_="1.0.0-20250120"
declare distro="$(uname -n)"
declare DEPENDENCIES=(tput)
source /usr/share/fetch/core.sh

# Função para exibir mensagens informativas
msg_info() {
  echo -e "${yellow}[INFO] ${cyan}$1${reset}"
}
msg_err() {
  echo -e "${red}[ERRO] ${yellow}$1${reset}"
}

# Função para verificar se a interface TAP já existe e retornar o próximo número disponível
get_next_free_tap() {
  local next_tap=1
  while ip link show "tap$next_tap" &>/dev/null; do
    next_tap=$((next_tap + 1))
  done
  echo "tap$next_tap"
}

# Função para verificar se a bridge existe e retornar o próximo nome disponível
get_next_free_bridge() {
  local base_bridge="virbr"
  local next_bridge=1
  while ip link show "$base_bridge$next_bridge" &>/dev/null; do
    next_bridge=$((next_bridge + 1))
  done
  echo "$base_bridge$next_bridge"
}

bridge_name="$1"
if [[ -z "$bridge_name" ]]; then
  # Obter o próximo nome de bridge disponível
  bridge_name=$(get_next_free_bridge)
fi

# Remover a interface bridge
#msg_info "Removendo a interface BRIDGE $bridge_name..."
#if sudo virsh net-destroy $bridge_name &> /dev/null; then
# sudo virsh net-undefine $bridge_name 1> /dev/null
#  sudo ip link delete $bridge_name 1> /dev/null
#  msg_info "Interface BRIDGE $bridge_name removida com sucesso!"
#else
#  msg_err "A interface BRIDGE $bridge_name não existe."
#fi

# Remover a interface TAP associada
#tap_name="tap$(echo "$bridge_name" | sed 's/[^0-9]*//g')" # Ajuste para pegar o número correto do tap
#if ip link show "$tap_name" &>/dev/null; then
#  msg_info "Removendo a interface TAP $tap_name..."
#  sudo ip link set "$tap_name" nomaster 1>/dev/null
#  sudo ip link set "$tap_name" down 1>/dev/null
#  sudo ip tuntap del dev "$tap_name" mode tap 1>/dev/null
#  msg_info "Interface TAP $tap_name removida com sucesso!"
#else
#  msg_err "A interface TAP $tap_name não existe."
#fi

# Criar a rede virsh correspondente à nova bridge
if ! sudo virsh net-list --all | grep -q "$bridge_name" 1> /dev/null; then
  msg_info "Criando a rede $bridge_name..."

  # Calcular a faixa de IP com base no nome da bridge
  # O número da bridge será extraído (ex: virbr1 -> 1, virbr2 -> 2, etc.)
  bridge_number=$(echo "$bridge_name" | grep -o '[0-9]*')
  base_ip="172.$((30 + bridge_number)).255.1"
  GATEWAY="$base_ip"
  subnet="255.255.255.0"
  dhcp_range_start="172.$((30 + bridge_number)).255.2"
  dhcp_range_end="172.$((30 + bridge_number)).255.200"

  # Criando o arquivo de configuração temporário para a rede
  tmp_net_config=$(mktemp)

cat <<EOF >"$tmp_net_config"
<!--
WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE
OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:
  virsh net-edit $bridge_name
or other application using the libvirt API.
-->

<network>
  <name>$bridge_name</name>
  <uuid>$(uuidgen)</uuid>
  <forward mode='nat'/>
  <bridge name='$bridge_name' stp='on' delay='0'/>
  <ip address='$base_ip' netmask='$subnet'>
    <dhcp>
      <range start='$dhcp_range_start' end='$dhcp_range_end'/>
    </dhcp>
  </ip>
</network>
EOF

  # Definir a rede usando o arquivo temporário
  sudo virsh net-define "$tmp_net_config" 1> /dev/null

  # Remover o arquivo de configuração temporário após a definição
  sudo rm -f "$tmp_net_config"
fi

# Tornar a nova bridge persistente
msg_info "Tornando $bridge_name persistente..."
msg_info "Iniciando a rede $bridge_name..."
sudo virsh net-autostart "$bridge_name" 1> /dev/null

if ! sudo virsh net-start "$bridge_name" 1> /dev/null; then
  msg_err "Falha ao iniciar a rede $bridge_name. Tentando novamente."
  sudo virsh net-destroy "$bridge_name" 1> /dev/null
  sudo virsh net-start "$bridge_name" 1> /dev/null
fi

# Obter o próximo nome de interface TAP disponível
tap_name=$(get_next_free_tap)-"$bridge_name"

# Criar a interface TAP (ex: tap0, tap1, tap2...)
msg_info "Criando a interface TAP $tap_name..."
sudo ip tuntap add dev "$tap_name" mode tap 1> /dev/null

# Colocar a interface TAP para up
msg_info "Ativando a interface TAP $tap_name..."
sudo ip link set "$tap_name" up 1> /dev/null

# Adicionar a interface TAP à bridge recém-criada
msg_info "Adicionando $tap_name à bridge $bridge_name..."
sudo brctl addif "$bridge_name" "$tap_name" 1> /dev/null

# Verificar se a bridge e o TAP foram configurados corretamente
msg_info "Verificando a associação de interfaces à bridge $bridge_name..."
brctl show "$bridge_name" 1> /dev/null

# Exibir as interfaces para verificar se tudo está funcionando
msg_info "Verificando as interfaces de rede..."
ip addr show "$bridge_name" 1> /dev/null
ip addr show "$tap_name" 1> /dev/null

sudo virsh net-info "$bridge_name"
msg_info "Configuração concluída!"
