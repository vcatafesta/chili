#!/usr/bin/env bash

#  chili-clonedisk - utility written in bash to clone disks
#  Chili GNU/Linux - https://github.com/vcatafesta/ChiliOS
#  Chili GNU/Linux - https://chililinux.com
#  Chili GNU/Linux - https://chilios.com.br
#
#  Created: 2019/04/05
#  Altered: 2022/10/30
#
#  Copyright (c) 2019-2022, Vilmar Catafesta <vcatafesta@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#  chili-clonedisk uses quite a few external programs during its execution. You
#  need to have at least the following installed for makepkg to function:
#     awk, bsdtar (libarchive), bzip2, coreutils, fakeroot, file, find (findutils),
#     gettext, gpg, grep, gzip, sed, tput (ncurses), xz, ETC
#########################################################################
#set -e
#declare -r APP="${0##*/}"
declare -r _APP_="chili-clonedisk"
declare -r _VERSION_="3.43.20221030"
readonly DEPENDENCIES=(which echo printf lsblk cut dialog whiptail pv grep sed cat awk tput dd)

# debug
export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x

# Import lib
LIBRARY=${LIBRARY:-'/usr/share/fetch'}
SYSCONFDIR=${SYSCONFDIR:-'/etc/fetch'}
source "${LIBRARY}/core.sh"

sh_ascii-lines() {
	if [[ "$LANG" =~ 'UTF-8' ]]; then
		export NCURSES_NO_UTF8_ACS=0
	else
		export NCURSES_NO_UTF8_ACS=1
	fi
}

sh_configure() {
	sh_ascii-lines
	# vars bool
	true=0
	#false=1

	# flag languages
	: "${PT_BR=0}"
	: "${EN_US=1}"
	: "${DE_DE=2}"
	: "${FR_FR=3}"
	: "${LC_DEFAULT=${EN_US}}"

	# flag dialog exit status codes
	: "${D_OK=0}"
	: "${D_CANCEL=1}"
	: "${D_HELP=2}"
	: "${D_EXTRA=3}"
	: "${D_ITEM_HELP=4}"
	: "${D_ESC=255}"

	# common vars
	: "${DIALOG=${DIALOG:-"dialog"}}"
	: "${grafico=$true}"
	: "${xapp="Chili CloneDisk"}"
	: "${ccabec="${xapp} $_VERSION_"}"
	: "${ctitle="$cdistro Linux"}"
	: "${welcome="Welcome to the $xapp"}"
	sep='\xe2\x94\x82'
}

confirma() {
	[ "$1" -ne 0 ] && {
		conf "INFO" "$2"
		return $?
	}
}

msg() {
	if [ $grafico -eq $true ]; then
		${DIALOG} \
			--no-collapse \
			--title "$1" \
			--infobox "\n$2" \
			6 60
	else
		log_info_msg "$2"
	fi
}

mensagem() {
	${DIALOG} \
		--title "$ctitle" \
		--backtitle "$ccabec" \
		--infobox "$*" \
		6 60
}

alerta() {
	${DIALOG} \
		--colors \
		--title "$1" \
		--no-collapse \
		--cr-wrap \
		--backtitle "$ccabec" \
		--msgbox "\Z2$2\n\Z1$3\n\Z3$4\n\Z4$5\n\Z5$6" \
		0 0
}

info() {
	${DIALOG} \
		--colors \
		--beep \
		--title "$ctitle" \
		--backtitle "$ccabec" \
		--msgbox "\Z1$*" \
		10 60
}

conf() {
	xtitle="$1"
	shift
	${DIALOG} \
		--title "$xtitle" \
		--backtitle "$ccabec" \
		--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		0 0
	return $?
}

confmulti() {
	xtitle="$1"
	shift
	${DIALOG} \
		--title "$xtitle" \
		--backtitle "$ccabec" \
		--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		10 100
	return $?
}

sh_checkdisk() {
	local nchoice=0
	dsk=$(df -h | grep "$sddest" | awk '{print $1, $2, $3, $4, $5, $6, $7}')
	if [ -n "$dsk" ]; then
		conf "${cwarning[$LC_DEFAULT]}" "\n${cmsg_all_mounted_part[$LC_DEFAULT]}\n\n$dsk\n\n${cmsg_dismount[$LC_DEFAULT]}"
		nchoice=$?
		if [ $nchoice = 0 ]; then
			for i in $(seq 1 10); do
				umount -f "$sddest$i" 2>/dev/null
			done
		fi
	fi
	return $nchoice
}

choosedisk() {
	while true; do
		sh_disk_info
		local array=()
		local i
		local n=0
		local nc=0
		local result

		for i in "${ARRAY_DSK_DEVICES[@]}"; do
			array[((n++))]="$i"
			array[((n++))]=$(printf "%-6s$sep%6s$sep%-10s$sep%-30s$sep%-20s" "${ARRAY_DSK_TRAN[$nc]}" "${ARRAY_DSK_SIZE[$nc]}" "${ARRAY_DSK_LABEL[$nc]}" "${ARRAY_DSK_MODEL[$nc]}" "${ARRAY_DSK_SERIAL[$nc]}")
			((nc++))
		done

		sd=$(${DIALOG} \
			--title "${cmsg_disco_origem[$LC_DEFAULT]}" \
			--backtitle "${ccabec}" \
			--ok-label "${cmsg_Select[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_button_voltar[$LC_DEFAULT]}" \
			--colors \
			--extra-button \
			--extra-label "${cmsg_info_disco[$LC_DEFAULT]}" \
			--menu "\n${cmsg_choose_disk[$LC_DEFAULT]}" \
			0 0 0 "${array[@]}" 2>&1 >/dev/tty)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			init
			;;
		3)
			result=$(fdisk -l "$sd")
			display_result "$result" "${csmg_particionamento_automatico[$LC_DEFAULT]}" "${cmsg_part_disk[$LC_DEFAULT]}"
			continue
			;;
		esac

		if [ -n "$sd" ]; then
			{
				local item
				index=0
				for item in "${ARRAY_DSK_DEVICES[@]}"; do
					[ "$item" = "$sd" ] && { break; }
					((index++))
				done
			}
		fi
		DEVICE_ORIGEM="${ARRAY_DSK_DISKS[index]}"
		MODEL_ORIGEM="$sd [${ARRAY_DSK_SIZE[index]}] [${ARRAY_DSK_MODEL[index]}]"
		choosediskdestin
	done
}

choosediskdestin() {
	while true; do
		#		sh_disk_info
		local array=()
		local i
		local n=0
		local nc=0
		local result

		for i in "${ARRAY_DSK_DEVICES[@]}"; do
			if [[ "${i}" = "${sd}" ]]; then
				((n++))
				((nc++))
				continue
			fi
			array[((n++))]="$i"
			array[((n++))]=$(printf "%-6s$sep%6s$sep%-10s$sep%-30s$sep%-20s" "${ARRAY_DSK_TRAN[$nc]}" "${ARRAY_DSK_SIZE[$nc]}" "${ARRAY_DSK_LABEL[$nc]}" "${ARRAY_DSK_MODEL[$nc]}" "${ARRAY_DSK_SERIAL[$nc]}")
			((nc++))
		done

		sddest=$(${DIALOG} \
			--title "${cmsg_disco_destino[$LC_DEFAULT]}" \
			--backtitle "${ccabec}" \
			--ok-label "${cmsg_Ok[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_button_voltar[$LC_DEFAULT]}" \
			--extra-button \
			--extra-label "${cmsg_info_disco[$LC_DEFAULT]}" \
			--menu "\nSOURCE DISK: $MODEL_ORIGEM\n\n${cmsg_dest[$LC_DEFAULT]}" \
			0 0 0 "${array[@]}" 2>&1 >/dev/tty)

		exit_status=$?
		case $exit_status in
		"$D_ESC")
			init
			;;
		"$D_CANCEL")
			choosedisk
			;;
		3)
			result=$(fdisk -l "$sd")
			display_result "$result" "${csmg_particionamento_automatico[$LC_DEFAULT]}" "${cmsg_part_disk[$LC_DEFAULT]}"
			continue
			;;
		esac

		if [ -n "$sddest" ]; then
			{
				local item
				index=0
				for item in "${ARRAY_DSK_DEVICES[@]}"; do
					[ "$item" = "$sddest" ] && { break; }
					((index++))
				done
			}

			DEVICE_DESTINO="${ARRAY_DSK_DISKS[index]}"
			MODEL_DESTINO="$sddest [${ARRAY_DSK_SIZE[index]}] [${ARRAY_DSK_MODEL[index]}]"

			if [ "$sd" == "$sddest" ]; then
				alerta " *** WARWING *** " "\n   \Z1${cmsg_disco_identico[$LC_DEFAULT]} \n\n      \Z4SOURCE DISK : \Z1\Zr$MODEL_ORIGEM\ZR\n \Z4DISK DESTINATION : \Z1\Zr$MODEL_DESTINO\ZR"
				init
				return
			fi
			sh_backup_partitions "${sddest}" "${DEVICE_DESTINO}"
			sh_checkdisk
			local nmontada=$?
			if [ $nmontada = 1 ]; then
				alerta "CHOOSEDISK" "${cmsg_nec_dismount[$LC_DEFAULT]}"
			fi
			sh_confclone
		fi
		break
	done
}

sh_domakeclone() {
	mensagem "${cmsg_formatando_particao[$LC_DEFAULT]}: $sd TO $sddest"
	(pv -n "$sd" |
		dd of="$sddest" conv=notrunc,noerror,sync) 2>&1 |
		${DIALOG} --gauge \
			"Running cloning dd command (dd if=$sd of=$sddest conv=notrunc,noerror,sync), please wait...\n\n     SOURCE DISK : $MODEL_ORIGEM \n DISK DESTINATION: $MODEL_DESTINO" 10 84 0
	local -i nchoice=$?

	[[ $nchoice -eq 0 ]] && display_result "$(fdisk -l "$sddest")"
	return $nchoice
}

sh_confclone() {
	conf " *** WARNING *** " \
		"\n${cmsg_todos_os_dados_serao_perdidos[$LC_DEFAULT]}\n" \
		"${MODEL_DESTINO}" \
		"\n\n       SOURCE DISK: $MODEL_ORIGEM \n  DISK DESTINATION: $MODEL_DESTINO" \
		"\n\n" \
		"${cmsg_continuar_com_a_clonagem[$LC_DEFAULT]}?\n"

	format=$?
	if [ $format = 0 ]; then
		sh_domakeclone
	fi
	return $format
}

sh_language() {
	langmsg=(
		'lang=("pt BR" \
				 "en_US" \
				 "de_DE" \
				 "fr_FR")'
		'cmsg_Error=("ERRO" 	\
						 "ERROR" \
						 "ERROR" \
						 "ERREUR")'
		'cmsg_button_voltar=("Voltar" 		\
									"Back" 			\
									"Zurückkehren"	\
									"Retourner")'
		'cmsg_info_disco=("Info disco" 		\
								"Disk info" 		\
								"Festplatteninfo"	\
								"Disque va")'
		'cmsg_Ok=(	"Ok" 			\
						"Ok"			\
						"Ok" 			\
						"D_Accord")'
		'cmsg_Exit=("Sair" 		\
						"Exit" 		\
						"Ausgehen" 	\
						"Sortir")'
		'cmsg_Select=( "Selecionar" 	\
							"Select" 		\
							"Auswählen" 	\
							"Sélectionner")'
		'cmsg_disco_origem=( "DISCO DE ORIGEM" \
									"SOURCE DISK" 		\
									"QUELLDISK"			\
									"DISQUE SOURCE")'
		'cmsg_disco_destino=("DISCO DE DESTINO" 	\
									"DESTINATION DISK" 	\
									"ZIELDISKETTE"			\
									"DISQUE DE DESTINATION")'
		'cmsg_dest=("Escolha o disco de DESTINO:" 		\
						"Choose destination DISK:" 			\
						"Wahl der DESTINATION-Festplatte"	\
						"Choisissez le disque DESTINATION")'
		'cmsg_yeslabel=(  "Sim" \
								"Yes" \
								"Ja" 	\
								"Oui")'
		'cmsg_nolabel=("Não" 	\
							"No" 		\
							"Nein" 	\
							"Nom")'
		'cmsg_disco_identico=("Disco ORIGEM e DESTINO não podem ser o mesmo!" \
									 "SOURCE and DESTINATION disk can be the same!" 	\
									 "SOURCE- und DESTINY-Datenträger dürfen nicht identisch sein"	\
									 "Les disques SOURCE et DESTINY ne peuvent pas être identiques !")'
		'cmsg_nec_dismount=("Necessário desmontar particao para reparticionar automaticamente." \
								  "Need to dismount partition to repartition automatically." 				\
								  "Sie müssen die Partition aushängen, um sie automatisch neu zu partitionieren." \
								  "Besoin de démonter la partition pour repartitionner automatiquement.")'
		'cmsg_formatando_particao=("Formatando partição" \
   										"Formatting partition" \
   										"Partition formatieren"	\
   										"Partition de formatage")'
		'cmsg_todos_os_dados_serao_perdidos=("  AVISO!  Todos os dados disco DESTINO abaixo serão perdidos!" \
														"  NOTICE!  All DESTINATION disk data below will be lost!" 		\
														"  WARNUNG  Alle Daten der ZIEL-Festplatte unten gehen verloren!**" \
														"  ATTENTION  Toutes les données du disque DESTINATION ci-dessous seront perdues !")'
		'cmsg_continuar_com_a_clonagem=("Continuar com a clonagem" \
  												  "Continue with the cloning" \
  												  "Fahren Sie mit dem Klonen fort" \
  												  "Continuer le clonage")'
		'cwarning=("** AVISO **"		\
						"** WARNING **"	\
  						"** NOTIZ **" 		\
  						"** AVIS **")'
		'cmsg_choose_disk=("Escolha o disco de ORIGEM:" 		\
  								 "Choose the SOURCE disk:" 			\
  								 "Wählen Sie die SOURCE-Festplatte" \
  								 "Choisissez le disque SOURCE")'
	)
	for xmsg in "${langmsg[@]}"; do eval "$xmsg"; done
	#echo "lang       ${#lang[@]} ${lang[@]} ${lang[$PT_BR]} ${lang[$EN_US]}"
	#echo "cmsg_Error ${#cmsg_Error[@]} ${cmsg_Error[@]} ${cmsg_Error[$PT_BR]} ${cmsg_Error[$EN_US]}"
}

init() {
	while true; do
		i18=$(${DIALOG} \
			--stdout \
			--backtitle "$ccabec" \
			--title "$welcome" \
			--ok-label "${cmsg_Ok[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_Exit[$LC_DEFAULT]}" \
			--menu "\nChoose the language:" \
			0 80 0 \
			1 'Português' \
			2 'English' \
			3 'Deustch' \
			4 'Français')

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			clear
			scrend 0
			;;
		esac
		case $i18 in
		1)
			LC_DEFAULT=${PT_BR}
			choosedisk
			;;
		2)
			LC_DEFAULT=${EN_US}
			choosedisk
			;;
		3)
			LC_DEFAULT=${DE_DE}
			choosedisk
			;;
		4)
			LC_DEFAULT=${FR_FR}
			choosedisk
			;;
		esac
	done
}

#figlet
sh_logo() {
	printf '%s' "$green"
	cat <<'EOF'
      _                      _ _     _
  ___| | ___  _ __   ___  __| (_)___| | __   Copyright (c) 2019-2022 Vilmar Catafesta <vcatafesta@gmail.com>
 / __| |/ _ \| '_ \ / _ \/ _` | / __| |/ /   Copyright (c) 2019-2022 Chilios Linux Development Team
| (__| | (_) | | | |  __/ (_| | \__ \   <
 \___|_|\___/|_| |_|\___|\__,_|_|___/_|\_\   Este programa pode ser redistribuído livremente
                                             sob os termos da Licença Pública Geral GNU.
EOF
	sh_version
}

testelang() {
	langmsg=(
		'lang=("pt BR" "en_US")'
		'cmsg_Error=("ERRO" "ERROR")'
	)
	for elt in "${langmsg[@]}"; do eval "$elt"; done
	echo "lang       -> ${#lang[*]} ${lang[*]} ${lang[$PT_BR]} ${lang[$EN_US]}"
	echo "cmsg_Error -> ${#cmsg_Error[*]} ${cmsg_Error[*]} ${cmsg_Error[$PT_BR]} ${cmsg_Error[$EN_US]}"
}

usage() {
	printf '%s\n' "${cyan}Most used commands:"
	printf '%s\n' "${red}	-h  ${reset}- display this help and exit"
	printf '%s\n' "${red}	-v  ${reset}- display version"
	printf '%s\n' "${red}	-c  ${reset}- no color"
}

if [[ $1 = "-v" || $1 = "--version" || $1 = "-V" ]]; then
	sh_logo
	exit 0
fi

#testelang
sh_checkroot
sh_configure
sh_language
#en_US
sh_checkDependencies "${DEPENDENCIES[*]}"
sh_display

##############################################################################################################
#TEMP=$(getopt -o vnh: --long version,nocolor,help:,debugfile:,minheap:,maxheap: -n 'clonedisk' -- "$@")
#if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
if ! TEMP=$(getopt -o vnh --long version,nocolor,help -n "${0##*/}" -- "$@"); then
	usage
	exit 0
fi
eval set -- "$TEMP"
while true; do
	case "$1" in
	-v | --version)
		sh_logo
		exit 0
		;;
	-n | --nocolor)
		unsetvarcolors
		break
		;;
	-h | --help)
		usage
		exit 0
		;;
	--)
		shift
		break
		;;
	*) break ;;
	esac
done

init

: <<'LIXO'
Passagem padrão original de Lorem Ipsum, usada desde o século XVI.

"Lorem ipsum dolor sit amet, consectetur adipiscing elit, do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure
dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
LIXO

# vim:set ts=3 sw=3 et:
