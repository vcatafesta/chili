#!/usr/bin/env bash

#  chili-setfont - utilitario para exibibir e setar fontes do console
#
#  Created: 2022/02/15
#  Altered: 2022/07/27
#
#  Copyright (c) 2022-2022, Vilmar Catafesta <vcatafesta@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  chili-setfont uses quite a few external programs during its execution. You
#  need to have at least the following installed for makepkg to function:
#     awk, bsdtar (libarchive), bzip2, coreutils, fakeroot, file, find (findutils),
#     gettext, gpg, grep, gzip, sed, tput (ncurses), xz, etc
#########################################################################
#system
_VERSION_='2.44.20220727'
DEPENDENCIES=(dialog setfont tput)

sh_setfont()
{
	local dirfonts1='/usr/share/consolefonts'
	local dirfonts2='/usr/share/kbd/consolefonts'
   local array
	local fonts
   local n=0
   local font

	xglob="$*"
	if test $# -lt 1; then
		xglob="*.gz"
	fi

	pushd "$dirfonts1" &>/dev/null || die "ERRO: no access $dirfonts1"
   fonts+="$(echo $xglob)"
	popd &>/dev/null || return 1

	pushd "$dirfonts2" &>/dev/null || msg "ERRO: no access $dirfonts2"
	fonts+="$(echo $xglob)"
	popd &>/dev/null || return 1

  if [[ ${#fonts[*]} -eq 0 ]] ; then
		die "no fonts found in:\n$dirfonts1\n$dirfonts2"
  fi

   for i in ${fonts[*]}
	do
      array[((n++))]="$i"
      array[((n++))]="$i"
   done

   while :
   do
	font=$(dialog 															\
				--backtitle "Chili Linux setfont v$_VERSION_"	\
				--title "Chili Linux setfont v$_VERSION_"			\
            --menu "Escolha uma fonte:"							\
            0 0 14 														\
            "${array[@]}" 2>&1 >/dev/tty)

      if [[ $? -eq 1 ]]; then
			exit
      fi
      echo -e "Fonte escolhida: $font"
      setfont "$font"
   done
}

setvarcolors()
{
   if tput setaf 1 &> /dev/null; then
      #tput setaf 127 | cat -v  #capturar saida
      tput sgr0; bold=$(tput bold); reset=$(tput sgr0); red=$(tput setaf 1);
      green=$(tput setaf 2); yellow=$(tput bold)$(tput setaf 3); orange=$(tput setaf 3);
      #blue=$(tput setaf 4); pink=$(tput setaf 5); black=$(tput setaf 0);
      #cyan=$(tput setaf 6); white=$(tput setaf 7);
      #purple=$(tput setaf 125); violet=$(tput setaf 61);
   else
      bold=''; reset="\e[0m"; green="\e[1;32m"; red="\e[1;31m"; yellow="\e[1;33m"; orange="\e[1;33m";
#     pink="\033[35;1m"; black="\e[1;30m";violet="\e[1;35m"; white="\e[1;37m";blue="\e[1;34m";
#     cyan="\e[1;36m"; purple="\e[1;35m";
   fi
}

die()
{
	local msg=$1; shift
	printf '%s\n' ":: ${bold}${red}$msg${reset}" >&2
	exit 1
}

msg()
{
   local msg=$1; shift
   printf '%s\n' ":: ${bold}${green}$msg${reset}" >&2
   return
}

erro()
{
   local msg=$1; shift
   printf '%s\n' ":: ${bold}${yellow}$msg${reset}" >&2
   return
}

check_deps()
{
   local errorFound=0
   declare -a missing

   for d in "${DEPENDENCIES[@]}" ; {
      [[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}ERRO${reset}: não encontrei o comando ${orange}'$d'${reset}"
   }
   #[[ ${#missing[@]} -ne 0 ]]
   if (( errorFound )); then
      erro "#### IMPOSSÍVEL CONTINUAR ####"
      msg "Esse script precisa dos comandos listados acima" >&2
      msg "Instale-os e/ou verifique se estão no seu \$PATH" >&2
      exit 1
   fi
}

setvarcolors
# debug
#export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
check_deps
sh_setfont "$@"
