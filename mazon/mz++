#!/bin/bash

 # MZ++ - Search an Install packages LFS
 #
 # Created: 2019/04/05
 # Altered: 2019/04/27
 #
 # Copyright (c) 2019 - 2019, Diego Sarzi <diegosarzi@gmail.com>
 # Copyright (c) 2019 - 2019, Vilmar Catafesta <vcatafesta@gmail.com>
 # All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 # 1. Redistributions of source code must retain the above copyright
 #    notice, this list of conditions and the following disclaimer.
 # 2. Redistributions in binary form must reproduce the above copyright
 #    notice, this list of conditions and the following disclaimer in the
 #    documentation and/or other materials provided with the distribution.
 # 3. The name of the copyright holders or contributors may not be used to
 #    endorse or promote products derived from this software without
 #    specific prior written permission.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 # ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 # PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
 # HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 # SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 # LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 # DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 # THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#########################################################################
version="2.10.5.201905254.aleluia"

#hex code
barra=$'\x5c'
check=$'\0xfb'
reg=$'\0x2a'
SYSCONFDIR='/etc/apt'
NORMAL="\\033[0;39m"         # Standard console grey
SUCCESS="\\033[1;32m"        # Success is green
WARNING="\\033[1;33m"        # Warnings are yellow
FAILURE="\\033[1;31m"        # Failures are red
INFO="\\033[1;36m"           # Information is light cyan
BRACKET="\\033[1;34m"        # Brackets are blue
BMPREFIX="     "
SUCCESS_PREFIX="${SUCCESS}  *  ${NORMAL}"
FAILURE_PREFIX="${FAILURE}*****${NORMAL}"
WARNING_PREFIX="${WARNING} *** ${NORMAL}"
SKIP_PREFIX="${INFO}  S  ${NORMAL}"
SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
WARNING_SUFFIX="${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}"
SKIP_SUFFIX="${BRACKET}[${INFO} SKIP ${BRACKET}]${NORMAL}"
WAIT_PREFIX="${WARNING}  R  ${NORMAL}"
WAIT_SUFFIX="${BRACKET}[${WARNING} WAIT ${BRACKET}]${NORMAL}"
FAILURE_PREFIX="${FAILURE}  X  ${NORMAL}"
BOOTLOG=/tmp/bootlog-$USER
KILLDELAY=3
SCRIPT_STAT="0"

if [ -z "${COLUMNS}" ]; then
   COLUMNS=$(stty size)
   COLUMNS=${COLUMNS##* }
fi
if [ "${COLUMNS}" = "0" ]; then
   COLUMNS=80
fi

COL=$((${COLUMNS} - 8))
WCOL=$((${COL} - 2))
SET_COL="\\033[${COL}G"      # at the $COL char
SET_WCOL="\\033[${WCOL}G"    # at the $WCOL char
CURS_UP="\\033[1A\\033[0G"   # Up one line, at the 0'th char
CURS_ZERO="\\033[0G"

true=0
TRUE=0
false=1
FALSE=1
LINSTALLED=2
LREMOVED=3

colorize() {
    # prefer terminal safe colored and bold text when tput is supported
    if tput setaf 0 &>/dev/null; then
        ALL_OFF="$(tput sgr0)"
        BOLD="$(tput bold)"
        BLUE="${BOLD}$(tput setaf 4)"
        GREEN="${BOLD}$(tput setaf 2)"
        RED="${BOLD}$(tput setaf 1)"
        YELLOW="${BOLD}$(tput setaf 3)"
    else
        ALL_OFF="\e[0m"
        BOLD="\e[1m"
        BLUE="${BOLD}\e[34m"
        GREEN="${BOLD}\e[32m"
        RED="${BOLD}\e[31m"
        YELLOW="${BOLD}\e[33m"
    fi
    readonly ALL_OFF BOLD BLUE GREEN RED YELLOW
}

plain() {
    local mesg=$1; shift
    printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg() {
    local mesg=$1; shift
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg2() {
    local mesg=$1; shift
    printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
    local mesg=$1; shift
    printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
    local mesg=$1; shift
    printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

timespec()
{
   STAMP="$(echo `date +"%b %d %T %:z"` `hostname`) "
   return 0
}

log_info_msg()
{
    /bin/echo -n -e "${BMPREFIX}${@}"
    logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
    timespec
    /bin/echo -n -e "${STAMP} ${logmessage}" >> ${BOOTLOG}
    return 0
}

log_failure_msg2()
{
    echo -n -e "${BMPREFIX}${@}"
    echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
    echo "FAIL" >> ${BOOTLOG}
    return 0
}

log_success_msg2()
{
    echo -n -e "${BMPREFIX}${@}"
    echo -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
    echo " OK" >> ${BOOTLOG}
    return 0
}

log_wait_msg()
{
    echo -n -e "${BMPREFIX}${@}"
    echo -e "${CURS_ZERO}${WAIT_PREFIX}${SET_COL}${WAIT_SUFFIX}"
    echo " OK" >> ${BOOTLOG}
    return 0
}

evaluate_retval()
{
   local error_value="${?}"

   if [ ${error_value} = 0 ]; then
      log_success_msg2
   else
      log_failure_msg2
   fi
   return ${error_value}
}

info()
{
    dialog 				\
    --beep				\
    --title     "APT"	\
    --backtitle "APT"	\
    --msgbox    "$*"	\
    15 70
}

sh_touchconf(){
    mkdir -p $SYSCONFDIR &> /dev/null
    cat > $SYSCONFDIR/apt.conf << '_EOF_'
######################################################################
# Arquivo de configuracao
######################################################################

# extensao dos pacotes: chilios=chi, mazon=mz
PKG_EXT='mz'

# site de hospedagem da distro
#PKG_SITE='http://10.0.0.66'
#PKG_SITE='http://201.7.66.107'
PKG_SITE='http://mazonos.com'
_EOF_
}

fc=$SYSCONFDIR/apt.conf
test -e "$fc" || sh_touchconf
source /etc/apt/apt.conf &> /dev/null

# default
APP="apt"
PRG="${PKG_EXT:=chi}"
SITE="${PKG_SITE:=http://mazonos.com}"
VARCACHE="/var/cache/${APP}"
VARCACHE_ARCHIVES="/var/cache/${APP}/archives"
VARCACHE_REMOVED="/var/cache/${APP}/removed"
VARCACHE_INSTALLED="/var/cache/${APP}/installed"
VARCACHE_SEARCH="/var/cache/${APP}/search"
VARLIBBANANA_DESC="/var/lib/banana/desc"

declare -l BAIXA=${MENSAGEM}
declare -u ALTA=${MENSAGEM}

function toupper(){
    declare -u TOUPPER=${@}
    echo ${TOUPPER}
}

function tolower(){
    declare -l TOLOWER=${@}
    echo ${TOLOWER}
}

function now(){
    printf "%(%m-%d-%Y %H:%M:%S)T\n" $(date +%s)
}

function strzero(){
    printf "%0*d" $2 $1
}

function replicate()
{
    for c in $(seq 1 $2);
    do
        printf "%s" $1
    done
}

function maxcol()
{
    if [ -z "${COLUMNS}" ]; then
       COLUMNS=$(stty size)
       COLUMNS=${COLUMNS##* }
    fi
    return $COLUMNS
}

# Modulo para emular o comando cat
# Agradecimentos a SlackJeff
# https://github.com/slackjeff/bananapkg

function _CAT()
{
    # Tag para sinalizar que precisa parar.
    local end_of_file='EOF'

    INPUT=( "${@:-"%"}" )
    for i in "${INPUT[@]}"; do
        if [[ "$i" != "%" ]]; then
            exec 3< "$i" || exit 1
        else
            exec 3<&0
        fi
        while read -ru 3; do
            # END OF FILE. Para identificar que precisa parar.
            [[ "$REPLY" = "$end_of_file" ]] && break
            echo -E "$REPLY"
        done
    done
}

setvarcolors(){
    if tput setaf 1 &> /dev/null; then
        tput sgr0; # reset colors
        bold=$(tput bold);
        reset=$(tput sgr0);
        black=$(tput setaf 0);
        blue=$(tput setaf 33);
        cyan=$(tput setaf 37);
        green=$(tput setaf 64);
        orange=$(tput setaf 166);
        purple=$(tput setaf 125);
        red=$(tput setaf 124);
        violet=$(tput setaf 61);
        white=$(tput setaf 15);
        yellow=$(tput setaf 136);
		pink="\033[35;1m";
    else
        bold='';
        reset="\e[0m";
        black="\e[1;30m";
        blue="\e[1;34m";
        cyan="\e[1;36m";
        green="\e[1;32m";
        orange="\e[1;33m";
        purple="\e[1;35m";
        red="\e[1;31m";
        violet="\e[1;35m";
        white="\e[1;37m";
        yellow="\e[1;33m";
		pink="\033[35;1m";
    fi
}

sh_msgdoevangelho()
{
    local total
    local id
    local msg

    frases=(
        "Seja fiel até a morte, e eu te darei a coroa da vida! Ap 2:10"
        "O que adianta o homem ganhar o mundo inteiro e perder sua alma?"
        "Deus está com você!"
        "Deus não falha!"
        "A recompensa é boa!"
        "A recompensa é eterna!"
        "As dificuldades e os sofrimentos vão passar"
        "Não desista, Deus tem grandes planos para você"
    )
    total=${#frases[@]}
    id=$(( $RANDOM % $total ))
    msg="${frases[$id]}"
    echo -e "${blue}${msg}${reset}\n"
}

sh_list()
{
	local LLIST=$true
	local param=$@
    local s

	sh_checkdir "OFF"
	log_wait_msg "${blue}Reading package lists in the repository..."

	if [[ "${param}" == "" ]] || [[ $(toupper "${param}") = "ALL" ]] || [[ $(toupper "${param}") = "ALL OFF" ]]; then
		pkg=$(cat $VARCACHE_SEARCH/folders_packages)
	else
        for s in ${param[@]}
        do
	        if [[ $(toupper "${s}") = "-Y" ]] || [[ $(toupper "${s}") = "-F" ]]; then
               LAUTO=$true
	        elif [[ $(toupper "${s}") = "OFF" ]]; then
               LLIST=$false
            else
                #a=$(cat $VARCACHE_SEARCH/folders_packages | sed '/'$s'/!d')
                pkg="$pkg $(grep $s $VARCACHE_SEARCH/folders_packages)"
            fi
        done
	fi

	log_wait_msg "${blue}Listing..."
	pkgCheckNumber=0
	if [[ $pkg != "" ]]; then
		for i in $pkg; do
			[[ $LLIST = $true ]] && log_success_msg2 "${blue}FOUND ${orange}$i"
			((pkgCheckNumber++))
		done
		 [[ $LLIST = $true ]] && log_success_msg2 "($pkgCheckNumber) package(s) found."
	else
		 log_failure_msg2 "${red}$param NOT FOUND ${reset} ${orange}$i${reset}"
		 log_failure_msg2 "($pkgCheckNumber) package(s) found."
		 echo
		 echo -e "${reset}Use: # $0 update - to update with the repository${reset}"
	fi
	sh_cdroot
}

sh_cdroot()
{
	cd - >/dev/null 2>&1
}

sh_checknet()
{
	 # have internet?
	log_info_msg "${cyan}Testing internet"
#   ping -c3 -q $(echo $SITE | sed 's/http:\/\///g') >/dev/null 2>&1 || { evaluate_retval; log_failure_msg2 "No route to server ($SITE) - ABORTED."; return 1 ;}
#   curl -k "www.google.com" >/dev/null 2>&1 || { evaluate_retval; log_failure_msg2 "No route to server ($SITE) - ABORTED."; return 1 ;}
    curl -k $SITE >/dev/null 2>&1 || { evaluate_retval; log_failure_msg2 "No route to server ($SITE) - ABORTED."; return 1 ;}
    evaluate_retval
	return $?
}

sh_updateself()
{
	local LAUTO=$false

	[[ $(toupper "${1}") = "-Y" ]] && LAUTO=$true || LAUTO=$false

	if [ ${LAUTO} = $false ]; then
		conf "Update $0 from internet?"
		LAUTO=$?
	fi

	if [ $LAUTO = $true ]; then
	    local link='https://raw.githubusercontent.com/vcatafesta/mz/master/src/apt'
	    local tmp_dir_full="/tmp/${APP}"
	    local tmp_dir="/tmp/${APP}/src"
	    local m

		#internet?
        sh_checknet; [[ $? = $true ]] || { return 1;}
        log_wait_msg "Ok, let's do it..."
        # Ok, Puxe o arquivo do repositorio agora!
        [[ -d "${tmp_dir_full}" ]] && rm -r "${tmp_dir_full}"
        test -d "${tmp_dir}" || mkdir -p "${tmp_dir}"
        pushd "${tmp_dir}" &>/dev/null
        log_info_msg "${cyan}Clonando $link"
        curl -k --silent -O "${link}"
        evaluate_retval

        log_info_msg "${cyan}Permission and Copy archives"
        chmod +x ${tmp_dir}/apt
        evaluate_retval

        log_info_msg "${cyan}Copying file ${yellow}apt ${red}to ${yellow}/sbin/$m"
        cp -f ${tmp_dir}/apt /sbin/apt
        rm -f /sbin/mz
        ln -sf /sbin/apt /sbin/mz
        evaluate_retval

        log_info_msg "${cyan}Removing temporary files"
        [[ -d "${tmp_dir_full}" ]] && rm -r "${tmp_dir_full}"
        evaluate_retval
        log_info_msg "${violet}$0 updated successfully, enjoy!"
        evaluate_retval
        exit 0
	fi
	return 1
	sh_cdroot
}

spinner()
{
	spin=('\' '|' '/' '-' '+')

	while :; do
		for i in "${spin[@]}"; do
			echo -ne "${cyan}\r$i${reset}"
			#sleep 0.1
		done
	done
}

sh_checkroot()
{
	if [ "$(id -u)" != "0" ]; then
		log_failure_msg2 "Please run root."
		exit
	fi
}

sh_version()
{
	echo -e "$0 $version"
    echo -e "Copyright (c) 2019 - 2019, Vilmar Catafesta ${pink}<vcatafesta@gmail.com>${reset}"
    sh_msgdoevangelho
}

help()
{
	echo -e "${cyan}Most used commands:"
	echo -e "${pink}  -h, --help,           help           ${reset}- display this help and exit"
	echo -e "${pink}  -u, --update,         update         ${reset}- Update list packages in repository online. Need Internet"
	echo -e "${pink}  -i, --install,        install        ${reset}- install packages"
	echo -e "${pink}  -m, --meta,           meta           ${reset}- install meta packages"
	echo -e "${pink}  -r, --remove,         remove         ${reset}- remove packages"
	echo -e "${pink}  -c, --clean,          clean          ${reset}- erase downloaded packages files"
	echo -e "${pink}  -s, --search,         search         ${reset}- Search for package"
	echo -e "${pink}  -l, --list,           list           ${reset}- list avaiable packages based on package names"
	echo -e "${pink}  -ll,--list-avaiable,  list-avaiable  ${reset}- list avaiable packages based on package names"
	echo -e "${pink}  -li,--list-installed, list-installed ${reset}- list installed packages"
	echo -e "${pink}  -lr,--list-removed,   list-removed   ${reset}- list packages removed by $0"
	echo -e "${pink}  -w, --show,           show           ${reset}- show package details"
	echo -e "${pink}  -d, --download,       download       ${reset}- only download the binary package into cache directory"
	echo -e "${pink}  -R, --reinstall,      reinstall      ${reset}- reinstal packages"
	echo -e "${pink}  -U, --upgrade,        upgrade        ${reset}- upgrade packages"
	echo -e "${pink}  -v, --version,        version        ${reset}- output version information and exit"
	echo
	echo -e "${cyan}ex:"
	echo -e "${yellow}  apt update self - Update self apt via internet"
	echo -e "  apt update"
	echo -e "  apt install <package> [...] [-y]"
	echo -e "  apt remove <package> [...] [-y]"
	echo -e "  apt <package> [...] [-y]"
	echo -e "  apt search <package> [...]"
	echo -e "  apt list [<package>] [<...>]"
	echo -e "  apt download [<package>] [...] [ALL]"
	echo -e "  apt --meta [xorg]"
	exit
}

sh_upgrade()
{
	echo -e "$0 $version"
	echo
	echo -ne "${cyan}Sorry, not implemented yet"
	echo
	echo
	exit
}

init()
{
	case "${1}" in
		-u|--update|update) 					shift;sh_update "$@";;
		-m|--meta|meta)	                        sh_meta   $2 $3;;
		-s|--search|search)	                    shift;sh_search "$@";;
		-i|--install|install) 					shift;sh_search "$@";;
		-r|--remove|remove) 					shift;sh_remove "$@";;
		-R|--reinstall|reinstall) 				shift;sh_search "$@";;
		-d|--download|download) 				shift;sh_download "$@";;
		-l|--list|list)    	 					shift;sh_list "$@";;
		-la|--list-avaiable|list-avaiable) 		shift;sh_list "$@";;
		-ll|--list-avaiable|list-avaiable) 		shift;sh_list "$@";;
		-lr|--list-removed|list-removed)		sh_removed $2 $3;;
		-li|--list-installed|list-installed)	shift;sh_listinstalled "$@";;
		-c|--clean|clean)  						sh_clean $2;;
		-w|--show|show) 						shift;sh_show "$@";;
		-U|--upgrade|upgrade) 					sh_upgrade;;
		-v|--version|version) 					exit;;
		*) 										sh_search "$@";;
	esac
}

conf()
{
	local lconf="n"
	read -p "$1 [Y/n]" lconf
	if [[ $lconf = "" ]] || [ $lconf = 'y' ] || [ $lconf = 'Y' ]; then
		return 0
	fi
	return 1
}

sh_clean()
{
	local LAUTO=$false
	local lReturn=$false

	[[ $(toupper "${1}") = "-Y" ]] && LAUTO=$true || LAUTO=$false

	if [ ${LAUTO} = $false ]; then
		conf "Clear cache packages?"
		LAUTO=$?
	fi

	if [ $LAUTO = $true ]; then
		log_info_msg "Deleting downloaded package files"
		test -d $VARCACHE_ARCHIVES || mkdir -p $VARCACHE_ARCHIVES
		cd $VARCACHE_ARCHIVES/
#		local nfiles=$(ls|wc -l)
		local nfiles=$(ls -la|grep -e "^-"|wc -l)
		rm -f $VARCACHE_ARCHIVES/*
		evaluate_retval
		log_success_msg2 "${yellow}($nfiles) ${cyan}files deleted"
		lReturn=$true
		return $lReturn
	fi
	sh_cdroot
	return $lReturn
}

sh_checkdir(){
	log_wait_msg "Checking job directories"
	if [ $# -lt 1 ]; then
		log_info_msg "$VARCACHE_ARCHIVES" ; test -d $VARCACHE_ARCHIVES  && evaluate_retval || { mkdir -p $VARCACHE_ARCHIVES  >/dev/null 2>&1; evaluate_retval; }
		log_info_msg "$VARCACHE_REMOVED"  ; test -d $VARCACHE_REMOVED   && evaluate_retval || { mkdir -p $VARCACHE_REMOVED   >/dev/null 2>&1; evaluate_retval; }
		log_info_msg "$VARCACHE_INSTALLED"; test -d $VARCACHE_INSTALLED && evaluate_retval || { mkdir -p $VARCACHE_INSTALLED >/dev/null 2>&1; evaluate_retval; }
		log_info_msg "$VARCACHE_SEARCH"   ; test -d $VARCACHE_SEARCH    && evaluate_retval || { mkdir -p $VARCACHE_SEARCH    >/dev/null 2>&1; evaluate_retval; }
	else
		test -d $VARCACHE_ARCHIVES  || mkdir -p $VARCACHE_ARCHIVES  >/dev/null 2>&1
		test -d $VARCACHE_REMOVED   || mkdir -p $VARCACHE_REMOVED   >/dev/null 2>&1
		test -d $VARCACHE_INSTALLED || mkdir -p $VARCACHE_INSTALLED >/dev/null 2>&1
		test -d $VARCACHE_SEARCH    || mkdir -p $VARCACHE_SEARCH    >/dev/null 2>&1
	fi
	return $?
}

sh_update()
{
    [[ $(toupper "${1}") = "SELF" ]] || [[ $(toupper "${1}") = "MZ" ]] && { sh_updateself $2; return $?;}

	#internet?
	sh_checknet; [[ $? = $true ]] || { return 1;}
	sh_checkdir "OFF"

	cd $VARCACHE_SEARCH/

	log_info_msg "Cleaning up $VARCACHE_SEARCH/"
	rm -f $VARCACHE_SEARCH/folders
	rm -f $VARCACHE_SEARCH/folders_packages
	rm -f $VARCACHE_SEARCH/packages
	rm -f $VARCACHE_SEARCH/folders_metapackages
	rm -f $VARCACHE_SEARCH/metapackages
	evaluate_retval

	log_info_msg "Updating Folders..."
	curl -k --silent --url "${SITE}/packages/"| grep "/</a" | grep '[a-z]' | sed 's/<[^>]*>//g'| cut -d/ -f1|sed 's/^[ \t]*//;s/[ \t]*$//' > ${VARCACHE_SEARCH}/folders
	evaluate_retval

	log_wait_msg "${pink}Updating packages lists...${reset}"
	FoldersInRepo=$(cat $VARCACHE_SEARCH/folders)

	touch folders_packages
	touch packages
	touch folders_metapackages
	touch metapackages
	spinner & pid=$!
	local Folders
	for Folders in $FoldersInRepo; do
		PackagesInFolders=$(curl -k --silent --url "${SITE}/packages/${Folders}/"|sed 's/^.*href="//' | sed 's/".*$//' | grep ".${PRG}$" | awk '{print $1}')
		MetaPkgInFolders=$(curl -k --silent --url "${SITE}/packages/${Folders}/"|sed 's/^.*href="//' | sed 's/".*$//' | grep ".meta$" | awk '{print $1}')

		local count=0
		for pkgInFolder in $PackagesInFolders; do
			echo "${Folders}/${pkgInFolder}" >> folders_packages
			echo "${pkgInFolder}"            >> packages
			((count++))
		done
		for MetaInFolder in $MetaPkgInFolders; do
			echo "${Folders}/${MetaInFolder}" >> folders_metapackages
			echo "${MetaInFolder}"            >> metapackages
			((count++))
		done

        cstrvalue=$(strzero ${count} 5)
		[[ ${count} =  0 ]] || log_success_msg2 "  Updating... (${blue}${cstrvalue}${reset}) packages in ${Folders}"
		[[ ${count} != 0 ]] || log_failure_msg2 "  Updating... (${blue}${cstrvalue}${reset}) packages in ${Folders}"
	done
	{ kill $pid; wait $pid 2>/dev/null; echo ;}
    sh_updateinstalled
    echo
	nfilesInReposit=$(cat $VARCACHE_SEARCH/folders_packages | wc -l)
	nfilesInstalled=$(cat $VARCACHE_SEARCH/packages-installed | wc -l)
	nfilesRemoved=$(cat $VARCACHE_SEARCH/packages-removed | wc -l)

	echo -e "${cyan}All list packages updated!${reset}"
    #maxcol; replicate "=" $?
	echo -e "${blue}($nfilesInReposit) packages in repository${reset}"
	echo -e "${green}($nfilesInstalled) packages installed${reset}"
	echo -e "${red}($nfilesRemoved) packages removed by $0${reset}"
    #maxcol; replicate "=" $?
	echo -e ${reset}

	#conf "List out-of-cache packages?"
	#[[ $? = $true ]] && sh_pkgoutcache

	echo -e "${reset}Use: # $0 --help for helping${reset}"
	echo
	sh_cdroot
	exit
}

sh_FilesInCache()
{
	local nfilesincache=0
	pushd $VARCACHE_ARCHIVES/ &>/dev/null
	aCache=($(echo *.${PRG}))
	[ ${aCache[0]} = "*.${PRG}" ] && aCache=()
	test -e $VARCACHE_SEARCH/packages-in-cache || rm -f $VARCACHE_SEARCH/packages-in-cache
	touch $VARCACHE_SEARCH/packages-in-cache
	for item in ${aCache[*]}; do
    	echo $item >> $VARCACHE_SEARCH/packages-in-cache
	done
	popd  &>/dev/null
	nfilesincache=${#aCache[*]}
	return $nfilesincache
}

sh_pkgoutcache(){
	log_wait_msg "Ok, let's do it..."
	log_info_msg "Wait, doing some calculations..."

	sh_FilesInCache
	local nfilesincache=${?}
	evaluate_retval

	local aPkgOut=()
	local aRepository=$(_CAT $VARCACHE_SEARCH/packages)
	local x
	local y
	local index=0
	local lfind=$false

	for x in ${aRepository[*]};do
		lfind=$false
		for y in ${aCache[*]};do
			if [ $x = $y ]; then
				lfind=$true
				break
			fi
		done
		if [ $lfind = $false ]; then
			aPkgOut[$index]=$x
			((index++))
		fi
    done
	local nfilesoutcache=${#aPkgOut[*]}
	[ $nfilesoutcache <> 0 ] || maxcol; replicate "=" $?
    index=1
	for y in ${aPkgOut[*]}
	do
		log_failure_msg2 "NOT IN CACHE: [$index]${orange}$y${reset}"
		((index++))
	done
	[ $nfilesoutcache <> 0 ] || maxcol; replicate "=" $?
	echo -e "${yellow}($nfilesincache)  ${cyan}packages in cache"
	echo -e "${yellow}($nfilesoutcache) ${cyan}packages in repository e out cache"
	return 0
}

sh_show()
{
	local param=$@
	local LFORCE=$false
	local pkgCheckNumber=0

	log_wait_msg "Reading package lists..."
	sh_checkdir "OFF"

	if [[ "${param}" == "" ]] || [[ $(toupper "${param}") = "ALL" ]]; then
		pkg=$(cat $VARCACHE_SEARCH/folders_packages)
	else
        for s in ${param[@]}
        do
	        if [[ $(toupper "${s}") = "-Y" ]] || [[ $(toupper "${s}") = "-F" ]]; then
               LFORCE=$true
            else
                #a=$(cat $VARCACHE_SEARCH/folders_packages | sed '/'$s'/!d')
                pkg="$pkg $(grep $s $VARCACHE_SEARCH/folders_packages)"
            fi
        done
	fi

	log_wait_msg "Listing..."
	if [[ $pkg != "" ]]; then
		for i in $pkg; do
			log_success_msg2 "${green}FOUND ${reset} ${orange}$i${reset}"
			((pkgCheckNumber++))

       		log_success_msg2 "($pkgCheckNumber) file(s) found."
    		local cfile=$i
    		local cbase=$(echo $cfile | cut -d/ -f1)
    		local cpacote=$(echo $cfile | cut -d/ -f2)".desc"

    		cd $VARCACHE_ARCHIVES/

    		log_info_msg "${green}Downloading... $cpacote${reset}"
    		if [ $LFORCE = $true ]; then
    			curl -s -k -O "${SITE}/packages/$cbase/$cpacote"
    		else
    			test -e $VARCACHE_ARCHIVES/$cpacote || curl -s -k -O "${SITE}/packages/$cbase/$cpacote"
    		fi
    		evaluate_retval
    		local error_value="${?}"

    		if [ ${error_value} = 0 ]; then
    			log_wait_msg "${blue}Dumping... $cpacote${reset}"
    			echo -e "${cyan}"
    			_CAT $VARCACHE_ARCHIVES/$cpacote
    			echo -e "${reset}"
    		else
    			log_failure_msg2 "${red}ERROR Downloading... $cpacote${reset}"
    		fi

		done
	else
		log_failure_msg2 "${red}$param NOT FOUND${reset} ${orange}$i${reset}"
		log_failure_msg2 "($pkgCheckNumber) file(s) found."
	fi
	sh_cdroot
}

sh_remove()
{
	LAUTO=$false
    local param=$@

	sh_listinstalled ${param}

	local lExist=$?
	[ $lExist -eq 0 ] && return 1

	if [[ $pkginstalled != "" ]]; then
        if [[ $LAUTO = $false ]]; then
		    echo
			read -p "Remove package(s)? [y/N]" LREMOVE
		fi

		test -d $VARCACHE_ARCHIVES || mkdir -p $VARCACHE_ARCHIVES
    	cd $VARCACHE_ARCHIVES/

		for i in $pkginstalled; do
			declare -g ee=$i
			local cfile=$i
			local cbase=$(echo $cfile | cut -d/ -f1)
			local cpacote=$(echo $cfile | cut -d/ -f2)

			if [[ $LAUTO = $true ]] || [[ $(toupper "${LREMOVE}") = "Y" ]]; then
		        log_wait_msg "Parsing..."
		        log_info_msg "Removing package ${orange}${i}..."
		        ERROR=$(banana -r -y $i 2>&1)
		        evaluate_retval
		        local error_value="${?}"
		        if [ ${error_value} != 0 ]; then
		            log_failure_msg2 "$ERROR"
		        else
					test -e $VARCACHE_REMOVED/${i}.${PRG}   || touch $VARCACHE_REMOVED/${i}.${PRG}
					test -e $VARCACHE_INSTALLED/${i}.${PRG} && rm -f $VARCACHE_INSTALLED/${i}.${PRG}
		            log_success_msg2 "Removal of the package (${orange}${i}${reset}) successfully completed"
		        fi
			fi
		done
		sh_cdroot
		return 0
	fi
	#echo -e "Choose one package for remove"
	sh_cdroot
}

sh_download()
{
	[[ $(toupper "${1}") = "ALL" ]] && LALL=$true   || LALL=$false
	[[ $(toupper "${2}") = "-F"  ]] && LFORCE=$true || LFORCE=$false

	sh_list $@ "OFF"
	local nFilesDownloaded=0
	local nTotalFiles=$pkgCheckNumber
	local cspace=$(printf "%20s" ' ')

	# Check package exist.
	if [[ $pkg != "" ]]; then
		if [ $# -ge 1 ]; then
			if [ ${LALL} = $true ]; then
				pkgCheckNumber='1'
			fi
		fi

		#internet?
		#sh_checknet; [[ $? = $true ]] || { return 1;}
		spinner & pid=$!
		for i in $pkg; do
			declare -g ee=$i
			local cfile=$i
			local cbase=$(echo $cfile | cut -d/ -f1)
			local cpacote=$(echo $cfile | cut -d/ -f2)

			## Download package.
			((nFilesDownloaded++))

			cd $VARCACHE_ARCHIVES/
			log_wait_msg "File ${red}#${nFilesDownloaded} of ${nTotalFiles}${reset}|Checking package ${orange}${cpacote} ${cspace}"

			if [ ${LFORCE} = $true ]; then
				curl -k --silent -O "${SITE}/packages/$i"       ;log_info_msg "[$nFilesDownloaded]${orange}${cpacote}${reset} downloading now!" ; evaluate_retval;
				curl -k --silent -O "${SITE}/packages/$i.desc"  ;log_info_msg "   ${cpacote}.desc downloading now!"   ; evaluate_retval;
				curl -k --silent -O "${SITE}/packages/$i.sha256";log_info_msg "   ${cpacote}.sha256 downloading now!" ; evaluate_retval;
				curl -k --silent -O "${SITE}/packages/$i.sig"   ;log_info_msg "   ${cpacote}.sig downloading now" ; evaluate_retval;
			else
				test -e $VARCACHE_ARCHIVES/$cpacote        && log_success_msg2 "[$nFilesDownloaded]${orange}${i}${reset} already downloaded!" || { curl -k --silent -O "${SITE}/packages/$i" ;log_info_msg "[$nFilesDownloaded]${orange}$cpacote${reset} downloading now!" ; evaluate_retval;}
				test -e $VARCACHE_ARCHIVES/$cpacote.desc   && log_success_msg2 "   ${i}.desc already downloaded!"   || { curl -k --silent -O "${SITE}/packages/$i.desc"  ;log_info_msg "   ${cpacote}.desc downloading now!"   ; evaluate_retval;}
				test -e $VARCACHE_ARCHIVES/$cpacote.sha256 && log_success_msg2 "   ${i}.sha256 already downloaded!" || { curl -k --silent -O "${SITE}/packages/$i.sha256";log_info_msg "   ${cpacote}.sha256 downloading now!" ; evaluate_retval;}
				test -e $VARCACHE_ARCHIVES/$cpacote.sig    && log_success_msg2 "   ${i}.sig already downloaded!"    || { curl -k --silent -O "${SITE}/packages/$i.sig"   ;log_info_msg "   ${cpacote}.sig downloading now!"    ; evaluate_retval;}
			fi

		done
		{ kill $pid; wait $pid 2>/dev/null; echo ;}
		echo ""
		log_success_msg2 "${cyan}($nFilesDownloaded) packages(s) downloaded."
	else
		echo
		echo "Choose one package for download or install."
	fi
	sh_cdroot
}

sh_wgetfull()
{
	log_info_msg "${cyan}Downloading ${cpacote}"       ; evaluate_retval; curl -k -O "${SITE}/packages/$i"
	log_info_msg "${cyan}Downloading ${cpacote}.sha256"; evaluate_retval; curl -k -O "${SITE}/packages/$i.sha256"
	log_info_msg "${cyan}Downloading ${cpacote}.desc"  ; evaluate_retval; curl -k -O "${SITE}/packages/$i.desc"
	log_info_msg "${cyan}Downloading ${cpacote}.sig"   ; evaluate_retval; curl -k -O "${SITE}/packages/$i.sig"
}

sh_wgetpartial()
{
	test -e $VARCACHE_ARCHIVES/$cpacote       || log_info_msg "${cyan}Downloading ${cpacote}"       ; evaluate_retval; curl -k -O -C - "${SITE}/packages/$i"
	test -e $VARCACHE_ARCHIVES/$cpacote.sha26 || log_info_msg "${cyan}Downloading ${cpacote}.sha256"; evaluate_retval; curl -k -O -C - "${SITE}/packages/$i.sha256"
	test -e $VARCACHE_ARCHIVES/$cpacote.desc  || log_info_msg "${cyan}Downloading ${cpacote}.desc"  ; evaluate_retval; curl -k -O -C - "${SITE}/packages/$i.desc"
	test -e $VARCACHE_ARCHIVES/$cpacote.sig   || log_info_msg "${cyan}Downloading ${cpacote}.sig"   ; evaluate_retval; curl -k -O -C - "${SITE}/packages/$i.sig"
}

sh_checksha256sum()
{
	log_info_msg "Checking sha256sum..."
	ERROR=$(sha256sum -c ${cpacote}.sha256 2>&1>/dev/null)
	evaluate_retval
	return $?
}

sh_search()
{
    local param=$@
	LAUTO=$false

    sh_list $param

	if [[ $pkg != "" ]]; then
        if (( $LAUTO )); then
            echo
            read -p "Install Pakages(s)? [Y/n]" LDOWNLOAD
            if [[ $(toupper "${LDOWNLOAD}") = "N" ]]; then
                return
            fi
        fi

		cd $VARCACHE_ARCHIVES/
        for i in $pkg; do
		    declare -g ee=$i
			local cfile=$i
			local cbase=$(echo $cfile | cut -d/ -f1)
			local cpacote=$(echo $cfile | cut -d/ -f2)

			test -e $VARCACHE_ARCHIVES/$cpacote || sh_wgetfull
			#sh_checksha256sum

		    local error_value="${?}"
			if [ ${error_value} -ne 0 ]; then
				log_failure_msg2 "ERROR: Checking sha256sum ${cpacote}.sha256... FAIL"
				log_wait_msg "Restarting download ${cpacote}..."
				sh_wgetfull
				sh_checksha256sum
			    local error_value="${?}"
				if [ ${error_value} -ne 0 ]; then
					log_failure_msg2 "ERROR: Checking sha256sum ${cpacote}.sha256... FAIL. Aborting..."
					exit 1
				fi
			fi

			log_info_msg "Installing package ${orange}$cpacote..."
			ERROR=$(banana -i $cpacote 2>&1>/dev/null)
		    evaluate_retval

		    local error_value="${?}"
			if [ ${error_value} -ne 0 ]; then
				log_failure_msg2 "ERROR: installing package ${orange}${cpacote}... FAIL"
		    else
				test -e $VARCACHE_REMOVED/${cpacote}   && rm -f $VARCACHE_REMOVED/${cpacote}
				test -e $VARCACHE_INSTALLED/${cpacote} || touch $VARCACHE_INSTALLED/${cpacote}
				log_success_msg2 "${orange}${cpacote} ${reset}package installation done successfully...Done"
			fi
    	done
	fi
	sh_cdroot
}

sh_listmeta()
{
	sh_checkdir "OFF"
	log_wait_msg "${blue}Reading meta package lists in the repository..."
	param=$1
	local LLIST=$true
    local Cont=0

	if [ "$param" == "" ]; then
		param=".*."
	fi

	if [ "$param" == "all" ]; then
		metapkg=$(cat $VARCACHE_SEARCH/folders_metapackages)
	else
		metapkg=$(grep $param $VARCACHE_SEARCH/folders_metapackages)
	fi

	[[ $(toupper "${2}") = "OFF" ]] && LLIST=$false || LLIST=$true

	log_success_msg2 "${blue}Listing... Done"

	if [[ $metapkg != "" ]]; then
		for i in $metapkg; do
			[[ $LLIST = $true ]] && log_success_msg2 "${blue}FOUND ${orange}$i"
			((Cont++))
		done
		 [[ $LLIST = $true ]] && log_success_msg2 "($Cont) package(s) found."
	else
		 log_failure_msg2 "${red}$param NOT FOUND ${reset} ${orange}$i${reset}"
		 log_failure_msg2 "($Cont) package(s) found."
		 echo
		 echo -e "${reset}Use: # $0 update - to update with the repository${reset}"
	fi
	sh_cdroot
}

sh_meta()
{
	local LAUTO=$false
	local PAUTO=$2
    sh_listmeta $1

	[[ $(toupper "${PAUTO}") = "-Y" ]] || [[ $(toupper "${PAUTO}") = "-F" ]] && LAUTO=$true || LAUTO=$false

	if [[ $metapkg != "" ]]; then
        if [ $LAUTO = $false ]; then
            echo
            read -p "Install meta package(s)? [Y/n]" LDOWNLOAD
        fi

        if [[ $(toupper "${LDOWNLOAD}") = "Y" ]] || [[ "${LDOWNLOAD}" = "" ]]; then
            LAUTO=$true
        else
            return
        fi

		cd $VARCACHE_ARCHIVES/
        for x in $metapkg; do
			local cmetafile=$i
			local cmetabase=$(echo $cmetafile | cut -d/ -f1)
			local cmetapacote=$(echo $cmetafile | cut -d/ -f2)

            curl --silent -k -O "${SITE}/packages/$x"
            pkg=$(cat $cmetapacote)

            for i in $pkg; do
    		    declare -g ee=$i
    			local cfile=$i
    			local cbase=$(echo $cfile | cut -d/ -f1)
    			local cpacote=$(echo $cfile | cut -d/ -f2)

    			test -e $VARCACHE_ARCHIVES/$cpacote || sh_wgetfull
    			sh_checksha256sum

    		    local error_value="${?}"
    			if [ ${error_value} -ne 0 ]; then
    				log_failure_msg2 "ERROR: Checking sha256sum ${cpacote}.sha256... FAIL"
    				log_wait_msg "Restarting download ${cpacote}..."
    				sh_wgetfull
    				sh_checksha256sum
    			    local error_value="${?}"
    				if [ ${error_value} -ne 0 ]; then
    					log_failure_msg2 "ERROR: Checking sha256sum ${cpacote}.sha256... FAIL. Aborting..."
    					exit 1
    				fi
    			fi

    			log_info_msg "Installing package ${orange}$cpacote..."
    			ERROR=$(banana -i $cpacote 2>&1>/dev/null)
    		    evaluate_retval

    		    local error_value="${?}"
    			if [ ${error_value} -ne 0 ]; then
    				log_failure_msg2 "ERROR: installing package ${orange}${cpacote}... FAIL"
    		    else
    				test -e $VARCACHE_REMOVED/${cpacote}   && rm -f $VARCACHE_REMOVED/${cpacote}
    				test -e $VARCACHE_INSTALLED/${cpacote} || touch $VARCACHE_INSTALLED/${cpacote}
    				log_success_msg2 "${orange}${cpacote} ${reset}package installation done successfully...Done"
    			fi
        	done
    	done
	fi
	sh_cdroot
}

sh_updateinstalled()
{
	local pkgNumber=0
    local s

	#sh_checkdir "OFF"
	log_wait_msg "${pink}Reading lists of installed packages..."
	param=$@

	log_info_msg "${green}Checking packages"
	pushd $VARCACHE_INSTALLED/ &>/dev/null
	aCache=($(echo *.${PRG}))

	rm -f $VARCACHE_SEARCH/packages-installed
	for item in ${aCache[*]}; do
    	echo $item|sed 's/.'${PRG}'//g' >> $VARCACHE_SEARCH/packages-installed
	done
	popd  &>/dev/null

	pushd $VARLIBBANANA_DESC/ &>/dev/null
	aCachedesc=($(echo *.desc))

	#rm -f $VARCACHE_SEARCH/packages-installed
	for item in ${aCachedesc[*]}; do
    	echo $item|sed 's/.desc//g' >> $VARCACHE_SEARCH/packages-installed
	done
	popd  &>/dev/null

  	cat $VARCACHE_SEARCH/packages-installed|sort|uniq >/tmp/packages-installed
  	cp /tmp/packages-installed $VARCACHE_SEARCH/packages-installed
  	rm -f /tmp/packages-installed

	local nfilesinstalled=${#aCache[*]}
	evaluate_retval

}

sh_listinstalled()
{
	local pkgNumber=0
    local s
    local param=$@

	if [[ "${param}" == "" ]] || [[ $(toupper "${param}") = "ALL" ]]; then
		pkginstalled=$(cat $VARCACHE_SEARCH/packages-installed)
	else
        for s in ${param[@]}
        do
	        if [[ $(toupper "${s}") = "-Y" ]] || [[ $(toupper "${s}") = "-F" ]]; then
               LAUTO=$true
            else
                #a=$(cat $VARCACHE_SEARCH/folders_packages | sed '/'$s'/!d')
                pkginstalled="$pkginstalled $(grep $s $VARCACHE_SEARCH/packages-installed)"
            fi
        done
	fi

	log_wait_msg "${green}Listing..."
	if [[ $pkginstalled != "" ]]; then
		for i in $pkginstalled; do
			log_success_msg2 "${green}FOUND ${orange}$i${reset}"
			((pkgNumber++))
		done
		log_success_msg2 "($pkgNumber) package(s) installed."
	else
		log_failure_msg2 "${red}$param NOT INSTALLED with $0${reset}"
		log_failure_msg2 "($pkgNumber) package(s) found."
		echo
		echo -e "${reset}Use: # $0 update - to update with the repository${reset}"
	fi
	sh_cdroot
	return $pkgNumber
}

sh_installed()
{
    local param=$@
	sh_listinstalled $param

	if [[ $pkginstalled != "" ]]; then
		for i in $pkginstalled; do
			local cfile=$i
			local cbase=$(echo $cfile | cut -d/ -f1)
			local cpacote=$(echo $cfile | cut -d/ -f2)

			test -d $VARCACHE_ARCHIVES || mkdir -p $VARCACHE_ARCHIVES
			cd $VARCACHE_ARCHIVES/
            PS3='Please enter your choice: '
            options=("Reinstall" "Remove" "Quit")
            select opt in "${options[@]}"
            do
                case $opt in
                    "Reinstall")
    				    sh_search "-R" "$cpacote" "-Y"
                        return 2
                        ;;
                    "Remove")
                        sh_remove "$cpacote" "-Y"
      					return 2
                        ;;
                    "Quit|n|N")
                        exit 0
                        break
                        ;;
                    *) exit 0
                       break
                       echo "invalid option $REPLY";;
                    esac
                done
			done
#		fi
#		echo
#		echo "Choose one package for remove"
	fi
	sh_cdroot
}

sh_listremoved()
{
	sh_checkdir "OFF"
	log_wait_msg "Reading lists of removed packages..."
	param=$1
	if [ "$param" == "" ]; then
		param=".*."
	fi

	log_info_msg "Checking packages"
	pushd $VARCACHE_REMOVED/ &>/dev/null
	aCache=($(echo *.${PRG}))

	rm -f $VARCACHE_SEARCH/packages-removed
	for item in ${aCache[*]}; do
    	echo $item|sed 's/.'${PRG}'//g' >> $VARCACHE_SEARCH/packages-removed
	done
	popd  &>/dev/null
	local nfilesremoved=${#aCache[*]}
	evaluate_retval

	if [ "$param" == "all" ]; then
		pkgremoved=$(cat $VARCACHE_SEARCH/packages-removed)
	else
		pkgremoved=$(grep $param $VARCACHE_SEARCH/packages-removed)
	fi

	declare -g pkgNumber=0
	log_success_msg2 "Listing... Done"

	if [[ $pkgremoved != "" ]]; then
		for i in $pkgremoved; do
			log_success_msg2 "${green}FOUND ${reset} ${orange}$i${reset}"
			((pkgNumber++))
		done
		log_success_msg2 "($pkgNumber) package(s) removed by $0"
	else
		log_failure_msg2 "${red}$param NOT FOUND ${reset} ${orange}$i${reset}"
		log_failure_msg2 "($pkgNumber) package(s) removed by $0."
		echo
		echo -e "${reset}Use: # $0 update - to update with the repository${reset}"
	fi
	sh_cdroot
	return $pkgNumber
}

sh_removed()
{
	sh_listremoved $1

	if [[ $pkgremoved != "" ]]; then
		if [ $pkgNumber = '1' ]; then
			for i in $pkgremoved; do
				local cfile=$i
				local cbase=$(echo $cfile | cut -d/ -f1)
				local cpacote=$(echo $cfile | cut -d/ -f2)

				test -d $VARCACHE_ARCHIVES || mkdir -p $VARCACHE_ARCHIVES
				cd $VARCACHE_ARCHIVES/
				echo
				read -p "Reinstall package? [Y/n]" LINSTALL

				if [[ $(toupper "${LINSTALL}") = "Y" ]] || [[ $(toupper "${LINSTALL}") = "" ]]; then
					sh_search "$cpacote" "-Y"
					return 0
				fi

			done
		fi
		echo
		echo "Choose one package for install"
	fi
	sh_cdroot
}

#figlet
logo(){
	_CAT << 'EOF'
  __ _ _ __ | |_
 / _` | '_ \| __|
| (_| | |_) | |_
 \__,_| .__/ \__|
      |_|
EOF
	sh_version
}

setvarcolors
logo

if [[ $1 = "" ]] || [ $1 = "-h" ] || [ $1 = "--help" ] || [ $1 = "help" ]; then
	help
fi

sh_checkroot
init $*
