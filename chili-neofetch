#!/usr/bin/env bash
#shellcheck disable=SC2145,SC2001,SC2188,SC2015,SC2155,SC2317,SC2320,SC2291,SC2034,SC2016,SC2154,SC2207,SC2166,SC2128,SC2059
# chili-neofetch
#
# Created: 2019/04/05
# Altered: 2020/09/29
#
# Copyright (c) 2019 - 2019, Vilmar Catafesta <vcatafesta@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the copyright holders or contributors may not be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
# HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#########################################################################
#debug
export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e
_VERSION_="1.10.03.20230315"

sh_setvar() {
	if tput setaf 1 &> /dev/null; then
		tput sgr0; # reset colors
		bold=$(tput bold);
		reset=$(tput sgr0);
		black=$(tput setaf 0);
		blue=$(tput setaf 33);
		cyan=$(tput setaf 37);
		green=$(tput setaf 64);
		orange=$(tput setaf 166);
		purple=$(tput setaf 125);
		red=$(tput setaf 124);
		violet=$(tput setaf 61);
		white=$(tput setaf 15);
		yellow=$(tput setaf 136);
	else
		bold='';
		reset="\e[0m";
		black="\e[1;30m";
		blue="\e[1;34m";
		cyan="\e[1;36m";
		green="\e[1;32m";
		orange="\e[1;33m";
		purple="\e[1;35m";
		red="\e[1;31m";
		violet="\e[1;35m";
		white="\e[1;37m";
		yellow="\e[1;33m";
	fi

    if [ -z "${COLUMNS}" ]; then
       COLUMNS=$(stty size)
       COLUMNS=${COLUMNS##* }
    fi
    if [ "${COLUMNS}" = "0" ]; then
       COLUMNS=80
    fi

    declare -a aTux
    declare -a aInfo
}

sh_replicate() {
	for counter in $(seq 1 "$2"); do
		printf "%s" "$1"
	done
}

sh_getresolution() {
	# on:  '1920x1080 @ 60Hz'
	# off: '1920x1080'
	refresh_rate="on"

	if type -p xrandr >/dev/null && [[ $DISPLAY && -z $WAYLAND_DISPLAY ]]; then
		case $refresh_rate in
			"on")
				resolution="$(xrandr --nograb --current |\
					awk 'match($0,/[0-9]*\.[0-9]*\*/) {
					printf $1 " @ " substr($0,RSTART,RLENGTH) "Hz, "}')"
				;;
			"off")
				resolution="$(xrandr --nograb --current |\
					awk -F 'connected |\\+|\\(' \
					'/ connected.*[0-9]+x[0-9]+\+/ && $2 {printf $2 ", "}')"
					resolution="${resolution/primary, }"
					resolution="${resolution/primary }"
				;;
		esac
		resolution="${resolution//\*}"

	elif type -p xwininfo >/dev/null && [[ $DISPLAY && -z $WAYLAND_DISPLAY ]]; then
		read -r w h \
		<<< "$(xwininfo -root | awk -F':' '/Width|Height/ {printf $2}')"
		resolution="${w}x${h}"

	elif type -p xdpyinfo >/dev/null && [[ $DISPLAY && -z $WAYLAND_DISPLAY ]]; then
		resolution="$(xdpyinfo | awk '/dimensions:/ {printf $2}')"

	elif [[ -d /sys/class/drm ]]; then
		for dev in /sys/class/drm/*/modes; do
			read -r single_resolution _ < "$dev"

			[[ $single_resolution ]] && resolution="${single_resolution}, ${resolution}"
		done
	fi
	resolution="${resolution%%,}"
	resolution="${resolution%%, }"
	[[ -z "${resolution/x}" ]] && resolution=
	echo "$resolution"
}

sh_getshell() {
	shell="${SHELL##*/} "
	bash_version=$("$SHELL" -c "printf %s \"\$BASH_VERSION\"")
	shell+=${bash_version/-*}
	echo "$shell"
}

sh_getuptime() {
	local S
	local boot
	local now
	local cuptime

	if [[ -r /proc/uptime ]]; then
		s=$(< /proc/uptime)
		s=${s/.*}
	else
		boot=$(date -d"$(uptime -s)" +%s)
		now=$(date +%s)
		s=$((now - boot))
	fi
	d="$((s / 60 / 60 / 24)) days"
	h="$((s / 60 / 60 % 24)) hours"
	m="$((s / 60 % 60)) minutes"

	# Remove plural if < 2.
	((${d/ *} == 1)) && d=${d/s}
	((${h/ *} == 1)) && h=${h/s}
	((${m/ *} == 1)) && m=${m/s}

    # Hide empty fields.
	((${d/ *} == 0)) && unset d
	((${h/ *} == 0)) && unset h
	((${m/ *} == 0)) && unset m

	uptime=${d:+$d, }${h:+$h, }$m
	uptime=${uptime%', '}
	uptime=${uptime:-$s seconds}

	# Make the output of uptime smaller.
	cuptime=${uptime/ minutes/ mins}
	cuptime=${uptime/ minute/ min}
	cuptime=${uptime/ seconds/ secs}
	echo "$cuptime"
}

sh_get_lshw() {
	#curl https://swapi.dev/api/people | jq '.results'

	#class video
	#lshw -json -quiet -C video >json_data
	#json_data=$(lshw -json -quiet -C video)
	#echo $json_data | jq '.'
	#gpu_gpu=$(jq -r '.[].product' <<< $json_data)
	#echo $gpu_gpu
	#gpu_vendor=$(jq -r '.[].vendor' <<< $json_data)
	#echo $gpu_vendor
	#gpu_desc=$(jq -r '.[].description' <<< $json_data)
	#echo $gpu_desc
	#gpu_driver=$(jq -r '.[].configuration.driver' <<< $json_data)
	#echo $gpu_driver
	#gpu_type=$(jq -r '.[].capabilities.pciexpress' <<< $json_data)
	#echo $gpu_type

	#all class
	printf "Scaling root\n"
	json_data=$(sudo lshw -json -quiet)
	os_host=$(jq -r '.[].children[0].product' <<< "$json_data")
	os_vendor=$(jq -r '.[].children[0].vendor' <<< "$json_data")
	os_version=$(jq -r '.[].children[0].version' <<< "$json_data")

	bios_bios=$(jq -r '.[0].children[0].children[0].vendor' <<< "$json_data")
	bios_version=$(jq -r '.[0].children[0].children[0].version' <<< "$json_data")
	bios_date=$(jq -r '.[0].children[0].children[0].date' <<< "$json_data")
	bios_uefi=$(jq -r '.[0].children[0].children[0].capabilities.uefi' <<< "$json_data")

	cpu_cpu=$(jq -r '.[0].children[0].children[5].product' <<< "$json_data")
	cpu_cores=$(jq -r '.[0].children[0].children[5].configuration.cores' <<< "$json_data")
	cpu_threads=$(jq -r '.[0].children[0].children[5].configuration.threads' <<< "$json_data")
	cpu_enabledcores=$(jq -r '.[0].children[0].children[5].configuration.enabledcores' <<< "$json_data")
	cpu_bits=$(jq -r '.[0].children[0].children[5].width' <<< "$json_data")

	gpu_gpu=$(jq -r '.[0].children[0].children[6].children[3].children[0].product' <<< "$json_data")
	gpu_vendor=$(jq -r '.[0].children[0].children[6].children[3].children[0].vendor' <<< "$json_data")
	gpu_desc=$(jq -r '.[0].children[0].children[6].children[3].children[0].description' <<< "$json_data")
	gpu_driver=$(jq -r '.[0].children[0].children[6].children[3].children[0].configuration.driver' <<< "$json_data")
}

sh_getinfo() {
	#exec > /dev/null 2>&1
	#f_title=$USER@$HOSTNAME
	#f=$(uname -a | awk '{printf $2}' | sed 's/os/ OS/g')
	#f_os=$(uname -o)
	#f_kname=$(uname -a | awk '{print $1}')
	#f_kv=$( uname -a | awk '{print $3}')
	#f_uptime=$(uptime | awk '{print $3}'|tr "," " ")" min"
	#f_uptime=$(uptime | awk '{print $1, $2}')
	#f_mem=$(echo $(cat /proc/meminfo | sed -n '1p' |tr -d [A-Za-z:' ']) / 1024 | bc)" MB"
	#f_memfree=$(echo $(cat  /proc/meminfo | sed -n '2p' |tr -d [A-Za-z:' ']) / 1024 | bc)" MB"
	#f_ach=$(getconf LONG_BIT)"-bit"
	#f_char=$(expr length "$f_title") ql=
	#for i in $(seq 1 $f_char); do
	#	ql="$qlâ”€"
	#done
	#exec > /dev/tty

#	os_shell=$(basename $SHELL)
	os_shell=$(sh_getshell)
	os_core="$(lsb_release -d | cut -f2) $(uname -om)"
	os_vendor="$(< /sys/devices/virtual/dmi/id/board_vendor)"
	os_host="$(< /sys/devices/virtual/dmi/id/board_name) "
	os_host+="$(< /sys/devices/virtual/dmi/id/board_version)"
	bios_bios="$(< /sys/devices/virtual/dmi/id/bios_vendor)"
	bios_version="$(< /sys/devices/virtual/dmi/id/bios_version)"
	bios_date="$(< /sys/devices/virtual/dmi/id/bios_date)"

	os_distro="$(uname -n)"
#	os_kernel="$(uname -r) $(uname -m)"
	os_kernel="$(uname -a)"

	os_mem="$(free -h | grep Mem | awk '{print $2 }')"
	os_memfree="$(free -h | grep Mem | awk '{print $4 }')"

#	wm_resolucao=$(xrandr | sed -n '1p' | sed 's/.*current*//g;s/,.*//g;s/ //g')
	wm_resolucao=$(sh_getresolution)
#	wm_desktop=$XDG_CURRENT_DESKTOP
	wm_desktop=$(sh_getdesktop)
	wm_font=$(fc-match | sed 's/\..*//g')
	wm_browser=$(xdg-settings get default-web-browser|sed 's/userapp-//;s/\..*//g')

	cpu_cpu=$(grep -o 'model name.*' /proc/cpuinfo | sed -n '1p' | sed 's/.*:.//g;s/(.)//g')
	cpu_temp=$(sensors | grep "Package id 0:"|sed 's/.*:  +//g;s/ .*//')
	cpu_cores=$(nproc)

#	gpu_driver=$(lshw -quiet -C video | grep driver|cut -d= -f2 | awk '{print $1}')
#	gpu_gpu=$(lshw -quiet -C video | grep product: | cut -d: -f2)
#	gpu_desc="$(lshw -quiet -C video | grep description|cut -d= -f1|sed 's/^[ \t]*//')"
	gpu_gpu=$(lspci | grep VGA | cut -f5- -d' ')
	gpu_driver=$(lspci -k | grep -A 3 -iE "(VGA|3D)" | grep "Kernel driver" | cut -d' ' -f5-)
}

sh_setinfo() {
	sh_getinfo
#	sh_get_lshw
#	aInfo+=("${green}                     $USER@$HOSTNAME${reset}")
#	aInfo+=("${red}             $(sh_replicate "=" 26)${reset}")
#	aInfo+=("${reset}             OS         : ${green}$os_core")
	aInfo+=("${green}$USER@$HOSTNAME${reset}")
	aInfo+=("${red}$(sh_replicate "=" 26)${reset}")
	aInfo+=("OS         : $os_core")
	aInfo+=("Distro     : $(uname -n)")
	aInfo+=("Kernel     : ${reset}$os_kernel")
	aInfo+=("Shell      : ${reset}$os_shell")
	aInfo+=("Host       : ${reset}$os_vendor $os_host $os_version")
	aInfo+=("Bios       : ${reset}$bios_bios, $bios_version, $bios_date, $bios_uefi")
	aInfo+=("${red}-----------------------------------------${reset}")
	aInfo+=("Mem RAM    : ${reset}$os_mem")
	aInfo+=("Mem free   : ${reset}$os_memfree")
	aInfo+=("Uptime     : ${reset}$(sh_getuptime)")
	aInfo+=("${red}-----------------------------------------${reset}")
	aInfo+=("CPU        : ${reset}$cpu_cpu $cpu_temp")
	aInfo+=("Core(s)    : ${reset}$cpu_cores, Temp: $cpu_temp")
	aInfo+=("GPU        : ${reset}$gpu_gpu")
   aInfo+=("GPU driver : ${reset}$gpu_driver")
	aInfo+=("${red}-----------------------------------------${reset}")
 	aInfo+=("Terminal   : ${reset}$(tty)${reset}")
 	aInfo+=("Desktop    : ${reset}$wm_desktop${reset}")
	aInfo+=("Fonte      : ${reset}$wm_font${reset}")
#	aInfo+=("$(printf "%69s" " ")Resolucao  : ${reset}$wm_resolucao")
#	aInfo+=("$(printf "%69s" " ")Browser    : ${reset}$wm_browser")
#	aInfo+=("$(printf "%69s" " ")${red}-----------------------------------------${reset}")
#	aInfo+=("$(printf "%69s" " ")${red}-----------------------------------------${reset}")
	aInfo+=("Resolucao  : ${reset}$wm_resolucao")
	aInfo+=("Browser    : ${reset}$wm_browser")
	aInfo+=("${red}-----------------------------------------${reset}")
}

sh_tux() {
	base64 -d <<<"ICAgICBfLWBgYGBgLSwgICAgICAgICAgICwtICctIC4KICAgLicgICAuLSAtIHwgICAgICAgICAgfCAtIC0uICBgLgogLy4nICAvICAgICAgICAgICAgICAgICAgICAgYC4gICBcCjovICAgOiAgICAgIF8uLi4gICAuLi5fICAgICAgYGAgICA6Cjo6ICAgOiAgICAgLy5fIC5gOidfLi5fXC4gICAgfHwgICA6Cjo6ICAgIGAuXyAuLyAgLGAgIDogICAgXCAuIF8uJycgICAuCmA6LiAgICAgIC8gICB8ICAtLiAgXC0uIFxfICAgICAgLyAKICBcOi5fIF8vICAuJyAgIC5AKSAgXEApIGAgYFwgLC4nCiAgICAgXy8sLS0nICAgICAgIC4tIC5cLC0uYC0tYC4KICAgICAgICwnLycnICAgICAoKCBcIGAgICkKICAgICAgICAvJy8nICBcICAgIGAtJyAgKAogICAgICAgICAnLycnICBgLl8sLS0tLS0nCiAgICAgICAgICAnJy8nICAgIC4sLS0tJwogICAgICAgICAgICcnLycgICAgICA7OgogICAgICAgICAgICAgJycvJycgICcnLwogICAgICAgICAgICAgICAnJy8nJy8nJwogIC=="
}

sh_tuxOLD() {
	aTux+=("${green}                                            .','")
	aTux+=("${green}                                          .;,;;  ;;''','")
	aTux+=("${green}                                       ,,  ;;;;;;;;;;;;'")
	aTux+=("\033[01;39m                           .,:clll:;. \033[01;32m,;;  ;;;;;;;;;;;'              \033[01;39m")
	aTux+=("\033[01;39m                           .,:clll:;. \033[01;32m,;;  ;;;;;;;;;;;'              \033[01;39m")
	aTux+=("\033[01;39m                       ',,'.     ..;o0N0d;\033[01;32m,;;;;;;;;                  \033[01;39m")
	aTux+=("\033[01;39m                    .c;                ;OM0l\033[01;32m,;;;;;;;.                \033[01;39m")
	aTux+=("\033[01;39m                   ox                    .0MK:\033[01;32m.;;;;.                 \033[01;39m")
	aTux+=("\033[01;39m                 .KO                       xMWc      \033[01;32m..',,,          \033[01;39m")
	aTux+=("\033[01;39m                 XW                   ...   OMMl\033[01;32m;;;;;;;;,' ......    \033[01;39m")
	aTux+=("\033[01;39m                 Mk     .,:;'      :OWMMMXo. WMN\033[01;32m;;;;;;;,,,;,;;;;;;,' \033[01;39m")
	aTux+=("\033[01;39m                WMl   .KMMMMMMKo,lWMMMWKWMMM;lMMl\033[01;32m;;;;;;;;;;;;;;;;;,' \033[01;39m")
	aTux+=("\033[01;32m      .',,,'... \033[01;39mMMo   KMMMMMMMMMMMMMMMc .MMMK.MMd\033[01;32m;;;;;;;;;;;;;;;;'   \033[01;39m")
	aTux+=("\033[01;32m   ..  '..',;;;,\033[01;39mNMd   MMMM. oMMMMMMMMMMNWMMMW KMl\033[01;32m;;;,  ;;;;;;;;;;;;; \033[01;39m")
	aTux+=("\033[01;32m .,;;;;;;;;;;;;;\033[01;39mdMl   0MMMXOWMMMMW\033[01;33mXXX\033[01;39mWMMMMMMW.dX\033[01;32m,;;'  ,;;;;;;;;;;;;; \033[01;39m")
	aTux+=("\033[01;32m    ,;;;;;;;;;;;,\033[01;39mK:   cNWMMMMMMW\033[01;33mOxxxxx\033[01;39mKMMMMWK,.c\033[01;32m;   ;;;;;;;;;;;;;;;;;\033[01;39m")
	aTux+=("\033[01;32m .;;;;;;;;;;;,,;;;.   \033[01;39m.KKXWMMMMN\033[01;33mxxxxxxx\033[01;39mMMMWKk''\033[01;32m,.  ;;;;'   ;;;;;;;;;;\033[01;39m")
	aTux+=("\033[01;32m ';;;;;;;;;;;,  ';,.   \033[01;39mxKKKKNWMM\033[01;33mldxxxxx\033[01;39mNWKd:..'\033[01;32m             '''..;;;;\033[01;39m")
	aTux+=("\033[01;32m,,;;;;;;;;,;,;;; .,;,. \033[01;39m.:ok0KKKXx\033[01;33m:oxxxx\033[01;39mc\033[01;32m'.                          \033[01;39m")
	aTux+=("\033[01;32m               .   '... \033[01;39m..',coxOO;'\033[01;33m,oxx \033[01;32m\033[01;32m                             \033[01;39m")
	aTux+=("\033[01;32m                                     \033[01;33mlx\033[01;39m                              ")

	for i in $(seq 0 23); do
		echo -e "${aTux[$i]}  ${aInfo[$i]}"
	done
}

sh_cpuinfo() {
    for (( i=1; i<=70; i+=1));
    do
		var=$(echo "${clshw}" | sed -n ${i},${i}p)
        if [ "$var" = "" ]; then
            continue
        fi
        if [ $i -lt 3 ]; then
            echo -e "${blue}${var}${reset}"
        else
            echo -e "${var}"
#		    echo -e "${clshw}" |sed -n ${i},${i}p
        fi
	done
}

sh_lsinfo() {
	echo -n "${red}[lscpu]$(sh_replicate '=' $(( COLUMNS-7 )))${reset}";	lscpu
	echo -n "${red}[lsirq]$(sh_replicate '=' $(( COLUMNS-7 )))${reset}";	lsirq
	echo -n "${red}[lsblk]$(sh_replicate '=' $(( COLUMNS-7 )))${reset}";	lsblk
	echo -n "${red}[lslogins]$(sh_replicate '=' $(( COLUMNS-10 )))${reset}"; lslogins
	echo -n "${red}$(sh_replicate '=' "$COLUMNS")${reset}"
	echo
}

sh_write() {
	printf "\033[$1;$2H%s\n" "$3"
}

sh_getdesktop() {
    de=$(xprop -root | awk '/KDE_SESSION_VERSION|^_MUFFIN|xfce4|xfce5/')

    # Format strings.
    case $de in
        KDE_SESSION_VERSION*) de=KDE${de/* = } ;;
        *xfce4*)  de=Xfce4 ;;
        *xfce5*)  de=Xfce5 ;;
        *xfce*)   de=Xfce ;;
        *mate*)   de=MATE ;;
        *GNOME*)  de=GNOME ;;
        *MUFFIN*) de=Cinnamon ;;
    esac

    ((${KDE_SESSION_VERSION:-0} >= 4)) && de=${de/KDE/Plasma}

    if [[ $de_version == on && $de ]]; then
        case $de in
            Plasma*)   de_ver=$(plasmashell --version) ;;
            MATE*)     de_ver=$(mate-session --version) ;;
            Xfce*)     de_ver=$(xfce4-session --version) ;;
            GNOME*)    de_ver=$(gnome-shell --version) ;;
            Cinnamon*) de_ver=$(cinnamon --version) ;;
            Deepin*)   de_ver=$(awk -F'=' '/Version/ {print $2}' /etc/deepin-version) ;;
            Budgie*)   de_ver=$(budgie-desktop --version) ;;
            LXQt*)     de_ver=$(lxqt-session --version) ;;
            Lumina*)   de_ver=$(lumina-desktop --version 2>&1) ;;
            Trinity*)  de_ver=$(tde-config --version) ;;
            Unity*)    de_ver=$(unity --version) ;;
        esac

        de_ver=${de_ver/*TDE:}
        de_ver=${de_ver/tde-config*}
        de_ver=${de_ver/liblxqt*}
        de_ver=${de_ver/Copyright*}
        de_ver=${de_ver/)*}
        de_ver=${de_ver/* }
        de_ver=${de_ver//\"}

        de="$de $de_ver"
    fi
		  echo "$de"
}

sh_getpos() {
	declare -g public_nrow
	# Envia a sequÃªncia de escape para o terminal
	printf "\033[6n"
	# LÃª a resposta do terminal e extrai a posiÃ§Ã£o atual do cursor
	read -s -d R CUR_POS
	CUR_POS=${CUR_POS#*[}    	# Remove a parte inicial da resposta
	CUR_X=${CUR_POS##*;}    	# Extrai a coordenada X
	CUR_Y=${CUR_POS%%;*}    	# Extrai a coordenada Y
	public_nrow=$CUR_Y
#	printf $CUR_Y
}

sh_setvar
echo "Wait..."
clear
#nrow=$(sh_getpos)
sh_getpos
nrow=$public_nrow
ncol=38
sh_setinfo
#sh_cpuinfo
#sh_lsinfo
sh_tux
nlen=${#aInfo[*]}
for i in $(seq 0 $nlen); do
#	echo -e "${aTux[$i]}  ${aInfo[$i]}"
	sh_write $(( nrow+$i )) "$ncol" "${aInfo[$i]}"
done
