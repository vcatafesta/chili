"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.instantiateTFileFormat = exports.getTFileFormatList = void 0;
const flat_json_1 = require("./flat-json/flat-json");
const nested_json_1 = require("./nested-json/nested-json");
function getTFileFormatList() {
    return Object.keys(fileFormatMap);
}
exports.getTFileFormatList = getTFileFormatList;
const fileFormatMap = {
    "flat-json": null,
    "nested-json": null,
    yaml: null,
    po: null,
    xml: null,
    "ios-strings": null,
    arb: null,
    csv: null,
};
async function instantiateTFileFormat(fileFormat) {
    /**
     * To improve launch-performance, we import file-formats dynamically.
     */
    switch (fileFormat) {
        case "flat-json":
            return new flat_json_1.FlatJson();
        case "nested-json":
            return new nested_json_1.NestedJson();
        case "yaml":
            return new (await Promise.resolve().then(() => __importStar(require("./yaml/yaml-generic")))).YamlGeneric();
        case "po":
            return new (await Promise.resolve().then(() => __importStar(require("./po/po-files")))).PoFile();
        case "arb":
            return new (await Promise.resolve().then(() => __importStar(require("./flutter-arb/flutter-arb")))).FlutterArb();
        case "xml":
            return new (await Promise.resolve().then(() => __importStar(require("./xml/xml-generic")))).XmlGeneric();
        case "ios-strings":
            return new (await Promise.resolve().then(() => __importStar(require("./ios-strings/ios-strings")))).IosStrings();
        case "csv":
            return new (await Promise.resolve().then(() => __importStar(require("./csv/csv")))).SimpleCsv();
    }
}
exports.instantiateTFileFormat = instantiateTFileFormat;
