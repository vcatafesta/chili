#!/usr/bin/env bash

#  chili-chroot - chroot util compatible with:
#  Chili GNU/Linux - https://github.com/vcatafesta/ChiliOS
#  Chili GNU/Linux - https://chililinux.com
#  Chili GNU/Linux - https://chilios.com.br
#
#  Created: 2019/04/05
#  Altered: 2023/05/27
#
#  Copyright (c) 2019-2022, Vilmar Catafesta <vcatafesta@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#  chili-chroot uses quite a few external programs during its execution. You
#  need to have at least the following installed for makepkg to function:
#     awk, bsdtar (libarchive), bzip2, coreutils, fakeroot, file, find (findutils),
#     gettext, gpg, grep, gzip, sed, tput (ncurses), xz
#########################################################################
shopt -s extglob

sh_setenvironment() {
	declare -g ON_MOUNTS=()
   bold=$(tput bold)
   white="${bold}$(tput setaf 7)"
   black="${bold}$(tput setaf 0)"
   red=$(tput bold)$(tput setaf 196)
   green=$(tput setaf 2)
   yellow=$(tput bold)$(tput setaf 3)
   blue=$(tput setaf 4)
   pink=$(tput setaf 5)
   cyan=$(tput setaf 6)
   orange=$(tput setaf 3)
   purple=$(tput setaf 125);
   violet=$(tput setaf 61);
   COL_NC='\e[0m' # No Color
   COL_LIGHT_GREEN='\e[1;32m'
   COL_LIGHT_RED='\e[1;31m'
   TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
   CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
   INFO="[i]"
   DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
   OVER="\\r\\033[K"
   DOTPREFIX="  ${black}::${reset} "
}

msg() {
	local retval="${PIPESTATUS[0]}"

	if [[ $retval -eq 0 ]]; then
		printf "  %b %s\\n" "${TICK}" "${*}"
	else
		printf "  %b %s\\n" "${CROSS}" "${*}"
	fi
}

sh_ignore_error() {
	"$@" 2>/dev/null
	return 0
}

sh_chroot_maybe_add_mount() {
	local cond=$1; shift
	if eval "$cond"; then
		sh_mount_bind "$@"
	fi
}

sh_mount_bind() {
	mount "$@" 2>&1
	ON_MOUNTS+=("$2")
}

sh_stop_bind() {
	if (( ${#ON_MOUNTS[@]} )); then
		msg "Unbinding $CHROOTDIR"
		umount -R "${ON_MOUNTS[@]}" >/dev/null 2>&-
	fi
	unset ON_MOUNTS
}

sh_init_bind() {
	if test $# -ge 1; then
      CHROOTDIR="$1"
      [[ ${CHROOTDIR} = '.' ]] && CHROOTDIR=${PWD}
      for i in /proc /sys /dev /dev/pts /dev/shm /run /tmp; do
         if [[ ! -d "${CHROOTDIR}${i}" ]]; then
		      msg "Generate ${i} in $CHROOTDIR"
   	      mkdir -p "${CHROOTDIR}${i}" >/dev/null 2>&-
			fi
      done

      sh_mount_bind proc "${CHROOTDIR}/proc" -t proc -o nosuid,noexec,nodev &&
      sh_mount_bind sys "${CHROOTDIR}/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
      sh_ignore_error sh_chroot_maybe_add_mount "[[ -d '$CHROOTDIR/sys/firmware/efi/efivars' ]]" \
         efivarfs "$CHROOTDIR/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev &&
      sh_mount_bind udev "${CHROOTDIR}/dev" -t devtmpfs -o mode=0755,nosuid &&
      sh_mount_bind devpts "${CHROOTDIR}/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
      sh_mount_bind shm "${CHROOTDIR}/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev &&
      sh_mount_bind run "${CHROOTDIR}/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
      sh_mount_bind tmp "${CHROOTDIR}/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
      msg "Starting CHROOT at $CHROOTDIR"
      chroot ${CHROOTDIR}
		sh_stop_bind
   else
      msg "Uso: chili-chroot /mnt/full"
   fi
}

sh_setenvironment
sh_init_bind "$@"
