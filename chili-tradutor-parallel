#!/usr/bin/env bash

#xgettext --language=Shell --keyword=gettext --output=$1.pot $1
#trans -b :en "Impressoras" "Bom dia" "Obrigado"
#trans -b :en "error: you cannot perform this operation unless you are root."
#trans -R #Para conhecer os códigos de idioma que podemos usar, basta executar o seguinte comando:
#trans -T #Para conhecer os códigos de idioma que podemos usar, basta executar o seguinte comando:

sh_configure() {
	# Definir a variável de controle para restaurar a formatação original
	reset=$(tput sgr0)

	# Definir os estilos de texto como variáveis
	bold=$(tput bold)
	underline=$(tput smul)   # Início do sublinhado
	nounderline=$(tput rmul) # Fim do sublinhado
	reverse=$(tput rev)      # Inverte as cores de fundo e texto

	# Definir as cores ANSI como variáveis
	black=$(tput bold)$(tput setaf 0)
	red=$(tput bold)$(tput setaf 196)
	green=$(tput bold)$(tput setaf 2)
	yellow=$(tput bold)$(tput setaf 3)
	blue=$(tput setaf 4)
	pink=$(tput setaf 5)
	magenta=$(tput setaf 5)
	cyan=$(tput setaf 6)
	white=$(tput setaf 7)
	gray=$(tput setaf 8)
	orange=$(tput setaf 202)
	purple=$(tput setaf 125)
	violet=$(tput setaf 61)
	light_red=$(tput setaf 9)
	light_green=$(tput setaf 10)
	light_yellow=$(tput setaf 11)
	light_blue=$(tput setaf 12)
	light_magenta=$(tput setaf 13)
	light_cyan=$(tput setaf 14)
	bright_white=$(tput setaf 15)

	# Cores - Substitua pelos códigos ANSI do seu terminal, se necessário
	GREEN="\033[1;32m"   # Verde
	RED="\033[1;31m"     # Vermelho
	YELLOW="\033[1;33m"  # Amarelo
	BLUE="\033[1;34m"    # Azul
	MAGENTA="\033[1;35m" # Magenta
	CYAN="\033[1;36m"    # Ciano
	RESET="\033[0m"      # Resetar as cores
}

sh_usage() {
	cat <<-EOF
		Usage:
			$0 <script>
			$0 <script> en
	EOF
	exit 1
}

sh_configure
if [[ $# -eq 0 ]]; then
	sh_usage
fi

if [[ $# -ge 2 ]]; then
	declare -ga idiomas=($2)
else
	declare -ga idiomas=(bg cs da de el en es et fi fr he hr hu is it ja ko nl no pl pt-PT pt-BR ro ru sk sv tr uk zh fa hi ar)
fi

echo 'Running xgettext'
xgettext --verbose --from-code=UTF-8 --language=shell --keyword=gettext --output $1.pot $1
#bash --dump-po-strings $1 >>$1.pot
echo 'Running sed #1'
sed -i 's/"Content-Type: text\/plain; charset=CHARSET\\n"/"Content-Type: text\/plain; charset=UTF-8\\n"/' $1.pot
echo 'Running sed #2'
sed -i 's/"Language: \\n"/"Language: pt_BR\\n"/' $1.pot
#traduzir com o trans
echo 'Running msggrep'
msggrep -vvv --msgid --msgstr --output-file=$1-temp.po $1.pot
echo

if ! test -e $1.pot; then
	echo "Error: Cannot open $1.pot"
	exit 1
fi

# Função para processar um idioma
function processar_idioma() {
	idioma="$1"
	app="$2"
	file_po="${app}-${idioma}.po"
	temp_po="${app}-temp-${idioma}.po"

	[[ -e "$file_po" ]] && rm "$file_po"
	msginit --no-translator --locale="${idioma}" --input "${app}.pot" --output "${file_po}"
	sed -i 's|Content-Type: text/plain; charset=ASCII|Content-Type: text/plain; charset=utf-8|g' "${file_po}"
	cp "$file_po" "$temp_po" >&/dev/null
	rm "$file_po" >&/dev/null

	process=0
	line_number=0
	while IFS= read -r line; do
		((++line_number))
		if grep -qi '^msgid ' <<<"$line" || grep -qi '^msgstr' <<<$line; then
			msgid=$(echo "$line" | grep '^msgid ' | awk -F'"' '{print $2}')
			msgstr=$(echo "$line" | grep '^msgstr ' | awk -F'"' '{print $2}')

			if ((process)); then
				process=0
				continue
			fi
			if [[ -n "$msgid" && -z "$msgstr" ]]; then
				process=1
				translation=$(trans -no-auto -b :"$idioma" "$msgid")
				{
					echo "$line"
					echo "msgstr \"$translation\""
				} >>"$file_po"
				continue
			fi
		fi
		echo "$line" >>"$file_po"
	done <"$temp_po"

	#   cp "$file_po" "$temp_po"
	mkdir -p "usr/share/locale/$idioma/LC_MESSAGES/" >&/dev/null
	if msgfmt -v "$file_po" -o "usr/share/locale/$idioma/LC_MESSAGES/$2.mo"; then
		rm "$temp_po" >&/dev/null
	fi

	# Exemplo: Simulando processamento
	sleep 1
	echo "Processado: $idioma"
}
export -f processar_idioma

# Usando parallel para processar os idiomas em paralelo
parallel --jobs 50% processar_idioma {} "$1" ::: "${idiomas[@]}"

:<<'comment'
# Loop através dos idiomas usando coproc para processamento paralelo
for lang in "${idiomas[@]}"; do
#	coproc processar_idioma "$lang" "$1"
	processar_idioma "$lang" "$1"
done
# Aguardar todos os processos em segundo plano terminarem
wait
comment

wait
echo "Todos os idiomas processados."
exit

for x in *.po; do
	echo $x
	file_name="$x"
	lang="${file_name%.po}"
	msgfmt -v $x -o usr/share/locale/$lang/LC_MESSAGES/$i.mo
done
