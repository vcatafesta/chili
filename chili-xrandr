#!/usr/bin/env bash

# debug
export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
readonly DEPENDENCIES=(xrandr cvt tput dialog awk grep sed)
readonly sep='\xe2\x94\x82'

sh_setconf() {
	COL_NC='\e[0m' # No Color
   COL_LIGHT_GREEN='\e[1;32m'
   COL_LIGHT_RED='\e[1;31m'
   TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
   CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
   INFO="[i]"
   # shellcheck disable=SC2034
   DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
   OVER="\\r\\033[K"
   DOTPREFIX="  ${black}::${reset} "
}

inkey() {
	read -t "$1" -n1 -r -p "" lastkey
}

sh_checkDependencies() {
	local d
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -n $(command -v "$d") ]] && { :; } || { log_msg "ERROR: Could not find command ${cyan}'$d'${reset}"; missing+=("$d"); errorFound=1; }
	done
	if (( errorFound )); then
		echo "${yellow}---------------IMPOSSIBLE TO CONTINUE---------------"
		echo "${red}This script needs the commands listed above"
		echo "Install them and/or make sure they are in your \$PATH"
		echo "${yellow}---------------IMPOSSIBLE TO CONTINUE---------------"
		die "Aborted!"
	fi
}

sh_setvarcolors() {
	if tput setaf 1 &> /dev/null; then
		tput sgr0; # reset colors
		bold=$(tput bold);
		reset=$(tput sgr0);
		rst=$(tput sgr0);
		rs=$(tput sgr0);
		blue=$(tput setaf 33);
		cyan=$(tput setaf 37);
		green=$(tput setaf 2);
		orange=$(tput setaf 166);
		purple=$(tput setaf 125);
		red=$(tput setaf 124);
		violet=$(tput setaf 61);
		white=$(tput setaf 15);
		yellow=$(tput setaf 136);
		pink=$(tput setaf 129);
		black=$(tput setaf 0);
	fi
}

log_msg() {
	local retval="${PIPESTATUS[0]}"
	local pcount=$#

	(( pcount >= 2 )) && { retval=$1; shift; }
	[[ $retval -eq 0 ]] && printf " %b %s\\n" "${TICK}" "${*}" || printf " %b %s\\n" "${CROSS}" "${*}"
}

die() {
	local msg=$1; shift
	printf "  %b %s\\n" "${CROSS}" "${bold}${red}${msg}"
	exit 1
}

sh_setdevboy() {
	umc 2560 1080 50 --rbt
	# 2560x1080x49.94 @ 55.239kHz
	#Modeline "2560x1080x49.94"  150.250000  2560 2608 2640 2720  1080 1083 1087 1106  +HSync -VSync
	xrandr --verbose --newmode "2560x1080x49.94-umc"  150.250000  2560 2608 2640 2720  1080 1083 1087 1106  +HSync -VSync
	xrandr --verbose --addmode HDMI-1 "2560x1080x49.94-umc"

	umc 2560 1050 50 --rbt
	# 2560x1050x49.93 @ 53.676kHz
	#Modeline "2560x1050x49.93"  146.000000  2560 2608 2640 2720  1050 1053 1057 1075  +HSync -VSync
	xrandr --verbose --newmode "2560x1050x49.93-umc"  146.000000  2560 2608 2640 2720  1050 1053 1057 1075  +HSync -VSync
	xrandr --verbose --addmode HDMI-1 "2560x1050x49.93-umc"

	#umc 2560 1050 75 --rbt
	# 2560x1050x74.93 @ 81.526kHz
	# Modeline "2560x1050x74.93"  221.750000  2560 2608 2640 2720  1050 1053 1057 1088  +HSync -VSync
	#xrandr --verbose --newmode "2560x1050x74.93"  221.750000  2560 2608 2640 2720  1050 1053 1057 1088  +HSync -VSync
	#xrandr --verbose --addmode HDMI-1 "2560x1050x74.93"

	umc 2560 1080 50 -d
	# 2560x1080x50.00 @ 111.300kHz
	#Modeline "2560x1080x50.00"  391.776000  2560 2760 3040 3520  1080 1082 1084 1113  -HSync +VSync doublescan
	xrandr --verbose --newmode "2560x1080x50.00-umc"  391.776000  2560 2760 3040 3520  1080 1082 1084 1113  -HSync +VSync doublescan
	xrandr --verbose --addmode HDMI-1 "2560x1080x50.00-umc"
}

sh_getoutput() {
	local	-a arr=()
	local	-a aOutput
	local -a aConnect
	local nchoice nExit
	local x
	declare -g output

#	aOutput=('VGA-1' 'DVI-1' 'HDMI-1')
#	mapfile -t aOutput <<< "$(xrandr  | grep " connected " | awk '{ print$1 }')"	#conectado
	mapfile -t aOutput  <<< "$(xrandr | grep "connected " | awk '{ print$1 }')"     #todos
	mapfile -t aConnect <<< "$(xrandr | grep "connected " | awk '{ print$2 }')"     #todos

	for x in "${aOutput[@]}"; do
		arr[n++]="$x"
		arr[n++]=$(printf "$sep%-30s" "${aConnect[nc]}")
		((++nc))
	done

	while :; do
  	output=$(dialog														\
  				--stdout														\
  				--colors														\
  				--clear														\
  				--backtitle	"Chili resolution" 						\
  				--title		"Chili resolution" 						\
            --menu		'\nChoose device output for set:'	\
            0 0 0                                   		 	\
         	"${arr[@]}"													)

   	nExit=$?
   	if (( nExit )); then
   		die 'Cancelled!'
   	fi
   	break
	done
}

sh_setrand() {
	local	-a arr=()
	local	-a aHmode
	local -a aVmode
	local -a aRefresh
	local modeline mode
	local nchoice nExit
	local x y

# 	aVmode=('1080' '1080' '1080')
	aHmode=('2560 1080' '1920 1080' '1680 1080')
	aRefresh=('33' '44' '50' '60' '75')

	for x in "${aHmode[@]}"; do
		for y in "${aRefresh[@]}"; do
			arr[n++]="$x $y"
			arr[n++]=$(printf "$sep%-8s$sep%s" "$output" "$(cvt $x $y)")
		done
	done

	while :; do
  	nchoice=$(dialog														\
  				--stdout														\
  				--colors														\
  				--clear														\
  				--backtitle	"Chili resolution" 						\
  				--title		"Chili resolution" 						\
				--ok-label 	"Add"											\
				--extra-button --extra-label "Remove"           \
            --menu		'\nChoose resolution for set:'		\
            0 0 0	                                    		\
         	"${arr[@]}"													)

   	nExit=$?
   	[[ "$nExit" -eq 1 ]] &&	die 'Cancelled!'
		modeline=$(cvt $nchoice | grep Modeline | sed 's/Modeline //')
		modeline="${modeline%%_*}-custom ${modeline#* }"
		mode=$(awk '{print $1}' <<< "$modeline")
   	modeline="${modeline//\"/}"
   	mode="${mode//\"/}"
   	echo "Modeline : $modeline"
   	echo "Mode     : $mode"

		case $nExit in
		0) #add
			xrandr --verbose --newmode $modeline
			xrandr --verbose --addmode $output $mode
			inkey 2
			;;
		3) # remove
			xrandr --verbose --delmode $output $mode
			inkey 2
			;;
		esac
	done
}

sh_setconf
sh_setvarcolors
sh_checkDependencies
sh_getoutput
sh_setrand
