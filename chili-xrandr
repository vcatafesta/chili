#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166
#
#  chili-xrandr - Wrapper config resolution using xrandr, umc e cvt
#  Created: 2019/07/15 - 23:02
#  Altered: 2025/02/08 - 10:13
#  Updated: 2025/02/08 - 10:36
#
#  Copyright (c) 2019-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=chili-xrandr

# Definir a variável de controle para restaurar a formatação original
reset=$(tput sgr0)

# Definir os estilos de texto como variáveis
bold=$(tput bold)
underline=$(tput smul)   # Início do sublinhado
nounderline=$(tput rmul) # Fim do sublinhado
reverse=$(tput rev)      # Inverte as cores de fundo e texto

# Definir as cores ANSI como variáveis
black=$(tput bold)$(tput setaf 0)
red=$(tput bold)$(tput setaf 196)
green=$(tput bold)$(tput setaf 2)
yellow=$(tput bold)$(tput setaf 3)
blue=$(tput setaf 4)
pink=$(tput setaf 5)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
gray=$(tput setaf 8)
orange=$(tput setaf 202)
purple=$(tput setaf 125)
violet=$(tput setaf 61)
light_red=$(tput setaf 9)
light_green=$(tput setaf 10)
light_yellow=$(tput setaf 11)
light_blue=$(tput setaf 12)
light_magenta=$(tput setaf 13)
light_cyan=$(tput setaf 14)
bright_white=$(tput setaf 15)

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset}'
#set -x
#set -e
shopt -s extglob

# NOTES:
## Universal Modeline Calculator (UMC) - Calculadora de Modelines para Xorg
## https://github.com/chililinux/umc
## https://sourceforge.net/projects/umc/
## https://sourceforge.net/projects/umc/files/umc/umc-0.2/umc-0.2.tar.gz/download

#system
declare APP="${0##*/}"
declare APPDESC="Wrapper config resolution using xrandr, umc e cvt"
declare _VERSION_="1.2.08-20250208"
declare distro="$(uname -n)"
declare DEPENDENCIES=(tput dialog awk grep sed xrandr cvt umc)
declare sep='\xe2\x94\x82'
declare dialogRcFile="$HOME/.dialogrc"
declare ccabec="$APP - $_VERSION_ - $APPDESC"

cleanup() {
	rm -f ""
}
#trap cleanup EXIT

MostraErro() {
	echo "erro: ${red}$1${reset} => comando: ${cyan}'$2'${reset} => result=${yellow}$3${reset}"
}
trap 'MostraErro "$APP[$FUNCNAME][$LINENO]" "$BASH_COMMAND" "$?"; exit 1' ERR

sh_create_dialogrc() {
	cat >"$dialogRcFile" <<-DIALOG_EOF
		screen_color = (white,black,off)
		dialog_color = (white,black,off)
		title_color = (cyan,black,on)
		border_color = dialog_color
		shadow_color = (black,black,on)
		button_inactive_color = dialog_color
		button_key_inactive_color = dialog_color
		button_label_inactive_color = dialog_color
		button_active_color = (white,cyan,on)
		button_key_active_color = button_active_color
		button_label_active_color = (black,cyan,on)
		tag_key_selected_color = (white,cyan,on)
		item_selected_color = tag_key_selected_color
    form_text_color = (BLUE,black,ON)
		form_item_readonly_color = (green,black,on)
		itemhelp_color = (white,cyan,off)
		inputbox_color = dialog_color
		inputbox_border_color = dialog_color
		searchbox_color = dialog_color
		searchbox_title_color = title_color
		searchbox_border_color = border_color
		position_indicator_color = title_color
		menubox_color = dialog_color
		menubox_border_color = border_color
		item_color = dialog_color
		tag_color = title_color
		tag_selected_color = button_label_active_color
		tag_key_color = button_key_inactive_color
		check_color = dialog_color
		check_selected_color = button_active_color
		uarrow_color = screen_color
		darrow_color = screen_color
		form_active_text_color = button_active_color
		gauge_color = title_color
		border2_color = dialog_color
		searchbox_border2_color = dialog_color
		menubox_border2_color = dialog_color
		separate_widget = ''
		tab_len = 0
		visit_items = off
		use_shadow = off
		use_colors = on
	DIALOG_EOF
	export DIALOGRC="$dialogRcFile"
}

# Testa se o terminal suporta caracteres gráficos estendidos
sh_ascii_lines() {
	#Isso força o dialog a usar caracteres ASCII básicos para as bordas.
	#if [[ "$LANG" =~ 'UTF-8' ]]; then
	if [[ "$(printf '\u250C')" =~ "┌" ]]; then
		export NCURSES_NO_UTF8_ACS=1 # Terminal suporta ACS
	else
		export NCURSES_NO_UTF8_ACS=0 # Terminal NÃO suporta ACS
	fi
}

sh_setEnvironment() {
	[[ ! -e "$dialogRcFile" ]] && sh_create_dialogrc
	sh_ascii_lines
}

sh_setconf() {
	COL_NC='\e[0m' # No Color
	COL_LIGHT_GREEN='\e[1;32m'
	COL_LIGHT_RED='\e[1;31m'
	TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
	CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
	INFO="[i]"
	# shellcheck disable=SC2034
	DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
	OVER="\\r\\033[K"
	DOTPREFIX="  ${black}::${reset} "
}

inkey() {
	read -t "$1" -n1 -r -p "" lastkey
}

sh_checkDependencies() {
	local d
	local errorFound=false
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -n $(command -v "$d") ]] && { log_msg "Check: ${cyan}$d"; } || {
			log_msg "ERROR: Could not find command ${cyan}'$d'${reset}"
			missing+=("$d")
			errorFound=true
		}
	done
	if $errorFound; then
		echo "${yellow}---------------IMPOSSIBLE TO CONTINUE---------------"
		echo "${red}This script needs the commands listed above"
		echo "Install them and/or make sure they are in your \$PATH"
		echo "${yellow}---------------IMPOSSIBLE TO CONTINUE---------------"
		die "Aborted!"
	fi
}

sh_setvarcolors() {
	if tput setaf 1 &>/dev/null; then
		tput sgr0 # reset colors
		bold=$(tput bold)
		reset=$(tput sgr0)
		rst=$(tput sgr0)
		rs=$(tput sgr0)
		blue=$(tput setaf 33)
		cyan=$(tput setaf 37)
		green=$(tput setaf 2)
		orange=$(tput setaf 166)
		purple=$(tput setaf 125)
		red=$(tput setaf 124)
		violet=$(tput setaf 61)
		white=$(tput setaf 15)
		yellow=$(tput setaf 136)
		pink=$(tput setaf 129)
		black=$(tput setaf 0)
	fi
}

log_msg() {
	local retval="${PIPESTATUS[0]}"
	local pcount=$#

	((pcount >= 2)) && {
		retval=$1
		shift
	}
	[[ $retval -eq 0 ]] && printf " %b %s\\n" "${TICK}" "${*}" || printf " %b %s\\n" "${CROSS}" "${*}"
}

die() {
	local msg=$1
	shift
	printf "  %b %s\\n" "${CROSS}" "${bold}${red}${msg}"
	exit 1
}

sh_setdevboy() {
	umc 2560 1080 50 --rbt
	# 2560x1080x49.94 @ 55.239kHz
	#Modeline "2560x1080x49.94"  150.250000  2560 2608 2640 2720  1080 1083 1087 1106  +HSync -VSync
	xrandr --verbose --newmode "2560x1080x49.94-umc" 150.250000 2560 2608 2640 2720 1080 1083 1087 1106 +HSync -VSync
	xrandr --verbose --addmode HDMI-1 "2560x1080x49.94-umc"

	umc 2560 1050 50 --rbt
	# 2560x1050x49.93 @ 53.676kHz
	#Modeline "2560x1050x49.93"  146.000000  2560 2608 2640 2720  1050 1053 1057 1075  +HSync -VSync
	xrandr --verbose --newmode "2560x1050x49.93-umc" 146.000000 2560 2608 2640 2720 1050 1053 1057 1075 +HSync -VSync
	xrandr --verbose --addmode HDMI-1 "2560x1050x49.93-umc"

	#umc 2560 1050 75 --rbt
	# 2560x1050x74.93 @ 81.526kHz
	# Modeline "2560x1050x74.93"  221.750000  2560 2608 2640 2720  1050 1053 1057 1088  +HSync -VSync
	#xrandr --verbose --newmode "2560x1050x74.93"  221.750000  2560 2608 2640 2720  1050 1053 1057 1088  +HSync -VSync
	#xrandr --verbose --addmode HDMI-1 "2560x1050x74.93"

	umc 2560 1080 50 -d
	# 2560x1080x50.00 @ 111.300kHz
	#Modeline "2560x1080x50.00"  391.776000  2560 2760 3040 3520  1080 1082 1084 1113  -HSync +VSync doublescan
	xrandr --verbose --newmode "2560x1080x50.00-umc" 391.776000 2560 2760 3040 3520 1080 1082 1084 1113 -HSync +VSync doublescan
	xrandr --verbose --addmode HDMI-1 "2560x1080x50.00-umc"
}

sh_getoutput() {
	local -a arr=()
	local -a aOutput
	local -a aConnect
	local nchoice nExit
	local x
	declare -g output

	#	aOutput=('VGA-1' 'DVI-1' 'HDMI-1')
	#	mapfile -t aOutput <<< "$(xrandr  | grep " connected " | awk '{ print$1 }')"	#conectado
  echo "$red"
	if xrandr 1>/dev/null; then
  	mapfile -t aOutput <<<"$(xrandr | grep "connected " | awk '{ print$1 }')"  #todos
  	mapfile -t aConnect <<<"$(xrandr | grep "connected " | awk '{ print$2 }')" #todos
  else
    die "fatal"
  fi

	for x in "${aOutput[@]}"; do
		arr[n++]="$x"
		arr[n++]=$(printf "$sep%-30s" "${aConnect[nc]}")
		((++nc))
	done

	while :; do
		output=$(dialog \
			--stdout \
			--colors \
			--clear \
			--backtitle "$ccabec" \
			--title "Menu VIDEO DEVICE" \
			--menu '\nChoose device output for set:' \
			0 0 0 \
			"${arr[@]}")

		nExit=$?
		if ((nExit)); then
			die 'Cancelled!'
		fi
		break
	done
}

sh_setrand() {
	local -a arr=()
	local -a aHmode
	local -a aVmode
	local -a aRefresh
	local modeline mode
	local nchoice nExit
	local x y

	# 	aVmode=('1080' '1080' '1080')
	aHmode=('2560 1080' '1920 1080' '1680 1080' '1366 768' '1024 768' '800 600')
	aRefresh=('33' '44' '50' '60' '75')

	for x in "${aHmode[@]}"; do
		for y in "${aRefresh[@]}"; do
			arr[n++]="$x $y"
			arr[n++]=$(printf "$sep%-8s$sep%s" "$output" "$(cvt $x $y)")
		done
	done

	while :; do
		nchoice=$(dialog \
			--stdout \
			--colors \
			--clear \
			--backtitle "$ccabec" \
			--title "Menu CHOOSE RESOLUTION" \
			--ok-label "Add" \
			--extra-button --extra-label "Remove" \
			--menu '\nChoose resolution for set:' \
			0 0 0 \
			"${arr[@]}")

		nExit=$?
		[[ "$nExit" -eq 1 ]] && die 'Cancelled!'
		modeline=$(cvt $nchoice | grep Modeline | sed 's/Modeline //')
		modeline="${modeline%%_*}-custom ${modeline#* }"
		mode=$(awk '{print $1}' <<<"$modeline")
		modeline="${modeline//\"/}"
		mode="${mode//\"/}"
		echo "Modeline : $modeline"
		echo "Mode     : $mode"

		case $nExit in
		0) #add
			xrandr --verbose --newmode $modeline
			xrandr --verbose --addmode $output $mode
			xrandr --verbose --output $output --mode $mode
			inkey 2
			;;
		3) # remove
			xrandr --verbose --delmode $output $mode
			inkey 2
			;;
		esac
	done
}

sh_setEnvironment
sh_setconf
sh_setvarcolors
sh_checkDependencies
#sh_setdevboy
sh_getoutput
sh_setrand
