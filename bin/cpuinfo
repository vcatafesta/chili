#!/usr/bin/env bash

setvar(){
	if tput setaf 1 &> /dev/null; then
		tput sgr0; # reset colors
		bold=$(tput bold);
		reset=$(tput sgr0);
		black=$(tput setaf 0);
		blue=$(tput setaf 33);
		cyan=$(tput setaf 37);
		green=$(tput setaf 64);
		orange=$(tput setaf 166);
		purple=$(tput setaf 125);
		red=$(tput setaf 124);
		violet=$(tput setaf 61);
		white=$(tput setaf 15);
		yellow=$(tput setaf 136);
	else
		bold='';
		reset="\e[0m";
		black="\e[1;30m";
		blue="\e[1;34m";
		cyan="\e[1;36m";
		green="\e[1;32m";
		orange="\e[1;33m";
		purple="\e[1;35m";
		red="\e[1;31m";
		violet="\e[1;35m";
		white="\e[1;37m";
		yellow="\e[1;33m";
	fi

    if [ -z "${COLUMNS}" ]; then
       COLUMNS=$(stty size)
       COLUMNS=${COLUMNS##* }
    fi
    if [ "${COLUMNS}" = "0" ]; then
       COLUMNS=80
    fi

    arr=()
    inf=()
}

replicate(){
    for counter in $(seq 1 $2);
    do
        printf "%s" $1
    done
}

info(){
	exec > /dev/null 2>&1
	#f_title=$USER@$HOSTNAME
	#f=$(uname -a | awk '{printf $2}' | sed 's/os/ OS/g')
	#f_os=$(uname -o)
	#f_kname=$(uname -a | awk '{print $1}')
	#f_kv=$( uname -a | awk '{print $3}')
#	f_uptime=$(uptime | awk '{print $3}'|tr "," " ")" min"
	#f_uptime=$(uptime | awk '{print $1, $2}')
	#f_shell=$(basename $SHELL)
	f_resolucao=$(xrandr | sed -n '1p' | sed 's/.*current*//g;s/,.*//g;s/ //g')
	f_desk=$XDG_CURRENT_DESKTOP
	f_font=$(fc-match | sed 's/\..*//g')
	f_cpu=$(cat /proc/cpuinfo | grep -o 'model name.*' | sed -n '1p' | sed 's/.*:.//g;s/(.)//g')
	f_tcpu=$(sensors | grep "Package id 0:"|sed 's/.*:  +//g;s/ .*//')
	f_gpu=$(
		nvidia=$(which nvidia-settings 2>&1 > /dev/null &)
		gpu=$(glxinfo | grep "Vendor"|awk '{print $2}')
		amd=$(glxinfo | grep "Vendor"|awk '{print $2}')
		if [ -x "$nvidia" ]; then
		glxinfo |grep  -e "renderer string" | sed 's/.*: //g;s/(*.x.*)//g;s/(.*//g;s/\/.*//'
		elif [ "$gpu" == "Intel" ]; then
			echo "Intel Graphics"
		elif ["$amd" == "Amd" ]; then
			echo "AMD Graphics"
		else
			glxinfo | grep "renderer string"| sed 's/.*: //'
	fi
	)
	#f_mem=$(echo $(cat /proc/meminfo | sed -n '1p' |tr -d [A-Za-z:' ']) / 1024 | bc)" MB"
	#f_memfree=$(echo $(cat  /proc/meminfo | sed -n '2p' |tr -d [A-Za-z:' ']) / 1024 | bc)" MB"
	#f_ach=$(getconf LONG_BIT)"-bit"
	f_nave=$(xdg-settings get default-web-browser|sed 's/userapp-//;s/\..*//g')
	#f_char=$(expr length "$f_title") ql=
	#for i in $(seq 1 $f_char); do
	#	ql="$qlâ”€"
	#done
	exec > /dev/tty
}

set_info()
{
#    clshw=$(lshw -businfo -quiet | sed 's/.\{26\}//'|sed -n 3,25p)
    clshw=$(lshw -businfo -quiet)
    gpu=$(lshw -quiet -C video | grep product: | cut -d: -f2)

	info
	inf[0]="${green}                     $USER@$HOSTNAME${reset}"
	inf[1]="${red}             $(replicate "=" 26)${reset}"
	inf[2]="${reset}             OS         : ${reset}$(uname -o)"
	inf[3]="Distro     : ${reset}$(uname -n)"
	inf[4]="Kernel name: ${reset}$(uname -s)"
	inf[5]="Release    : ${reset}$(uname -r)"
	inf[6]="Arch       : ${reset}$(uname -m)"
	inf[7]="${red}-----------------------------------------${reset}"
	inf[8]="Mem RAM    : ${reset}$(free -h | grep Mem | awk '{print $2 }')"
	inf[9]="Mem free   : ${reset}$(free -h | grep Mem | awk '{print $4 }')"
	inf[10]="Uptime     : ${reset}$(uptime | awk '{print $1, $2}')"
	inf[11]="Shell      : ${reset}$(basename $SHELL)"
	inf[12]="${red}-----------------------------------------${reset}"
	inf[13]="CPU        : ${reset}$f_cpu $f_tcpu"
	inf[14]="Core(s)    : ${reset}$(nproc)"
	inf[15]="GPU        :${reset}${gpu}"
    inf[16]="GPU driver : ${reset}$(lshw -quiet -C video | grep driver|cut -d= -f2 | awk '{print $1}')"
	inf[17]="${reset}$(lshw -quiet -C video | grep description|cut -d= -f1|sed 's/^[ \t]*//')"
	inf[18]=" ${red}-----------------------------------------${reset}"
 	inf[19]="Desktop    : ${reset}$f_desk"
	inf[20]="Fonte      : ${reset}$f_font"
	inf[21]="$(printf "%69s" " ")Resolucao  : ${reset}$f_resolucao"
	inf[22]="$(printf "%69s" " ")Browser    : ${reset}$f_nave"
	inf[23]="$(printf "%69s" " ")${red}-----------------------------------------${reset}"
}

tux(){
	arr[0]="${green}                                            .','"
	arr[1]="${green}                                          .;,;;  ;;''','"
	arr[2]="${green}                                       ,,  ;;;;;;;;;;;;'"
	arr[3]="\033[01;39m                           .,:clll:;. \033[01;32m,;;  ;;;;;;;;;;;'              \033[01;39m"
	arr[4]="\033[01;39m                           .,:clll:;. \033[01;32m,;;  ;;;;;;;;;;;'              \033[01;39m"
	arr[5]="\033[01;39m                       ',,'.     ..;o0N0d;\033[01;32m,;;;;;;;;                  \033[01;39m"
	arr[6]="\033[01;39m                    .c;                ;OM0l\033[01;32m,;;;;;;;.                \033[01;39m"
	arr[7]="\033[01;39m                   ox                    .0MK:\033[01;32m.;;;;.                 \033[01;39m"
	arr[8]="\033[01;39m                 .KO                       xMWc      \033[01;32m..',,,          \033[01;39m"
	arr[9]="\033[01;39m                 XW                   ...   OMMl\033[01;32m;;;;;;;;,' ......    \033[01;39m"
	arr[10]="\033[01;39m                 Mk     .,:;'      :OWMMMXo. WMN\033[01;32m;;;;;;;,,,;,;;;;;;,' \033[01;39m"
	arr[11]="\033[01;39m                WMl   .KMMMMMMKo,lWMMMWKWMMM;lMMl\033[01;32m;;;;;;;;;;;;;;;;;,' \033[01;39m"
	arr[12]="\033[01;32m      .',,,'... \033[01;39mMMo   KMMMMMMMMMMMMMMMc .MMMK.MMd\033[01;32m;;;;;;;;;;;;;;;;'   \033[01;39m"
	arr[13]="\033[01;32m   ..  '..',;;;,\033[01;39mNMd   MMMM. oMMMMMMMMMMNWMMMW KMl\033[01;32m;;;,  ;;;;;;;;;;;;; \033[01;39m"
	arr[14]="\033[01;32m .,;;;;;;;;;;;;;\033[01;39mdMl   0MMMXOWMMMMW\033[01;33mXXX\033[01;39mWMMMMMMW.dX\033[01;32m,;;'  ,;;;;;;;;;;;;; \033[01;39m"
	arr[15]="\033[01;32m    ,;;;;;;;;;;;,\033[01;39mK:   cNWMMMMMMW\033[01;33mOxxxxx\033[01;39mKMMMMWK,.c\033[01;32m;   ;;;;;;;;;;;;;;;;;\033[01;39m"
	arr[16]="\033[01;32m .;;;;;;;;;;;,,;;;.   \033[01;39m.KKXWMMMMN\033[01;33mxxxxxxx\033[01;39mMMMWKk''\033[01;32m,.  ;;;;'   ;;;;;;;;;;\033[01;39m"
	arr[17]="\033[01;32m ';;;;;;;;;;;,  ';,.   \033[01;39mxKKKKNWMM\033[01;33mldxxxxx\033[01;39mNWKd:..'\033[01;32m             '''..;;;;\033[01;39m"
	arr[18]="\033[01;32m,,;;;;;;;;,;,;;; .,;,. \033[01;39m.:ok0KKKXx\033[01;33m:oxxxx\033[01;39mc\033[01;32m'.                          \033[01;39m"
	arr[19]="\033[01;32m               .   '... \033[01;39m..',coxOO;'\033[01;33m,oxx \033[01;32m\033[01;32m                             \033[01;39m"
	arr[20]="\033[01;32m                                     \033[01;33mlx\033[01;32m                              "

	for i in $(seq 0 23);
	do
		echo -e "${arr[$i]}  ${inf[$i]}"
	done

    for (( i=1; i<=70; i+=1));
    do
		var=$(echo "${clshw}" | sed -n ${i},${i}p)
        if [ "$var" = "" ]; then
            continue
        fi
        if [ $i -lt 3 ]; then
            echo -e "${blue}${var}${reset}"
        else
            echo -e "${var}"
#		    echo -e "${clshw}" |sed -n ${i},${i}p
        fi
	done
	echo -n "${red}$(replicate "=" $COLUMNS)${reset}"
	hostnamectl
	echo -n "${red}$(replicate "=" $COLUMNS)${reset}"
   echo
}
setvar
echo "Wait..."
set_info
tux
