#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166
#
#  chili-mount-btrfs
#  Created: 2025/03/16 - 18:12
#  Altered: 2025/03/16 - 18:12
#
#  Copyright (c) 2025-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=chili-mount-btrfs

# Definir a variável de controle para restaurar a formatação original
reset=$(tput sgr0)

# Definir os estilos de texto como variáveis
bold=$(tput bold)
underline=$(tput smul)   # Início do sublinhado
nounderline=$(tput rmul) # Fim do sublinhado
reverse=$(tput rev)      # Inverte as cores de fundo e texto

# Definir as cores ANSI como variáveis
black=$(tput bold)$(tput setaf 0)
red=$(tput bold)$(tput setaf 196)
green=$(tput bold)$(tput setaf 2)
yellow=$(tput bold)$(tput setaf 3)
blue=$(tput setaf 4)
pink=$(tput setaf 5)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
gray=$(tput setaf 8)
orange=$(tput setaf 202)
purple=$(tput setaf 125)
violet=$(tput setaf 61)
light_red=$(tput setaf 9)
light_green=$(tput setaf 10)
light_yellow=$(tput setaf 11)
light_blue=$(tput setaf 12)
light_magenta=$(tput setaf 13)
light_cyan=$(tput setaf 14)
bright_white=$(tput setaf 15)
COL_NC='\e[0m' # No Color
COL_LIGHT_GREEN='\e[1;32m'
COL_LIGHT_RED='\e[1;31m'
TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
INFO="[i]"
# shellcheck disable=SC2034
DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
OVER="\\r\\033[K"
DOTPREFIX="  ${black}::${reset} "

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset}'
#set -x
#set -e
shopt -s extglob

#system
declare APP="${0##*/}"
declare _VERSION_="1.0.0-20250316"
declare APPDESC="bash - Wraper for "
declare distro="$(uname -n)"
declare DEPENDENCIES=(tput)
declare dialogRcFile="/home/vcatafesta/.dialogrc"

cleanup() { rm -f ""; }
#trap cleanup EXIT
MostraErro() { echo "erro: ${red}$1${reset} => comando: ${cyan}'$2'${reset} => result=${yellow}$3${reset}"; }
trap 'MostraErro "$APP[$FUNCNAME][$LINENO]" "$BASH_COMMAND" "$?"; exit 1' ERR

sh_create_dialogrc() {
	cat >"$dialogRcFile" <<EOF_DIALOGRC
screen_color = (white,black,off)
dialog_color = (white,black,off)
title_color = (cyan,black,on)
border_color = dialog_color
shadow_color = (black,black,on)
button_inactive_color = dialog_color
button_key_inactive_color = dialog_color
button_label_inactive_color = dialog_color
button_active_color = (white,cyan,on)
button_key_active_color = button_active_color
button_label_active_color = (black,cyan,on)
tag_key_selected_color = (white,cyan,on)
item_selected_color = tag_key_selected_color
form_text_color = (BLUE,black,ON)
form_item_readonly_color = (green,black,on)
itemhelp_color = (white,cyan,off)
inputbox_color = dialog_color
inputbox_border_color = dialog_color
searchbox_color = dialog_color
searchbox_title_color = title_color
searchbox_border_color = border_color
position_indicator_color = title_color
menubox_color = dialog_color
menubox_border_color = border_color
item_color = dialog_color
tag_color = title_color
tag_selected_color = button_label_active_color
tag_key_color = button_key_inactive_color
check_color = dialog_color
check_selected_color = button_active_color
uarrow_color = screen_color
darrow_color = screen_color
form_active_text_color = button_active_color
gauge_color = title_color
border2_color = dialog_color
searchbox_border2_color = dialog_color
menubox_border2_color = dialog_color
separate_widget = ''
tab_len = 0
visit_items = off
use_shadow = off
use_colors = on
EOF_DIALOGRC
	export DIALOGRC="$dialogRcFile"
}

msg() {
	local msg="$1"
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")" # Remove as tags HTML
	echo -e "==>${cyan}running: ${yellow}${msg}${reset}"
}
export -f msg

msg_ok() {
	local msg="$1"
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")" # Remove as tags HTML
	echo -e "==>${cyan}feito: ${green}${msg}${reset}"
}
export -f msg_ok

msg_run() {
	local msg="$1"
	echo -e "==>${cyan}running: ${yellow}${msg}${reset}"
	eval "$msg"
}
export -f msg_run

die() {
	local msg=$1
	shift
	printf "  %b %s\\n" "${CROSS}" "${red}${msg}${reset}"
	exit 1
}

log_err() {
	printf "  %b %s\\n" "${CROSS}" "${*}"
}

log_msg() {
	local retval="${PIPESTATUS[0]}"
	local pcount=$#

	((pcount >= 2)) && {
		retval=$1
		shift
	}
	if [[ $retval -eq 0 ]]; then
		printf " %b %s\\n" "${TICK}" "${*}"
	else
		printf " %b %s\\n" "${CROSS}" "${*}"
	fi
}

################################################################################################

# Verifica se os argumentos foram passados
if [[ -z "$1" || -z "$2" || -z "$3" ]]; then
	die "Uso: $0 <partition> <partition_efi> <ponto de montagem>"
fi

_part="$1"
_part_efi="$2"
_dir_install="$3"

# Verifica se a partição existe
if [[ ! -e "$_part" ]]; then
	die "Erro: A partição '$_part' não existe!"
fi

# Verifica se o diretório de instalação existe, se não, tenta criá-lo
if [[ ! -d "$_dir_install" ]]; then
	msg "Criando diretório '$_dir_install'..."
	sudo mkdir -p "$_dir_install" || {
		die "Erro ao criar '$_dir_install'"
	}
fi

# Lista de subvolumes a montar
declare -a subvolumes=("@" "@home" "@cache" "@log" "@swapfc")
declare -a mountpoint=('' 'home' 'var/cache' 'var/log' 'swapfc')

# Monta cada subvolume
nc=0
for subvol in "${subvolumes[@]}"; do
	mount_point="$_dir_install/${mountpoint[nc]}"
	sudo mkdir -p "$mount_point"
	msg "Montando $_part em $mount_point com subvolume=$subvol..."
  sudo mount -o compress=zstd,subvol=$subvol "$_part" "$mount_point" || {
    die "Erro ao montar $subvol em $mount_point!"
  }
	((++nc))
done
msg_run "sudo mount $_part_efi $_dir_install/boot/efi"
msg_ok "✅ Montagem concluída com sucesso!"
